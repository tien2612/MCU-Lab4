
mcu_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038e4  080038e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e4  080038e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  0800395c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800395c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e433  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002410  00000000  00000000  0002e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000308e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018ea9  00000000  00000000  00031620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dd3d  00000000  00000000  0004a4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00089f21  00000000  00000000  00058206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e2127  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c40  00000000  00000000  000e2180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d4c  00000000  00000000  000e2dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003794 	.word	0x08003794

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003794 	.word	0x08003794

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe62 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f844 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f95e 	bl	8000418 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f932 	bl	80003c4 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000160:	f000 f87c 	bl	800025c <MX_IWDG_Init>
  MX_TIM2_Init();
 8000164:	f000 f894 	bl	8000290 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f8de 	bl	8000328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800016c:	4814      	ldr	r0, [pc, #80]	; (80001c0 <main+0x74>)
 800016e:	f001 fe33 	bl	8001dd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000172:	4814      	ldr	r0, [pc, #80]	; (80001c4 <main+0x78>)
 8000174:	f001 fe30 	bl	8001dd8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //SCH_Init();


  SCH_Add_Task(&task0, 0, 50);
 8000178:	2232      	movs	r2, #50	; 0x32
 800017a:	2100      	movs	r1, #0
 800017c:	4812      	ldr	r0, [pc, #72]	; (80001c8 <main+0x7c>)
 800017e:	f000 f9d3 	bl	8000528 <SCH_Add_Task>
  SCH_Add_Task(&task1, 3, 100);
 8000182:	2264      	movs	r2, #100	; 0x64
 8000184:	2103      	movs	r1, #3
 8000186:	4811      	ldr	r0, [pc, #68]	; (80001cc <main+0x80>)
 8000188:	f000 f9ce 	bl	8000528 <SCH_Add_Task>
  SCH_Add_Task(&task2, 5, 150);
 800018c:	2296      	movs	r2, #150	; 0x96
 800018e:	2105      	movs	r1, #5
 8000190:	480f      	ldr	r0, [pc, #60]	; (80001d0 <main+0x84>)
 8000192:	f000 f9c9 	bl	8000528 <SCH_Add_Task>
  SCH_Add_Task(&task3, 7, 200);
 8000196:	22c8      	movs	r2, #200	; 0xc8
 8000198:	2107      	movs	r1, #7
 800019a:	480e      	ldr	r0, [pc, #56]	; (80001d4 <main+0x88>)
 800019c:	f000 f9c4 	bl	8000528 <SCH_Add_Task>
  SCH_Add_Task(&task4, 9, 250);
 80001a0:	22fa      	movs	r2, #250	; 0xfa
 80001a2:	2109      	movs	r1, #9
 80001a4:	480c      	ldr	r0, [pc, #48]	; (80001d8 <main+0x8c>)
 80001a6:	f000 f9bf 	bl	8000528 <SCH_Add_Task>
  find_new_min_task();
 80001aa:	f000 fbbb 	bl	8000924 <find_new_min_task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 80001ae:	f000 fa17 	bl	80005e0 <SCH_Dispatch_Tasks>
	  // turn on LED for indicate when not in sleep mode
	  HAL_GPIO_WritePin(LED_SLEEP_GPIO_Port, LED_SLEEP_Pin, 0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2102      	movs	r1, #2
 80001b6:	4809      	ldr	r0, [pc, #36]	; (80001dc <main+0x90>)
 80001b8:	f001 f918 	bl	80013ec <HAL_GPIO_WritePin>
	  SCH_Dispatch_Tasks();
 80001bc:	e7f7      	b.n	80001ae <main+0x62>
 80001be:	bf00      	nop
 80001c0:	20000144 	.word	0x20000144
 80001c4:	200000b8 	.word	0x200000b8
 80001c8:	08000cd9 	.word	0x08000cd9
 80001cc:	08000d01 	.word	0x08000d01
 80001d0:	08000d29 	.word	0x08000d29
 80001d4:	08000d51 	.word	0x08000d51
 80001d8:	08000d79 	.word	0x08000d79
 80001dc:	40010800 	.word	0x40010800

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fb68 	bl	80028c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000202:	230a      	movs	r3, #10
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2310      	movs	r3, #16
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f972 	bl	8001504 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000226:	f000 f979 	bl	800051c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fbde 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800024e:	f000 f965 	bl	800051c <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_IWDG_Init+0x2c>)
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <MX_IWDG_Init+0x30>)
 8000264:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_IWDG_Init+0x2c>)
 8000268:	2203      	movs	r2, #3
 800026a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_IWDG_Init+0x2c>)
 800026e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000272:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_IWDG_Init+0x2c>)
 8000276:	f001 f903 	bl	8001480 <HAL_IWDG_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000280:	f000 f94c 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000ac 	.word	0x200000ac
 800028c:	40003000 	.word	0x40003000

08000290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <MX_TIM2_Init+0x94>)
 80002ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <MX_TIM2_Init+0x94>)
 80002b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <MX_TIM2_Init+0x94>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <MX_TIM2_Init+0x94>)
 80002c4:	2209      	movs	r2, #9
 80002c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_TIM2_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d4:	4813      	ldr	r0, [pc, #76]	; (8000324 <MX_TIM2_Init+0x94>)
 80002d6:	f001 fd2f 	bl	8001d38 <HAL_TIM_Base_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002e0:	f000 f91c 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <MX_TIM2_Init+0x94>)
 80002f2:	f001 fec5 	bl	8002080 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002fc:	f000 f90e 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_TIM2_Init+0x94>)
 800030e:	f002 f88d 	bl	800242c <HAL_TIMEx_MasterConfigSynchronization>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000318:	f000 f900 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000144 	.word	0x20000144

08000328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_TIM3_Init+0x94>)
 8000346:	4a1e      	ldr	r2, [pc, #120]	; (80003c0 <MX_TIM3_Init+0x98>)
 8000348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_TIM3_Init+0x94>)
 800034c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000350:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM3_Init+0x94>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_TIM3_Init+0x94>)
 800035a:	224f      	movs	r2, #79	; 0x4f
 800035c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_TIM3_Init+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_TIM3_Init+0x94>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <MX_TIM3_Init+0x94>)
 800036c:	f001 fce4 	bl	8001d38 <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f8d1 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4619      	mov	r1, r3
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_TIM3_Init+0x94>)
 8000388:	f001 fe7a 	bl	8002080 <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f8c3 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_TIM3_Init+0x94>)
 80003a4:	f002 f842 	bl	800242c <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003ae:	f000 f8b5 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000b8 	.word	0x200000b8
 80003c0:	40000400 	.word	0x40000400

080003c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART1_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003fc:	f002 f880 	bl	8002500 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f889 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000100 	.word	0x20000100
 8000414:	40013800 	.word	0x40013800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MX_GPIO_Init+0xb4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a26      	ldr	r2, [pc, #152]	; (80004cc <MX_GPIO_Init+0xb4>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_GPIO_Init+0xb4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_GPIO_Init+0xb4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a20      	ldr	r2, [pc, #128]	; (80004cc <MX_GPIO_Init+0xb4>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_GPIO_Init+0xb4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SLEEP_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800045c:	2200      	movs	r2, #0
 800045e:	21fa      	movs	r1, #250	; 0xfa
 8000460:	481b      	ldr	r0, [pc, #108]	; (80004d0 <MX_GPIO_Init+0xb8>)
 8000462:	f000 ffc3 	bl	80013ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000466:	2301      	movs	r3, #1
 8000468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_GPIO_Init+0xbc>)
 800046c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800046e:	2301      	movs	r3, #1
 8000470:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4619      	mov	r1, r3
 8000478:	4815      	ldr	r0, [pc, #84]	; (80004d0 <MX_GPIO_Init+0xb8>)
 800047a:	f000 fe3d 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SLEEP_Pin PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = LED_SLEEP_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800047e:	23fa      	movs	r3, #250	; 0xfa
 8000480:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	4619      	mov	r1, r3
 8000494:	480e      	ldr	r0, [pc, #56]	; (80004d0 <MX_GPIO_Init+0xb8>)
 8000496:	f000 fe2f 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B0_Pin */
  GPIO_InitStruct.Pin = B0_Pin;
 800049a:	2301      	movs	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(B0_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <MX_GPIO_Init+0xc0>)
 80004ae:	f000 fe23 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2006      	movs	r0, #6
 80004b8:	f000 fde7 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004bc:	2006      	movs	r0, #6
 80004be:	f000 fe00 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 80004c2:	bf00      	nop
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	10210000 	.word	0x10210000
 80004d8:	40010c00 	.word	0x40010c00

080004dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ec:	d106      	bne.n	80004fc <HAL_TIM_PeriodElapsedCallback+0x20>
		timestamp++; // increase timestamp by 10ms
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004f6:	6013      	str	r3, [r2, #0]
		SCH_Update();
 80004f8:	f000 f8be 	bl	8000678 <SCH_Update>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000008c 	.word	0x2000008c

08000508 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]

}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <SCH_Add_Task>:
	//current_index_task = -1;
	//Timer_init();
	//Watchdog_init();
}

unsigned char SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD) {
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	// If user init SCH before, then assign current_index_task to zero (first index)
	unsigned char Return_code;

	if(current_index_task < SCH_MAX_TASKS){
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SCH_Add_Task+0xac>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b27      	cmp	r3, #39	; 0x27
 800053a:	dc3f      	bgt.n	80005bc <SCH_Add_Task+0x94>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SCH_Add_Task+0xac>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4925      	ldr	r1, [pc, #148]	; (80005d8 <SCH_Add_Task+0xb0>)
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	440b      	add	r3, r1
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SCH_Add_Task+0xac>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4920      	ldr	r1, [pc, #128]	; (80005d8 <SCH_Add_Task+0xb0>)
 8000556:	4613      	mov	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4413      	add	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	440b      	add	r3, r1
 8000560:	3304      	adds	r3, #4
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <SCH_Add_Task+0xac>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	491b      	ldr	r1, [pc, #108]	; (80005d8 <SCH_Add_Task+0xb0>)
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	3308      	adds	r3, #8
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <SCH_Add_Task+0xac>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4915      	ldr	r1, [pc, #84]	; (80005d8 <SCH_Add_Task+0xb0>)
 8000582:	4613      	mov	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	440b      	add	r3, r1
 800058c:	330c      	adds	r3, #12
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <SCH_Add_Task+0xac>)
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <SCH_Add_Task+0xac>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4608      	mov	r0, r1
 800059c:	490e      	ldr	r1, [pc, #56]	; (80005d8 <SCH_Add_Task+0xb0>)
 800059e:	4613      	mov	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	3310      	adds	r3, #16
 80005aa:	6018      	str	r0, [r3, #0]

		current_index_task++;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <SCH_Add_Task+0xac>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <SCH_Add_Task+0xac>)
 80005b4:	6013      	str	r3, [r2, #0]

		Return_code = RETURN_NORMAL;
 80005b6:	2303      	movs	r3, #3
 80005b8:	75fb      	strb	r3, [r7, #23]
 80005ba:	e004      	b.n	80005c6 <SCH_Add_Task+0x9e>

	} else {
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <SCH_Add_Task+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 80005c2:	2302      	movs	r3, #2
 80005c4:	75fb      	strb	r3, [r7, #23]
	}

	return Return_code;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	371c      	adds	r7, #28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000098 	.word	0x20000098
 80005d8:	2000018c 	.word	0x2000018c
 80005dc:	2000009c 	.word	0x2000009c

080005e0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	int i = min_index;
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SCH_Dispatch_Tasks+0x90>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	607b      	str	r3, [r7, #4]
	// check flag of min_index
	if (SCH_tasks_G[i].RunMe > 0) {
 80005ec:	4921      	ldr	r1, [pc, #132]	; (8000674 <SCH_Dispatch_Tasks+0x94>)
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	330c      	adds	r3, #12
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d02f      	beq.n	8000662 <SCH_Dispatch_Tasks+0x82>
		update_other_tasks();
 8000602:	f000 f957 	bl	80008b4 <update_other_tasks>
		(*SCH_tasks_G[i].pTask)();
 8000606:	491b      	ldr	r1, [pc, #108]	; (8000674 <SCH_Dispatch_Tasks+0x94>)
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4798      	blx	r3
		SCH_tasks_G[i].RunMe--;
 8000618:	4916      	ldr	r1, [pc, #88]	; (8000674 <SCH_Dispatch_Tasks+0x94>)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	330c      	adds	r3, #12
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3b01      	subs	r3, #1
 800062c:	b2d8      	uxtb	r0, r3
 800062e:	4911      	ldr	r1, [pc, #68]	; (8000674 <SCH_Dispatch_Tasks+0x94>)
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	330c      	adds	r3, #12
 800063e:	4602      	mov	r2, r0
 8000640:	701a      	strb	r2, [r3, #0]
		// If it's one-shot task, remove it form the array
		if (SCH_tasks_G[i].Period == 0) {
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <SCH_Dispatch_Tasks+0x94>)
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	3308      	adds	r3, #8
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d104      	bne.n	8000662 <SCH_Dispatch_Tasks+0x82>
			SCH_Delete_Task(i);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	b29b      	uxth	r3, r3
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f8c7 	bl	80007f0 <SCH_Delete_Task>
		}
	}
	// Report system status
	SCH_Report_Status();
 8000662:	f000 f9a9 	bl	80009b8 <SCH_Report_Status>
	// The scheduler enters idle mode at this point
	//SCH_Go_To_Sleep();
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000090 	.word	0x20000090
 8000674:	2000018c 	.word	0x2000018c

08000678 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SCH_Update+0xa4>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4927      	ldr	r1, [pc, #156]	; (8000720 <SCH_Update+0xa8>)
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	440b      	add	r3, r1
 800068c:	3304      	adds	r3, #4
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d013      	beq.n	80006bc <SCH_Update+0x44>
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <SCH_Update+0xa4>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4921      	ldr	r1, [pc, #132]	; (8000720 <SCH_Update+0xa8>)
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	3304      	adds	r3, #4
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1e59      	subs	r1, r3, #1
 80006aa:	481d      	ldr	r0, [pc, #116]	; (8000720 <SCH_Update+0xa8>)
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4403      	add	r3, r0
 80006b6:	3304      	adds	r3, #4
 80006b8:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 80006ba:	e02a      	b.n	8000712 <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <SCH_Update+0xa4>)
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <SCH_Update+0xa4>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4816      	ldr	r0, [pc, #88]	; (8000720 <SCH_Update+0xa8>)
 80006c6:	460b      	mov	r3, r1
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4403      	add	r3, r0
 80006d0:	3308      	adds	r3, #8
 80006d2:	6819      	ldr	r1, [r3, #0]
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <SCH_Update+0xa8>)
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4403      	add	r3, r0
 80006e0:	3304      	adds	r3, #4
 80006e2:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <SCH_Update+0xa4>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	490d      	ldr	r1, [pc, #52]	; (8000720 <SCH_Update+0xa8>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	330c      	adds	r3, #12
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4a08      	ldr	r2, [pc, #32]	; (800071c <SCH_Update+0xa4>)
 80006fa:	6812      	ldr	r2, [r2, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2d8      	uxtb	r0, r3
 8000700:	4907      	ldr	r1, [pc, #28]	; (8000720 <SCH_Update+0xa8>)
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	440b      	add	r3, r1
 800070c:	330c      	adds	r3, #12
 800070e:	4602      	mov	r2, r0
 8000710:	701a      	strb	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000090 	.word	0x20000090
 8000720:	2000018c 	.word	0x2000018c

08000724 <Shift_Task_To_Left>:

void Shift_Task_To_Left(int index_a, int index_b) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	SCH_tasks_G[index_a].pTask = SCH_tasks_G[index_b].pTask;
 800072e:	492f      	ldr	r1, [pc, #188]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	6819      	ldr	r1, [r3, #0]
 800073e:	482b      	ldr	r0, [pc, #172]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4403      	add	r3, r0
 800074c:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Delay = SCH_tasks_G[index_b].Delay;
 800074e:	4927      	ldr	r1, [pc, #156]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	3304      	adds	r3, #4
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4403      	add	r3, r0
 800076e:	3304      	adds	r3, #4
 8000770:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Period =  SCH_tasks_G[index_b].Period;
 8000772:	491e      	ldr	r1, [pc, #120]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	3308      	adds	r3, #8
 8000782:	6819      	ldr	r1, [r3, #0]
 8000784:	4819      	ldr	r0, [pc, #100]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4403      	add	r3, r0
 8000792:	3308      	adds	r3, #8
 8000794:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].RunMe = SCH_tasks_G[index_b].RunMe;
 8000796:	4915      	ldr	r1, [pc, #84]	; (80007ec <Shift_Task_To_Left+0xc8>)
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	440b      	add	r3, r1
 80007a4:	330c      	adds	r3, #12
 80007a6:	7818      	ldrb	r0, [r3, #0]
 80007a8:	4910      	ldr	r1, [pc, #64]	; (80007ec <Shift_Task_To_Left+0xc8>)
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	330c      	adds	r3, #12
 80007b8:	4602      	mov	r2, r0
 80007ba:	701a      	strb	r2, [r3, #0]

	SCH_tasks_G[index_a].TaskID = SCH_tasks_G[index_b].TaskID;
 80007bc:	490b      	ldr	r1, [pc, #44]	; (80007ec <Shift_Task_To_Left+0xc8>)
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	3310      	adds	r3, #16
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <Shift_Task_To_Left+0xc8>)
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4403      	add	r3, r0
 80007dc:	3310      	adds	r3, #16
 80007de:	6019      	str	r1, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2000018c 	.word	0x2000018c

080007f0 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(uint16_t TASK_INDEX) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
	unsigned char Return_code;
	if (current_index_task < 0 || current_index_task >= SCH_MAX_TASKS) {
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <SCH_Delete_Task+0xb8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db03      	blt.n	800080a <SCH_Delete_Task+0x1a>
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SCH_Delete_Task+0xb8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b27      	cmp	r3, #39	; 0x27
 8000808:	dd06      	ble.n	8000818 <SCH_Delete_Task+0x28>
		// No task at this location...
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SCH_Delete_Task+0xbc>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8000810:	2302      	movs	r3, #2
 8000812:	72fb      	strb	r3, [r7, #11]
		return Return_code;
 8000814:	7afb      	ldrb	r3, [r7, #11]
 8000816:	e043      	b.n	80008a0 <SCH_Delete_Task+0xb0>
	} else {
		Return_code = RETURN_NORMAL;
 8000818:	2303      	movs	r3, #3
 800081a:	72fb      	strb	r3, [r7, #11]
	}
	// Shift task from TASK_INDEX + 1 to the left
	for (int i = TASK_INDEX; i < current_index_task; i++) {
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e008      	b.n	8000834 <SCH_Delete_Task+0x44>
		Shift_Task_To_Left(i, i + 1);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	4619      	mov	r1, r3
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff ff7b 	bl	8000724 <Shift_Task_To_Left>
	for (int i = TASK_INDEX; i < current_index_task; i++) {
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3301      	adds	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <SCH_Delete_Task+0xb8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	429a      	cmp	r2, r3
 800083c:	dbf1      	blt.n	8000822 <SCH_Delete_Task+0x32>
	}
	// Remove last index task
	SCH_tasks_G[current_index_task].pTask = 0x0000 ;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <SCH_Delete_Task+0xb8>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	491b      	ldr	r1, [pc, #108]	; (80008b0 <SCH_Delete_Task+0xc0>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = 0;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <SCH_Delete_Task+0xb8>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4916      	ldr	r1, [pc, #88]	; (80008b0 <SCH_Delete_Task+0xc0>)
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	440b      	add	r3, r1
 8000862:	3304      	adds	r3, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = 0;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <SCH_Delete_Task+0xb8>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4910      	ldr	r1, [pc, #64]	; (80008b0 <SCH_Delete_Task+0xc0>)
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3308      	adds	r3, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SCH_Delete_Task+0xb8>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	490b      	ldr	r1, [pc, #44]	; (80008b0 <SCH_Delete_Task+0xc0>)
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	330c      	adds	r3, #12
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SCH_Delete_Task+0xb8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <SCH_Delete_Task+0xb8>)
 800089c:	6013      	str	r3, [r2, #0]

	return Return_code;
 800089e:	7afb      	ldrb	r3, [r7, #11]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000098 	.word	0x20000098
 80008ac:	2000009c 	.word	0x2000009c
 80008b0:	2000018c 	.word	0x2000018c

080008b4 <update_other_tasks>:

void update_other_tasks() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	e01e      	b.n	80008fe <update_other_tasks+0x4a>
		if (i == min_index) {
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <update_other_tasks+0x60>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d015      	beq.n	80008f6 <update_other_tasks+0x42>
			continue;
		}

		SCH_tasks_G[i].Delay -= min_delay;
 80008ca:	4913      	ldr	r1, [pc, #76]	; (8000918 <update_other_tasks+0x64>)
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	440b      	add	r3, r1
 80008d8:	3304      	adds	r3, #4
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <update_other_tasks+0x68>)
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	1a99      	subs	r1, r3, r2
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <update_other_tasks+0x64>)
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4403      	add	r3, r0
 80008f0:	3304      	adds	r3, #4
 80008f2:	6019      	str	r1, [r3, #0]
 80008f4:	e000      	b.n	80008f8 <update_other_tasks+0x44>
			continue;
 80008f6:	bf00      	nop
	for (int i = 0; i < current_index_task; i++) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <update_other_tasks+0x6c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbdb      	blt.n	80008c0 <update_other_tasks+0xc>
	}

	find_new_min_task();
 8000908:	f000 f80c 	bl	8000924 <find_new_min_task>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000090 	.word	0x20000090
 8000918:	2000018c 	.word	0x2000018c
 800091c:	20000094 	.word	0x20000094
 8000920:	20000098 	.word	0x20000098

08000924 <find_new_min_task>:

void find_new_min_task() {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
	// find new min index of schedule array
	min_index = 0;
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <find_new_min_task+0x84>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
	min_delay = SCH_tasks_G[min_index].Delay;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <find_new_min_task+0x84>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	491d      	ldr	r1, [pc, #116]	; (80009ac <find_new_min_task+0x88>)
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	3304      	adds	r3, #4
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <find_new_min_task+0x8c>)
 8000948:	601a      	str	r2, [r3, #0]

	for (int i = min_index + 1; i < current_index_task; i++) {
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <find_new_min_task+0x84>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	e01e      	b.n	8000992 <find_new_min_task+0x6e>
		if (SCH_tasks_G[i].Delay < min_delay) {
 8000954:	4915      	ldr	r1, [pc, #84]	; (80009ac <find_new_min_task+0x88>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	440b      	add	r3, r1
 8000962:	3304      	adds	r3, #4
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <find_new_min_task+0x8c>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	4293      	cmp	r3, r2
 800096c:	d20e      	bcs.n	800098c <find_new_min_task+0x68>
			min_index = i;
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <find_new_min_task+0x84>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6013      	str	r3, [r2, #0]
			min_delay = SCH_tasks_G[i].Delay;
 8000974:	490d      	ldr	r1, [pc, #52]	; (80009ac <find_new_min_task+0x88>)
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	3304      	adds	r3, #4
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <find_new_min_task+0x8c>)
 800098a:	601a      	str	r2, [r3, #0]
	for (int i = min_index + 1; i < current_index_task; i++) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3301      	adds	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <find_new_min_task+0x90>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbdb      	blt.n	8000954 <find_new_min_task+0x30>
		}
	}
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	20000090 	.word	0x20000090
 80009ac:	2000018c 	.word	0x2000018c
 80009b0:	20000094 	.word	0x20000094
 80009b4:	20000098 	.word	0x20000098

080009b8 <SCH_Report_Status>:
void SCH_Report_Status(void) {
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
				Error_code_G = 0; // Reset error code
			}
		}
	}
#endif
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_MspInit+0x5c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_MspInit+0x5c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x60>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_MspInit+0x60>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a38:	d114      	bne.n	8000a64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	201c      	movs	r0, #28
 8000a58:	f000 fb17 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f000 fb30 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a62:	e018      	b.n	8000a96 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d113      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	201d      	movs	r0, #29
 8000a8c:	f000 fafd 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a90:	201d      	movs	r0, #29
 8000a92:	f000 fb16 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40000400 	.word	0x40000400

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d131      	bne.n	8000b2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <HAL_UART_MspInit+0x94>)
 8000b0e:	f000 faf3 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0x94>)
 8000b28:	f000 fae6 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 f98d 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fc5c 	bl	8001450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM2_IRQHandler+0x10>)
 8000ba2:	f001 f965 	bl	8001e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000144 	.word	0x20000144

08000bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM3_IRQHandler+0x10>)
 8000bb6:	f001 f95b 	bl	8001e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000b8 	.word	0x200000b8

08000bc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00a      	b.n	8000bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bd6:	f3af 8000 	nop.w
 8000bda:	4601      	mov	r1, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf0      	blt.n	8000bd6 <_read+0x12>
	}

return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c24:	605a      	str	r2, [r3, #4]
	return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
	return 0;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
	...

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f001 fdee 	bl	8002870 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20002800 	.word	0x20002800
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200000a0 	.word	0x200000a0
 8000cc8:	200004c0 	.word	0x200004c0

08000ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <task0>:
#include "task.h"
#include "uart_msg.h"
#include "global.h"
#include <stdio.h>

void task0() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	printf("Task0 start at: %d ms\r\n", timestamp);
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <task0+0x1c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <task0+0x20>)
 8000ce4:	f001 fdf6 	bl	80028d4 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000ce8:	2108      	movs	r1, #8
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <task0+0x24>)
 8000cec:	f000 fb96 	bl	800141c <HAL_GPIO_TogglePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000008c 	.word	0x2000008c
 8000cf8:	080037ac 	.word	0x080037ac
 8000cfc:	40010800 	.word	0x40010800

08000d00 <task1>:

void task1() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	printf("Task1 start at: %d ms\r\n", timestamp);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <task1+0x1c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <task1+0x20>)
 8000d0c:	f001 fde2 	bl	80028d4 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000d10:	2110      	movs	r1, #16
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <task1+0x24>)
 8000d14:	f000 fb82 	bl	800141c <HAL_GPIO_TogglePin>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000008c 	.word	0x2000008c
 8000d20:	080037c4 	.word	0x080037c4
 8000d24:	40010800 	.word	0x40010800

08000d28 <task2>:

void task2() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	printf("Task2 start at: %d ms\r\n", timestamp);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <task2+0x1c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <task2+0x20>)
 8000d34:	f001 fdce 	bl	80028d4 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <task2+0x24>)
 8000d3c:	f000 fb6e 	bl	800141c <HAL_GPIO_TogglePin>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	080037dc 	.word	0x080037dc
 8000d4c:	40010800 	.word	0x40010800

08000d50 <task3>:

void task3() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	printf("Task3 start at: %d ms\r\n", timestamp);
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <task3+0x1c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <task3+0x20>)
 8000d5c:	f001 fdba 	bl	80028d4 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <task3+0x24>)
 8000d64:	f000 fb5a 	bl	800141c <HAL_GPIO_TogglePin>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000008c 	.word	0x2000008c
 8000d70:	080037f4 	.word	0x080037f4
 8000d74:	40010800 	.word	0x40010800

08000d78 <task4>:

void task4() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	printf("Task4 start at: %d ms\r\n", timestamp);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <task4+0x1c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <task4+0x20>)
 8000d84:	f001 fda6 	bl	80028d4 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	4804      	ldr	r0, [pc, #16]	; (8000d9c <task4+0x24>)
 8000d8c:	f000 fb46 	bl	800141c <HAL_GPIO_TogglePin>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000008c 	.word	0x2000008c
 8000d98:	0800380c 	.word	0x0800380c
 8000d9c:	40010800 	.word	0x40010800

08000da0 <_write>:
#include "uart_msg.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <_write+0x28>)
 8000db8:	f001 fbef 	bl	800259a <HAL_UART_Transmit>
	return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000100 	.word	0x20000100

08000dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df2:	f7ff ff6b 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f001 fd41 	bl	800287c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff f9a7 	bl	800014c <main>
  bx lr
 8000dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e08:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 8000e0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e10:	200004c0 	.word	0x200004c0

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f923 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fdc6 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f93b 	bl	80010de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f903 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	200004ac 	.word	0x200004ac

08000ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	200004ac 	.word	0x200004ac

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <__NVIC_EnableIRQ+0x34>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff90 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2d 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff42 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff35 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e148      	b.n	800139e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8137 	bne.w	8001398 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4aa3      	ldr	r2, [pc, #652]	; (80013bc <HAL_GPIO_Init+0x2c4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d05e      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001134:	4aa1      	ldr	r2, [pc, #644]	; (80013bc <HAL_GPIO_Init+0x2c4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d875      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800113a:	4aa1      	ldr	r2, [pc, #644]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d058      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001140:	4a9f      	ldr	r2, [pc, #636]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d86f      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001146:	4a9f      	ldr	r2, [pc, #636]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d052      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 800114c:	4a9d      	ldr	r2, [pc, #628]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d869      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001152:	4a9d      	ldr	r2, [pc, #628]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04c      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001158:	4a9b      	ldr	r2, [pc, #620]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d863      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800115e:	4a9b      	ldr	r2, [pc, #620]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d046      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001164:	4a99      	ldr	r2, [pc, #612]	; (80013cc <HAL_GPIO_Init+0x2d4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d85d      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d82a      	bhi.n	80011c4 <HAL_GPIO_Init+0xcc>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d859      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <HAL_GPIO_Init+0x80>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011df 	.word	0x080011df
 8001184:	08001221 	.word	0x08001221
 8001188:	08001227 	.word	0x08001227
 800118c:	08001227 	.word	0x08001227
 8001190:	08001227 	.word	0x08001227
 8001194:	08001227 	.word	0x08001227
 8001198:	08001227 	.word	0x08001227
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001227 	.word	0x08001227
 80011a4:	08001227 	.word	0x08001227
 80011a8:	08001227 	.word	0x08001227
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001227 	.word	0x08001227
 80011b4:	08001227 	.word	0x08001227
 80011b8:	08001227 	.word	0x08001227
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	4a82      	ldr	r2, [pc, #520]	; (80013d0 <HAL_GPIO_Init+0x2d8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e029      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e024      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01f      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e01a      	b.n	8001228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e013      	b.n	8001228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e009      	b.n	8001228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e003      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x130>
          break;
 8001226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d801      	bhi.n	8001232 <HAL_GPIO_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_Init+0x13e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d802      	bhi.n	8001244 <HAL_GPIO_Init+0x14c>
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x152>
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3b08      	subs	r3, #8
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	210f      	movs	r1, #15
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8090 	beq.w	8001398 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001278:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a55      	ldr	r2, [pc, #340]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_GPIO_Init+0x2dc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001290:	4a51      	ldr	r2, [pc, #324]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a49      	ldr	r2, [pc, #292]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d00d      	beq.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a48      	ldr	r2, [pc, #288]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0x1dc>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a47      	ldr	r2, [pc, #284]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d101      	bne.n	80012d0 <HAL_GPIO_Init+0x1d8>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012d0:	2303      	movs	r3, #3
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x1e2>
 80012d8:	2300      	movs	r3, #0
 80012da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ea:	493b      	ldr	r1, [pc, #236]	; (80013d8 <HAL_GPIO_Init+0x2e0>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4937      	ldr	r1, [pc, #220]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	4933      	ldr	r1, [pc, #204]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800131c:	4013      	ands	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	492d      	ldr	r1, [pc, #180]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	4929      	ldr	r1, [pc, #164]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001344:	4013      	ands	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	4923      	ldr	r1, [pc, #140]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	491f      	ldr	r1, [pc, #124]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800136c:	4013      	ands	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4919      	ldr	r1, [pc, #100]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	4915      	ldr	r1, [pc, #84]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 8001394:	4013      	ands	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3301      	adds	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f47f aeaf 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	372c      	adds	r7, #44	; 0x2c
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	10320000 	.word	0x10320000
 80013c0:	10310000 	.word	0x10310000
 80013c4:	10220000 	.word	0x10220000
 80013c8:	10210000 	.word	0x10210000
 80013cc:	10120000 	.word	0x10120000
 80013d0:	10110000 	.word	0x10110000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43d9      	mvns	r1, r3
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	400b      	ands	r3, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
	...

08001450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f84a 	bl	8000508 <HAL_GPIO_EXTI_Callback>
  }
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e034      	b.n	80014fc <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800149a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f245 5255 	movw	r2, #21845	; 0x5555
 80014a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6852      	ldr	r2, [r2, #4]
 80014ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6892      	ldr	r2, [r2, #8]
 80014b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80014ba:	f7ff fd05 	bl	8000ec8 <HAL_GetTick>
 80014be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014c0:	e00f      	b.n	80014e2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80014c2:	f7ff fd01 	bl	8000ec8 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b27      	cmp	r3, #39	; 0x27
 80014ce:	d908      	bls.n	80014e2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e00c      	b.n	80014fc <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e8      	bne.n	80014c2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e26c      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	4b92      	ldr	r3, [pc, #584]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001530:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
 800153c:	4b8c      	ldr	r3, [pc, #560]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e246      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x76>
 800156c:	4b80      	ldr	r3, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7a      	ldr	r2, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xbc>
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a71      	ldr	r2, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6e      	ldr	r2, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 80015c0:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a67      	ldr	r2, [pc, #412]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc72 	bl	8000ec8 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fc6e 	bl	8000ec8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1fa      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe4>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc5e 	bl	8000ec8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc5a 	bl	8000ec8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1e6      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x10c>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164a:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1ba      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4939      	ldr	r1, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fc13 	bl	8000ec8 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc0f 	bl	8000ec8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e19b      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4927      	ldr	r1, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fbf2 	bl	8000ec8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fbee 	bl	8000ec8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e17a      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fbd2 	bl	8000ec8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fbce 	bl	8000ec8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e15a      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fad8 	bl	8001cfc <RCC_Delay>
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fbb8 	bl	8000ec8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fbb4 	bl	8000ec8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d908      	bls.n	800177c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e140      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420000 	.word	0x42420000
 8001778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b9e      	ldr	r3, [pc, #632]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e9      	bne.n	800175c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a6 	beq.w	80018e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b97      	ldr	r3, [pc, #604]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b94      	ldr	r3, [pc, #592]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a93      	ldr	r2, [pc, #588]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a8a      	ldr	r2, [pc, #552]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff fb75 	bl	8000ec8 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fb71 	bl	8000ec8 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0fd      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x312>
 8001808:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a7a      	ldr	r2, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e02d      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x334>
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a72      	ldr	r2, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	e01c      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x356>
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb25 	bl	8000ec8 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fb21 	bl	8000ec8 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0ab      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCC_OscConfig+0x37e>
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb0f 	bl	8000ec8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fb0b 	bl	8000ec8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e095      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8081 	beq.w	80019ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d061      	beq.n	80019bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d146      	bne.n	800198e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_OscConfig+0x4fc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fadf 	bl	8000ec8 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fadb 	bl	8000ec8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e067      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d108      	bne.n	8001948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	492d      	ldr	r1, [pc, #180]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a19      	ldr	r1, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	430b      	orrs	r3, r1
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x4fc>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff faaf 	bl	8000ec8 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff faab 	bl	8000ec8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e037      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x46a>
 800198c:	e02f      	b.n	80019ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_RCC_OscConfig+0x4fc>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fa98 	bl	8000ec8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fa94 	bl	8000ec8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e020      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x498>
 80019ba:	e018      	b.n	80019ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
 8001a00:	42420060 	.word	0x42420060

08001a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0d0      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4965      	ldr	r1, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d040      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e073      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06b      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4936      	ldr	r1, [pc, #216]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f7ff f9e8 	bl	8000ec8 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f9e4 	bl	8000ec8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e053      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d210      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4922      	ldr	r1, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f946 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08003834 	.word	0x08003834
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b490      	push	{r4, r7}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be0:	1d3c      	adds	r4, r7, #4
 8001be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be8:	f240 2301 	movw	r3, #513	; 0x201
 8001bec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x46>
 8001c16:	e02d      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	623b      	str	r3, [r7, #32]
      break;
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c5b      	lsrs	r3, r3, #17
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
 8001c62:	e004      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	623b      	str	r3, [r7, #32]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c76:	623b      	str	r3, [r7, #32]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc90      	pop	{r4, r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	08003824 	.word	0x08003824
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	003d0900 	.word	0x003d0900

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff2 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08003844 	.word	0x08003844

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08003844 	.word	0x08003844

08001cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <RCC_Delay+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <RCC_Delay+0x38>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d18:	bf00      	nop
  }
  while (Delay --);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <RCC_Delay+0x1c>
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000000 	.word	0x20000000
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fe62 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 fa6a 	bl	8002250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d001      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e035      	b.n	8001e5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <HAL_TIM_Base_Start_IT+0x90>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_TIM_Base_Start_IT+0x4e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1a:	d004      	beq.n	8001e26 <HAL_TIM_Base_Start_IT+0x4e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <HAL_TIM_Base_Start_IT+0x94>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d111      	bne.n	8001e4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b06      	cmp	r3, #6
 8001e36:	d010      	beq.n	8001e5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e48:	e007      	b.n	8001e5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40000400 	.word	0x40000400

08001e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0202 	mvn.w	r2, #2
 8001e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f9b1 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f9a4 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f9b3 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0204 	mvn.w	r2, #4
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f987 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f97a 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f989 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0208 	mvn.w	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f95d 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f950 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f95f 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0210 	mvn.w	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f933 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f926 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f935 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0201 	mvn.w	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fa74 	bl	80004dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b80      	cmp	r3, #128	; 0x80
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d107      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fa67 	bl	80024ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d10e      	bne.n	800204c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d107      	bne.n	800204c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8f9 	bl	800223e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b20      	cmp	r3, #32
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b20      	cmp	r3, #32
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0220 	mvn.w	r2, #32
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fa32 	bl	80024dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_TIM_ConfigClockSource+0x18>
 8002094:	2302      	movs	r3, #2
 8002096:	e0b3      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x180>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d0:	d03e      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0xd0>
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	f200 8087 	bhi.w	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 80020da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020de:	f000 8085 	beq.w	80021ec <HAL_TIM_ConfigClockSource+0x16c>
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e6:	d87f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 80020e8:	2b70      	cmp	r3, #112	; 0x70
 80020ea:	d01a      	beq.n	8002122 <HAL_TIM_ConfigClockSource+0xa2>
 80020ec:	2b70      	cmp	r3, #112	; 0x70
 80020ee:	d87b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 80020f0:	2b60      	cmp	r3, #96	; 0x60
 80020f2:	d050      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0x116>
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d877      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 80020f8:	2b50      	cmp	r3, #80	; 0x50
 80020fa:	d03c      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xf6>
 80020fc:	2b50      	cmp	r3, #80	; 0x50
 80020fe:	d873      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d058      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0x136>
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d86f      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 8002108:	2b30      	cmp	r3, #48	; 0x30
 800210a:	d064      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x156>
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	d86b      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d060      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x156>
 8002114:	2b20      	cmp	r3, #32
 8002116:	d867      	bhi.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05c      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x156>
 800211c:	2b10      	cmp	r3, #16
 800211e:	d05a      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002120:	e062      	b.n	80021e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f000 f95c 	bl	80023ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002144:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]
      break;
 800214e:	e04e      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f000 f945 	bl	80023ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e03b      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	461a      	mov	r2, r3
 8002184:	f000 f8bc 	bl	8002300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2150      	movs	r1, #80	; 0x50
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f913 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 8002194:	e02b      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f000 f8da 	bl	800235c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2160      	movs	r1, #96	; 0x60
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f903 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 80021b4:	e01b      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f000 f89c 	bl	8002300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f8f3 	bl	80023ba <TIM_ITRx_SetConfig>
      break;
 80021d4:	e00b      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f000 f8ea 	bl	80023ba <TIM_ITRx_SetConfig>
        break;
 80021e6:	e002      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021e8:	bf00      	nop
 80021ea:	e000      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <TIM_Base_SetConfig+0xa8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <TIM_Base_SetConfig+0x28>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0x28>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <TIM_Base_SetConfig+0xac>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d108      	bne.n	800228a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <TIM_Base_SetConfig+0xa8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <TIM_Base_SetConfig+0x52>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d003      	beq.n	80022a2 <TIM_Base_SetConfig+0x52>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <TIM_Base_SetConfig+0xac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <TIM_Base_SetConfig+0xa8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d103      	bne.n	80022e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	615a      	str	r2, [r3, #20]
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40000400 	.word	0x40000400

08002300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	f023 0201 	bic.w	r2, r3, #1
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f023 030a 	bic.w	r3, r3, #10
 800233c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	621a      	str	r2, [r3, #32]
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f023 0210 	bic.w	r2, r3, #16
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002386:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	031b      	lsls	r3, r3, #12
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002398:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	621a      	str	r2, [r3, #32]
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f043 0307 	orr.w	r3, r3, #7
 80023dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b087      	sub	sp, #28
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002408:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	021a      	lsls	r2, r3, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	431a      	orrs	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	609a      	str	r2, [r3, #8]
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002440:	2302      	movs	r3, #2
 8002442:	e041      	b.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d004      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10c      	bne.n	80024b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40000400 	.word	0x40000400

080024dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e03f      	b.n	8002592 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fabe 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f905 	bl	8002754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d17c      	bne.n	80026b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_UART_Transmit+0x2c>
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e075      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit+0x3e>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e06e      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2221      	movs	r2, #33	; 0x21
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ee:	f7fe fc6b 	bl	8000ec8 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d108      	bne.n	800261c <HAL_UART_Transmit+0x82>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e003      	b.n	8002624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800262c:	e02a      	b.n	8002684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f840 	bl	80026be <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e036      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3302      	adds	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e007      	b.n	8002676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1cf      	bne.n	800262e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f810 	bl	80026be <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e006      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ce:	e02c      	b.n	800272a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d028      	beq.n	800272a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <UART_WaitOnFlagUntilTimeout+0x30>
 80026de:	f7fe fbf3 	bl	8000ec8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d21d      	bcs.n	800272a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e00f      	b.n	800274a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4013      	ands	r3, r2
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	429a      	cmp	r2, r3
 8002746:	d0c3      	beq.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800278e:	f023 030c 	bic.w	r3, r3, #12
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	430b      	orrs	r3, r1
 800279a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2c      	ldr	r2, [pc, #176]	; (8002868 <UART_SetConfig+0x114>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027bc:	f7ff fa8a 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	e002      	b.n	80027ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027c4:	f7ff fa72 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 80027c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	4a22      	ldr	r2, [pc, #136]	; (800286c <UART_SetConfig+0x118>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	0119      	lsls	r1, r3, #4
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	009a      	lsls	r2, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <UART_SetConfig+0x118>)
 8002802:	fba3 0302 	umull	r0, r3, r3, r2
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2064      	movs	r0, #100	; 0x64
 800280a:	fb00 f303 	mul.w	r3, r0, r3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	3332      	adds	r3, #50	; 0x32
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <UART_SetConfig+0x118>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002820:	4419      	add	r1, r3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009a      	lsls	r2, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fbb2 f2f3 	udiv	r2, r2, r3
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <UART_SetConfig+0x118>)
 800283a:	fba3 0302 	umull	r0, r3, r3, r2
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2064      	movs	r0, #100	; 0x64
 8002842:	fb00 f303 	mul.w	r3, r0, r3
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	3332      	adds	r3, #50	; 0x32
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <UART_SetConfig+0x118>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	440a      	add	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013800 	.word	0x40013800
 800286c:	51eb851f 	.word	0x51eb851f

08002870 <__errno>:
 8002870:	4b01      	ldr	r3, [pc, #4]	; (8002878 <__errno+0x8>)
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	2000000c 	.word	0x2000000c

0800287c <__libc_init_array>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	2600      	movs	r6, #0
 8002880:	4d0c      	ldr	r5, [pc, #48]	; (80028b4 <__libc_init_array+0x38>)
 8002882:	4c0d      	ldr	r4, [pc, #52]	; (80028b8 <__libc_init_array+0x3c>)
 8002884:	1b64      	subs	r4, r4, r5
 8002886:	10a4      	asrs	r4, r4, #2
 8002888:	42a6      	cmp	r6, r4
 800288a:	d109      	bne.n	80028a0 <__libc_init_array+0x24>
 800288c:	f000 ff82 	bl	8003794 <_init>
 8002890:	2600      	movs	r6, #0
 8002892:	4d0a      	ldr	r5, [pc, #40]	; (80028bc <__libc_init_array+0x40>)
 8002894:	4c0a      	ldr	r4, [pc, #40]	; (80028c0 <__libc_init_array+0x44>)
 8002896:	1b64      	subs	r4, r4, r5
 8002898:	10a4      	asrs	r4, r4, #2
 800289a:	42a6      	cmp	r6, r4
 800289c:	d105      	bne.n	80028aa <__libc_init_array+0x2e>
 800289e:	bd70      	pop	{r4, r5, r6, pc}
 80028a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a4:	4798      	blx	r3
 80028a6:	3601      	adds	r6, #1
 80028a8:	e7ee      	b.n	8002888 <__libc_init_array+0xc>
 80028aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ae:	4798      	blx	r3
 80028b0:	3601      	adds	r6, #1
 80028b2:	e7f2      	b.n	800289a <__libc_init_array+0x1e>
 80028b4:	080038e4 	.word	0x080038e4
 80028b8:	080038e4 	.word	0x080038e4
 80028bc:	080038e4 	.word	0x080038e4
 80028c0:	080038e8 	.word	0x080038e8

080028c4 <memset>:
 80028c4:	4603      	mov	r3, r0
 80028c6:	4402      	add	r2, r0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	f803 1b01 	strb.w	r1, [r3], #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <iprintf>:
 80028d4:	b40f      	push	{r0, r1, r2, r3}
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <iprintf+0x2c>)
 80028d8:	b513      	push	{r0, r1, r4, lr}
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	b124      	cbz	r4, 80028e8 <iprintf+0x14>
 80028de:	69a3      	ldr	r3, [r4, #24]
 80028e0:	b913      	cbnz	r3, 80028e8 <iprintf+0x14>
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 f866 	bl	80029b4 <__sinit>
 80028e8:	ab05      	add	r3, sp, #20
 80028ea:	4620      	mov	r0, r4
 80028ec:	9a04      	ldr	r2, [sp, #16]
 80028ee:	68a1      	ldr	r1, [r4, #8]
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	f000 f981 	bl	8002bf8 <_vfiprintf_r>
 80028f6:	b002      	add	sp, #8
 80028f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fc:	b004      	add	sp, #16
 80028fe:	4770      	bx	lr
 8002900:	2000000c 	.word	0x2000000c

08002904 <std>:
 8002904:	2300      	movs	r3, #0
 8002906:	b510      	push	{r4, lr}
 8002908:	4604      	mov	r4, r0
 800290a:	e9c0 3300 	strd	r3, r3, [r0]
 800290e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002912:	6083      	str	r3, [r0, #8]
 8002914:	8181      	strh	r1, [r0, #12]
 8002916:	6643      	str	r3, [r0, #100]	; 0x64
 8002918:	81c2      	strh	r2, [r0, #14]
 800291a:	6183      	str	r3, [r0, #24]
 800291c:	4619      	mov	r1, r3
 800291e:	2208      	movs	r2, #8
 8002920:	305c      	adds	r0, #92	; 0x5c
 8002922:	f7ff ffcf 	bl	80028c4 <memset>
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <std+0x38>)
 8002928:	6224      	str	r4, [r4, #32]
 800292a:	6263      	str	r3, [r4, #36]	; 0x24
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <std+0x3c>)
 800292e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <std+0x40>)
 8002932:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <std+0x44>)
 8002936:	6323      	str	r3, [r4, #48]	; 0x30
 8002938:	bd10      	pop	{r4, pc}
 800293a:	bf00      	nop
 800293c:	080031a5 	.word	0x080031a5
 8002940:	080031c7 	.word	0x080031c7
 8002944:	080031ff 	.word	0x080031ff
 8002948:	08003223 	.word	0x08003223

0800294c <_cleanup_r>:
 800294c:	4901      	ldr	r1, [pc, #4]	; (8002954 <_cleanup_r+0x8>)
 800294e:	f000 b8af 	b.w	8002ab0 <_fwalk_reent>
 8002952:	bf00      	nop
 8002954:	080034fd 	.word	0x080034fd

08002958 <__sfmoreglue>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	2568      	movs	r5, #104	; 0x68
 800295c:	1e4a      	subs	r2, r1, #1
 800295e:	4355      	muls	r5, r2
 8002960:	460e      	mov	r6, r1
 8002962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002966:	f000 f8c5 	bl	8002af4 <_malloc_r>
 800296a:	4604      	mov	r4, r0
 800296c:	b140      	cbz	r0, 8002980 <__sfmoreglue+0x28>
 800296e:	2100      	movs	r1, #0
 8002970:	e9c0 1600 	strd	r1, r6, [r0]
 8002974:	300c      	adds	r0, #12
 8002976:	60a0      	str	r0, [r4, #8]
 8002978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800297c:	f7ff ffa2 	bl	80028c4 <memset>
 8002980:	4620      	mov	r0, r4
 8002982:	bd70      	pop	{r4, r5, r6, pc}

08002984 <__sfp_lock_acquire>:
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <__sfp_lock_acquire+0x8>)
 8002986:	f000 b8b3 	b.w	8002af0 <__retarget_lock_acquire_recursive>
 800298a:	bf00      	nop
 800298c:	200004b8 	.word	0x200004b8

08002990 <__sfp_lock_release>:
 8002990:	4801      	ldr	r0, [pc, #4]	; (8002998 <__sfp_lock_release+0x8>)
 8002992:	f000 b8ae 	b.w	8002af2 <__retarget_lock_release_recursive>
 8002996:	bf00      	nop
 8002998:	200004b8 	.word	0x200004b8

0800299c <__sinit_lock_acquire>:
 800299c:	4801      	ldr	r0, [pc, #4]	; (80029a4 <__sinit_lock_acquire+0x8>)
 800299e:	f000 b8a7 	b.w	8002af0 <__retarget_lock_acquire_recursive>
 80029a2:	bf00      	nop
 80029a4:	200004b3 	.word	0x200004b3

080029a8 <__sinit_lock_release>:
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <__sinit_lock_release+0x8>)
 80029aa:	f000 b8a2 	b.w	8002af2 <__retarget_lock_release_recursive>
 80029ae:	bf00      	nop
 80029b0:	200004b3 	.word	0x200004b3

080029b4 <__sinit>:
 80029b4:	b510      	push	{r4, lr}
 80029b6:	4604      	mov	r4, r0
 80029b8:	f7ff fff0 	bl	800299c <__sinit_lock_acquire>
 80029bc:	69a3      	ldr	r3, [r4, #24]
 80029be:	b11b      	cbz	r3, 80029c8 <__sinit+0x14>
 80029c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c4:	f7ff bff0 	b.w	80029a8 <__sinit_lock_release>
 80029c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029cc:	6523      	str	r3, [r4, #80]	; 0x50
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <__sinit+0x68>)
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <__sinit+0x6c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	bf08      	it	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	4620      	mov	r0, r4
 80029de:	bf08      	it	eq
 80029e0:	61a3      	streq	r3, [r4, #24]
 80029e2:	f000 f81f 	bl	8002a24 <__sfp>
 80029e6:	6060      	str	r0, [r4, #4]
 80029e8:	4620      	mov	r0, r4
 80029ea:	f000 f81b 	bl	8002a24 <__sfp>
 80029ee:	60a0      	str	r0, [r4, #8]
 80029f0:	4620      	mov	r0, r4
 80029f2:	f000 f817 	bl	8002a24 <__sfp>
 80029f6:	2200      	movs	r2, #0
 80029f8:	2104      	movs	r1, #4
 80029fa:	60e0      	str	r0, [r4, #12]
 80029fc:	6860      	ldr	r0, [r4, #4]
 80029fe:	f7ff ff81 	bl	8002904 <std>
 8002a02:	2201      	movs	r2, #1
 8002a04:	2109      	movs	r1, #9
 8002a06:	68a0      	ldr	r0, [r4, #8]
 8002a08:	f7ff ff7c 	bl	8002904 <std>
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	2112      	movs	r1, #18
 8002a10:	68e0      	ldr	r0, [r4, #12]
 8002a12:	f7ff ff77 	bl	8002904 <std>
 8002a16:	2301      	movs	r3, #1
 8002a18:	61a3      	str	r3, [r4, #24]
 8002a1a:	e7d1      	b.n	80029c0 <__sinit+0xc>
 8002a1c:	0800384c 	.word	0x0800384c
 8002a20:	0800294d 	.word	0x0800294d

08002a24 <__sfp>:
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	4607      	mov	r7, r0
 8002a28:	f7ff ffac 	bl	8002984 <__sfp_lock_acquire>
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <__sfp+0x84>)
 8002a2e:	681e      	ldr	r6, [r3, #0]
 8002a30:	69b3      	ldr	r3, [r6, #24]
 8002a32:	b913      	cbnz	r3, 8002a3a <__sfp+0x16>
 8002a34:	4630      	mov	r0, r6
 8002a36:	f7ff ffbd 	bl	80029b4 <__sinit>
 8002a3a:	3648      	adds	r6, #72	; 0x48
 8002a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	d503      	bpl.n	8002a4c <__sfp+0x28>
 8002a44:	6833      	ldr	r3, [r6, #0]
 8002a46:	b30b      	cbz	r3, 8002a8c <__sfp+0x68>
 8002a48:	6836      	ldr	r6, [r6, #0]
 8002a4a:	e7f7      	b.n	8002a3c <__sfp+0x18>
 8002a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a50:	b9d5      	cbnz	r5, 8002a88 <__sfp+0x64>
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <__sfp+0x88>)
 8002a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a58:	60e3      	str	r3, [r4, #12]
 8002a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8002a5c:	f000 f847 	bl	8002aee <__retarget_lock_init_recursive>
 8002a60:	f7ff ff96 	bl	8002990 <__sfp_lock_release>
 8002a64:	2208      	movs	r2, #8
 8002a66:	4629      	mov	r1, r5
 8002a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a70:	6025      	str	r5, [r4, #0]
 8002a72:	61a5      	str	r5, [r4, #24]
 8002a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a78:	f7ff ff24 	bl	80028c4 <memset>
 8002a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a84:	4620      	mov	r0, r4
 8002a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a88:	3468      	adds	r4, #104	; 0x68
 8002a8a:	e7d9      	b.n	8002a40 <__sfp+0x1c>
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	4638      	mov	r0, r7
 8002a90:	f7ff ff62 	bl	8002958 <__sfmoreglue>
 8002a94:	4604      	mov	r4, r0
 8002a96:	6030      	str	r0, [r6, #0]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1d5      	bne.n	8002a48 <__sfp+0x24>
 8002a9c:	f7ff ff78 	bl	8002990 <__sfp_lock_release>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	e7ee      	b.n	8002a84 <__sfp+0x60>
 8002aa6:	bf00      	nop
 8002aa8:	0800384c 	.word	0x0800384c
 8002aac:	ffff0001 	.word	0xffff0001

08002ab0 <_fwalk_reent>:
 8002ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	4688      	mov	r8, r1
 8002ab8:	2700      	movs	r7, #0
 8002aba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002abe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ac2:	f1b9 0901 	subs.w	r9, r9, #1
 8002ac6:	d505      	bpl.n	8002ad4 <_fwalk_reent+0x24>
 8002ac8:	6824      	ldr	r4, [r4, #0]
 8002aca:	2c00      	cmp	r4, #0
 8002acc:	d1f7      	bne.n	8002abe <_fwalk_reent+0xe>
 8002ace:	4638      	mov	r0, r7
 8002ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ad4:	89ab      	ldrh	r3, [r5, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d907      	bls.n	8002aea <_fwalk_reent+0x3a>
 8002ada:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d003      	beq.n	8002aea <_fwalk_reent+0x3a>
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	47c0      	blx	r8
 8002ae8:	4307      	orrs	r7, r0
 8002aea:	3568      	adds	r5, #104	; 0x68
 8002aec:	e7e9      	b.n	8002ac2 <_fwalk_reent+0x12>

08002aee <__retarget_lock_init_recursive>:
 8002aee:	4770      	bx	lr

08002af0 <__retarget_lock_acquire_recursive>:
 8002af0:	4770      	bx	lr

08002af2 <__retarget_lock_release_recursive>:
 8002af2:	4770      	bx	lr

08002af4 <_malloc_r>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	1ccd      	adds	r5, r1, #3
 8002af8:	f025 0503 	bic.w	r5, r5, #3
 8002afc:	3508      	adds	r5, #8
 8002afe:	2d0c      	cmp	r5, #12
 8002b00:	bf38      	it	cc
 8002b02:	250c      	movcc	r5, #12
 8002b04:	2d00      	cmp	r5, #0
 8002b06:	4606      	mov	r6, r0
 8002b08:	db01      	blt.n	8002b0e <_malloc_r+0x1a>
 8002b0a:	42a9      	cmp	r1, r5
 8002b0c:	d903      	bls.n	8002b16 <_malloc_r+0x22>
 8002b0e:	230c      	movs	r3, #12
 8002b10:	6033      	str	r3, [r6, #0]
 8002b12:	2000      	movs	r0, #0
 8002b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b16:	f000 fdb1 	bl	800367c <__malloc_lock>
 8002b1a:	4921      	ldr	r1, [pc, #132]	; (8002ba0 <_malloc_r+0xac>)
 8002b1c:	680a      	ldr	r2, [r1, #0]
 8002b1e:	4614      	mov	r4, r2
 8002b20:	b99c      	cbnz	r4, 8002b4a <_malloc_r+0x56>
 8002b22:	4f20      	ldr	r7, [pc, #128]	; (8002ba4 <_malloc_r+0xb0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b923      	cbnz	r3, 8002b32 <_malloc_r+0x3e>
 8002b28:	4621      	mov	r1, r4
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	f000 fb2a 	bl	8003184 <_sbrk_r>
 8002b30:	6038      	str	r0, [r7, #0]
 8002b32:	4629      	mov	r1, r5
 8002b34:	4630      	mov	r0, r6
 8002b36:	f000 fb25 	bl	8003184 <_sbrk_r>
 8002b3a:	1c43      	adds	r3, r0, #1
 8002b3c:	d123      	bne.n	8002b86 <_malloc_r+0x92>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	4630      	mov	r0, r6
 8002b42:	6033      	str	r3, [r6, #0]
 8002b44:	f000 fda0 	bl	8003688 <__malloc_unlock>
 8002b48:	e7e3      	b.n	8002b12 <_malloc_r+0x1e>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	1b5b      	subs	r3, r3, r5
 8002b4e:	d417      	bmi.n	8002b80 <_malloc_r+0x8c>
 8002b50:	2b0b      	cmp	r3, #11
 8002b52:	d903      	bls.n	8002b5c <_malloc_r+0x68>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	441c      	add	r4, r3
 8002b58:	6025      	str	r5, [r4, #0]
 8002b5a:	e004      	b.n	8002b66 <_malloc_r+0x72>
 8002b5c:	6863      	ldr	r3, [r4, #4]
 8002b5e:	42a2      	cmp	r2, r4
 8002b60:	bf0c      	ite	eq
 8002b62:	600b      	streq	r3, [r1, #0]
 8002b64:	6053      	strne	r3, [r2, #4]
 8002b66:	4630      	mov	r0, r6
 8002b68:	f000 fd8e 	bl	8003688 <__malloc_unlock>
 8002b6c:	f104 000b 	add.w	r0, r4, #11
 8002b70:	1d23      	adds	r3, r4, #4
 8002b72:	f020 0007 	bic.w	r0, r0, #7
 8002b76:	1ac2      	subs	r2, r0, r3
 8002b78:	d0cc      	beq.n	8002b14 <_malloc_r+0x20>
 8002b7a:	1a1b      	subs	r3, r3, r0
 8002b7c:	50a3      	str	r3, [r4, r2]
 8002b7e:	e7c9      	b.n	8002b14 <_malloc_r+0x20>
 8002b80:	4622      	mov	r2, r4
 8002b82:	6864      	ldr	r4, [r4, #4]
 8002b84:	e7cc      	b.n	8002b20 <_malloc_r+0x2c>
 8002b86:	1cc4      	adds	r4, r0, #3
 8002b88:	f024 0403 	bic.w	r4, r4, #3
 8002b8c:	42a0      	cmp	r0, r4
 8002b8e:	d0e3      	beq.n	8002b58 <_malloc_r+0x64>
 8002b90:	1a21      	subs	r1, r4, r0
 8002b92:	4630      	mov	r0, r6
 8002b94:	f000 faf6 	bl	8003184 <_sbrk_r>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d1dd      	bne.n	8002b58 <_malloc_r+0x64>
 8002b9c:	e7cf      	b.n	8002b3e <_malloc_r+0x4a>
 8002b9e:	bf00      	nop
 8002ba0:	200000a4 	.word	0x200000a4
 8002ba4:	200000a8 	.word	0x200000a8

08002ba8 <__sfputc_r>:
 8002ba8:	6893      	ldr	r3, [r2, #8]
 8002baa:	b410      	push	{r4}
 8002bac:	3b01      	subs	r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	6093      	str	r3, [r2, #8]
 8002bb2:	da07      	bge.n	8002bc4 <__sfputc_r+0x1c>
 8002bb4:	6994      	ldr	r4, [r2, #24]
 8002bb6:	42a3      	cmp	r3, r4
 8002bb8:	db01      	blt.n	8002bbe <__sfputc_r+0x16>
 8002bba:	290a      	cmp	r1, #10
 8002bbc:	d102      	bne.n	8002bc4 <__sfputc_r+0x1c>
 8002bbe:	bc10      	pop	{r4}
 8002bc0:	f000 bb34 	b.w	800322c <__swbuf_r>
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	1c58      	adds	r0, r3, #1
 8002bc8:	6010      	str	r0, [r2, #0]
 8002bca:	7019      	strb	r1, [r3, #0]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	bc10      	pop	{r4}
 8002bd0:	4770      	bx	lr

08002bd2 <__sfputs_r>:
 8002bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd4:	4606      	mov	r6, r0
 8002bd6:	460f      	mov	r7, r1
 8002bd8:	4614      	mov	r4, r2
 8002bda:	18d5      	adds	r5, r2, r3
 8002bdc:	42ac      	cmp	r4, r5
 8002bde:	d101      	bne.n	8002be4 <__sfputs_r+0x12>
 8002be0:	2000      	movs	r0, #0
 8002be2:	e007      	b.n	8002bf4 <__sfputs_r+0x22>
 8002be4:	463a      	mov	r2, r7
 8002be6:	4630      	mov	r0, r6
 8002be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bec:	f7ff ffdc 	bl	8002ba8 <__sfputc_r>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d1f3      	bne.n	8002bdc <__sfputs_r+0xa>
 8002bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bf8 <_vfiprintf_r>:
 8002bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfc:	460d      	mov	r5, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	4698      	mov	r8, r3
 8002c02:	4606      	mov	r6, r0
 8002c04:	b09d      	sub	sp, #116	; 0x74
 8002c06:	b118      	cbz	r0, 8002c10 <_vfiprintf_r+0x18>
 8002c08:	6983      	ldr	r3, [r0, #24]
 8002c0a:	b90b      	cbnz	r3, 8002c10 <_vfiprintf_r+0x18>
 8002c0c:	f7ff fed2 	bl	80029b4 <__sinit>
 8002c10:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <_vfiprintf_r+0x240>)
 8002c12:	429d      	cmp	r5, r3
 8002c14:	d11b      	bne.n	8002c4e <_vfiprintf_r+0x56>
 8002c16:	6875      	ldr	r5, [r6, #4]
 8002c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c1a:	07d9      	lsls	r1, r3, #31
 8002c1c:	d405      	bmi.n	8002c2a <_vfiprintf_r+0x32>
 8002c1e:	89ab      	ldrh	r3, [r5, #12]
 8002c20:	059a      	lsls	r2, r3, #22
 8002c22:	d402      	bmi.n	8002c2a <_vfiprintf_r+0x32>
 8002c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c26:	f7ff ff63 	bl	8002af0 <__retarget_lock_acquire_recursive>
 8002c2a:	89ab      	ldrh	r3, [r5, #12]
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	d501      	bpl.n	8002c34 <_vfiprintf_r+0x3c>
 8002c30:	692b      	ldr	r3, [r5, #16]
 8002c32:	b9eb      	cbnz	r3, 8002c70 <_vfiprintf_r+0x78>
 8002c34:	4629      	mov	r1, r5
 8002c36:	4630      	mov	r0, r6
 8002c38:	f000 fb5c 	bl	80032f4 <__swsetup_r>
 8002c3c:	b1c0      	cbz	r0, 8002c70 <_vfiprintf_r+0x78>
 8002c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c40:	07dc      	lsls	r4, r3, #31
 8002c42:	d50e      	bpl.n	8002c62 <_vfiprintf_r+0x6a>
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	b01d      	add	sp, #116	; 0x74
 8002c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <_vfiprintf_r+0x244>)
 8002c50:	429d      	cmp	r5, r3
 8002c52:	d101      	bne.n	8002c58 <_vfiprintf_r+0x60>
 8002c54:	68b5      	ldr	r5, [r6, #8]
 8002c56:	e7df      	b.n	8002c18 <_vfiprintf_r+0x20>
 8002c58:	4b79      	ldr	r3, [pc, #484]	; (8002e40 <_vfiprintf_r+0x248>)
 8002c5a:	429d      	cmp	r5, r3
 8002c5c:	bf08      	it	eq
 8002c5e:	68f5      	ldreq	r5, [r6, #12]
 8002c60:	e7da      	b.n	8002c18 <_vfiprintf_r+0x20>
 8002c62:	89ab      	ldrh	r3, [r5, #12]
 8002c64:	0598      	lsls	r0, r3, #22
 8002c66:	d4ed      	bmi.n	8002c44 <_vfiprintf_r+0x4c>
 8002c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c6a:	f7ff ff42 	bl	8002af2 <__retarget_lock_release_recursive>
 8002c6e:	e7e9      	b.n	8002c44 <_vfiprintf_r+0x4c>
 8002c70:	2300      	movs	r3, #0
 8002c72:	9309      	str	r3, [sp, #36]	; 0x24
 8002c74:	2320      	movs	r3, #32
 8002c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c7a:	2330      	movs	r3, #48	; 0x30
 8002c7c:	f04f 0901 	mov.w	r9, #1
 8002c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e44 <_vfiprintf_r+0x24c>
 8002c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	469a      	mov	sl, r3
 8002c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c94:	b10a      	cbz	r2, 8002c9a <_vfiprintf_r+0xa2>
 8002c96:	2a25      	cmp	r2, #37	; 0x25
 8002c98:	d1f9      	bne.n	8002c8e <_vfiprintf_r+0x96>
 8002c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8002c9e:	d00b      	beq.n	8002cb8 <_vfiprintf_r+0xc0>
 8002ca0:	465b      	mov	r3, fp
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f7ff ff93 	bl	8002bd2 <__sfputs_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	f000 80aa 	beq.w	8002e06 <_vfiprintf_r+0x20e>
 8002cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cb4:	445a      	add	r2, fp
 8002cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8002cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a2 	beq.w	8002e06 <_vfiprintf_r+0x20e>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ccc:	f10a 0a01 	add.w	sl, sl, #1
 8002cd0:	9304      	str	r3, [sp, #16]
 8002cd2:	9307      	str	r3, [sp, #28]
 8002cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8002cda:	4654      	mov	r4, sl
 8002cdc:	2205      	movs	r2, #5
 8002cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce2:	4858      	ldr	r0, [pc, #352]	; (8002e44 <_vfiprintf_r+0x24c>)
 8002ce4:	f000 fcbc 	bl	8003660 <memchr>
 8002ce8:	9a04      	ldr	r2, [sp, #16]
 8002cea:	b9d8      	cbnz	r0, 8002d24 <_vfiprintf_r+0x12c>
 8002cec:	06d1      	lsls	r1, r2, #27
 8002cee:	bf44      	itt	mi
 8002cf0:	2320      	movmi	r3, #32
 8002cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cf6:	0713      	lsls	r3, r2, #28
 8002cf8:	bf44      	itt	mi
 8002cfa:	232b      	movmi	r3, #43	; 0x2b
 8002cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d00:	f89a 3000 	ldrb.w	r3, [sl]
 8002d04:	2b2a      	cmp	r3, #42	; 0x2a
 8002d06:	d015      	beq.n	8002d34 <_vfiprintf_r+0x13c>
 8002d08:	4654      	mov	r4, sl
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f04f 0c0a 	mov.w	ip, #10
 8002d10:	9a07      	ldr	r2, [sp, #28]
 8002d12:	4621      	mov	r1, r4
 8002d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d18:	3b30      	subs	r3, #48	; 0x30
 8002d1a:	2b09      	cmp	r3, #9
 8002d1c:	d94e      	bls.n	8002dbc <_vfiprintf_r+0x1c4>
 8002d1e:	b1b0      	cbz	r0, 8002d4e <_vfiprintf_r+0x156>
 8002d20:	9207      	str	r2, [sp, #28]
 8002d22:	e014      	b.n	8002d4e <_vfiprintf_r+0x156>
 8002d24:	eba0 0308 	sub.w	r3, r0, r8
 8002d28:	fa09 f303 	lsl.w	r3, r9, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	46a2      	mov	sl, r4
 8002d30:	9304      	str	r3, [sp, #16]
 8002d32:	e7d2      	b.n	8002cda <_vfiprintf_r+0xe2>
 8002d34:	9b03      	ldr	r3, [sp, #12]
 8002d36:	1d19      	adds	r1, r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	9103      	str	r1, [sp, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bfbb      	ittet	lt
 8002d40:	425b      	neglt	r3, r3
 8002d42:	f042 0202 	orrlt.w	r2, r2, #2
 8002d46:	9307      	strge	r3, [sp, #28]
 8002d48:	9307      	strlt	r3, [sp, #28]
 8002d4a:	bfb8      	it	lt
 8002d4c:	9204      	strlt	r2, [sp, #16]
 8002d4e:	7823      	ldrb	r3, [r4, #0]
 8002d50:	2b2e      	cmp	r3, #46	; 0x2e
 8002d52:	d10c      	bne.n	8002d6e <_vfiprintf_r+0x176>
 8002d54:	7863      	ldrb	r3, [r4, #1]
 8002d56:	2b2a      	cmp	r3, #42	; 0x2a
 8002d58:	d135      	bne.n	8002dc6 <_vfiprintf_r+0x1ce>
 8002d5a:	9b03      	ldr	r3, [sp, #12]
 8002d5c:	3402      	adds	r4, #2
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	9203      	str	r2, [sp, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bfb8      	it	lt
 8002d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d6c:	9305      	str	r3, [sp, #20]
 8002d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e54 <_vfiprintf_r+0x25c>
 8002d72:	2203      	movs	r2, #3
 8002d74:	4650      	mov	r0, sl
 8002d76:	7821      	ldrb	r1, [r4, #0]
 8002d78:	f000 fc72 	bl	8003660 <memchr>
 8002d7c:	b140      	cbz	r0, 8002d90 <_vfiprintf_r+0x198>
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	eba0 000a 	sub.w	r0, r0, sl
 8002d84:	fa03 f000 	lsl.w	r0, r3, r0
 8002d88:	9b04      	ldr	r3, [sp, #16]
 8002d8a:	3401      	adds	r4, #1
 8002d8c:	4303      	orrs	r3, r0
 8002d8e:	9304      	str	r3, [sp, #16]
 8002d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d94:	2206      	movs	r2, #6
 8002d96:	482c      	ldr	r0, [pc, #176]	; (8002e48 <_vfiprintf_r+0x250>)
 8002d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d9c:	f000 fc60 	bl	8003660 <memchr>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d03f      	beq.n	8002e24 <_vfiprintf_r+0x22c>
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <_vfiprintf_r+0x254>)
 8002da6:	bb1b      	cbnz	r3, 8002df0 <_vfiprintf_r+0x1f8>
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	3307      	adds	r3, #7
 8002dac:	f023 0307 	bic.w	r3, r3, #7
 8002db0:	3308      	adds	r3, #8
 8002db2:	9303      	str	r3, [sp, #12]
 8002db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db6:	443b      	add	r3, r7
 8002db8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dba:	e767      	b.n	8002c8c <_vfiprintf_r+0x94>
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dc4:	e7a5      	b.n	8002d12 <_vfiprintf_r+0x11a>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f04f 0c0a 	mov.w	ip, #10
 8002dcc:	4619      	mov	r1, r3
 8002dce:	3401      	adds	r4, #1
 8002dd0:	9305      	str	r3, [sp, #20]
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dd8:	3a30      	subs	r2, #48	; 0x30
 8002dda:	2a09      	cmp	r2, #9
 8002ddc:	d903      	bls.n	8002de6 <_vfiprintf_r+0x1ee>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0c5      	beq.n	8002d6e <_vfiprintf_r+0x176>
 8002de2:	9105      	str	r1, [sp, #20]
 8002de4:	e7c3      	b.n	8002d6e <_vfiprintf_r+0x176>
 8002de6:	4604      	mov	r4, r0
 8002de8:	2301      	movs	r3, #1
 8002dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dee:	e7f0      	b.n	8002dd2 <_vfiprintf_r+0x1da>
 8002df0:	ab03      	add	r3, sp, #12
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	462a      	mov	r2, r5
 8002df6:	4630      	mov	r0, r6
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <_vfiprintf_r+0x258>)
 8002dfa:	a904      	add	r1, sp, #16
 8002dfc:	f3af 8000 	nop.w
 8002e00:	4607      	mov	r7, r0
 8002e02:	1c78      	adds	r0, r7, #1
 8002e04:	d1d6      	bne.n	8002db4 <_vfiprintf_r+0x1bc>
 8002e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e08:	07d9      	lsls	r1, r3, #31
 8002e0a:	d405      	bmi.n	8002e18 <_vfiprintf_r+0x220>
 8002e0c:	89ab      	ldrh	r3, [r5, #12]
 8002e0e:	059a      	lsls	r2, r3, #22
 8002e10:	d402      	bmi.n	8002e18 <_vfiprintf_r+0x220>
 8002e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e14:	f7ff fe6d 	bl	8002af2 <__retarget_lock_release_recursive>
 8002e18:	89ab      	ldrh	r3, [r5, #12]
 8002e1a:	065b      	lsls	r3, r3, #25
 8002e1c:	f53f af12 	bmi.w	8002c44 <_vfiprintf_r+0x4c>
 8002e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e22:	e711      	b.n	8002c48 <_vfiprintf_r+0x50>
 8002e24:	ab03      	add	r3, sp, #12
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	462a      	mov	r2, r5
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <_vfiprintf_r+0x258>)
 8002e2e:	a904      	add	r1, sp, #16
 8002e30:	f000 f882 	bl	8002f38 <_printf_i>
 8002e34:	e7e4      	b.n	8002e00 <_vfiprintf_r+0x208>
 8002e36:	bf00      	nop
 8002e38:	08003870 	.word	0x08003870
 8002e3c:	08003890 	.word	0x08003890
 8002e40:	08003850 	.word	0x08003850
 8002e44:	080038b0 	.word	0x080038b0
 8002e48:	080038ba 	.word	0x080038ba
 8002e4c:	00000000 	.word	0x00000000
 8002e50:	08002bd3 	.word	0x08002bd3
 8002e54:	080038b6 	.word	0x080038b6

08002e58 <_printf_common>:
 8002e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	4699      	mov	r9, r3
 8002e60:	688a      	ldr	r2, [r1, #8]
 8002e62:	690b      	ldr	r3, [r1, #16]
 8002e64:	4607      	mov	r7, r0
 8002e66:	4293      	cmp	r3, r2
 8002e68:	bfb8      	it	lt
 8002e6a:	4613      	movlt	r3, r2
 8002e6c:	6033      	str	r3, [r6, #0]
 8002e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e72:	460c      	mov	r4, r1
 8002e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e78:	b10a      	cbz	r2, 8002e7e <_printf_common+0x26>
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	0699      	lsls	r1, r3, #26
 8002e82:	bf42      	ittt	mi
 8002e84:	6833      	ldrmi	r3, [r6, #0]
 8002e86:	3302      	addmi	r3, #2
 8002e88:	6033      	strmi	r3, [r6, #0]
 8002e8a:	6825      	ldr	r5, [r4, #0]
 8002e8c:	f015 0506 	ands.w	r5, r5, #6
 8002e90:	d106      	bne.n	8002ea0 <_printf_common+0x48>
 8002e92:	f104 0a19 	add.w	sl, r4, #25
 8002e96:	68e3      	ldr	r3, [r4, #12]
 8002e98:	6832      	ldr	r2, [r6, #0]
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	42ab      	cmp	r3, r5
 8002e9e:	dc28      	bgt.n	8002ef2 <_printf_common+0x9a>
 8002ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ea4:	1e13      	subs	r3, r2, #0
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	0692      	lsls	r2, r2, #26
 8002eae:	d42d      	bmi.n	8002f0c <_printf_common+0xb4>
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eb8:	47c0      	blx	r8
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d020      	beq.n	8002f00 <_printf_common+0xa8>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	68e5      	ldr	r5, [r4, #12]
 8002ec2:	f003 0306 	and.w	r3, r3, #6
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	bf18      	it	ne
 8002eca:	2500      	movne	r5, #0
 8002ecc:	6832      	ldr	r2, [r6, #0]
 8002ece:	f04f 0600 	mov.w	r6, #0
 8002ed2:	68a3      	ldr	r3, [r4, #8]
 8002ed4:	bf08      	it	eq
 8002ed6:	1aad      	subeq	r5, r5, r2
 8002ed8:	6922      	ldr	r2, [r4, #16]
 8002eda:	bf08      	it	eq
 8002edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfc4      	itt	gt
 8002ee4:	1a9b      	subgt	r3, r3, r2
 8002ee6:	18ed      	addgt	r5, r5, r3
 8002ee8:	341a      	adds	r4, #26
 8002eea:	42b5      	cmp	r5, r6
 8002eec:	d11a      	bne.n	8002f24 <_printf_common+0xcc>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e008      	b.n	8002f04 <_printf_common+0xac>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	4638      	mov	r0, r7
 8002efa:	47c0      	blx	r8
 8002efc:	3001      	adds	r0, #1
 8002efe:	d103      	bne.n	8002f08 <_printf_common+0xb0>
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f08:	3501      	adds	r5, #1
 8002f0a:	e7c4      	b.n	8002e96 <_printf_common+0x3e>
 8002f0c:	2030      	movs	r0, #48	; 0x30
 8002f0e:	18e1      	adds	r1, r4, r3
 8002f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f1a:	4422      	add	r2, r4
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f22:	e7c5      	b.n	8002eb0 <_printf_common+0x58>
 8002f24:	2301      	movs	r3, #1
 8002f26:	4622      	mov	r2, r4
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	47c0      	blx	r8
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d0e6      	beq.n	8002f00 <_printf_common+0xa8>
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7d9      	b.n	8002eea <_printf_common+0x92>
	...

08002f38 <_printf_i>:
 8002f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	7e27      	ldrb	r7, [r4, #24]
 8002f40:	4691      	mov	r9, r2
 8002f42:	2f78      	cmp	r7, #120	; 0x78
 8002f44:	4680      	mov	r8, r0
 8002f46:	469a      	mov	sl, r3
 8002f48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f4e:	d807      	bhi.n	8002f60 <_printf_i+0x28>
 8002f50:	2f62      	cmp	r7, #98	; 0x62
 8002f52:	d80a      	bhi.n	8002f6a <_printf_i+0x32>
 8002f54:	2f00      	cmp	r7, #0
 8002f56:	f000 80d9 	beq.w	800310c <_printf_i+0x1d4>
 8002f5a:	2f58      	cmp	r7, #88	; 0x58
 8002f5c:	f000 80a4 	beq.w	80030a8 <_printf_i+0x170>
 8002f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f68:	e03a      	b.n	8002fe0 <_printf_i+0xa8>
 8002f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f6e:	2b15      	cmp	r3, #21
 8002f70:	d8f6      	bhi.n	8002f60 <_printf_i+0x28>
 8002f72:	a001      	add	r0, pc, #4	; (adr r0, 8002f78 <_printf_i+0x40>)
 8002f74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fe5 	.word	0x08002fe5
 8002f80:	08002f61 	.word	0x08002f61
 8002f84:	08002f61 	.word	0x08002f61
 8002f88:	08002f61 	.word	0x08002f61
 8002f8c:	08002f61 	.word	0x08002f61
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002f61 	.word	0x08002f61
 8002f98:	08002f61 	.word	0x08002f61
 8002f9c:	08002f61 	.word	0x08002f61
 8002fa0:	08002f61 	.word	0x08002f61
 8002fa4:	080030f3 	.word	0x080030f3
 8002fa8:	08003015 	.word	0x08003015
 8002fac:	080030d5 	.word	0x080030d5
 8002fb0:	08002f61 	.word	0x08002f61
 8002fb4:	08002f61 	.word	0x08002f61
 8002fb8:	08003115 	.word	0x08003115
 8002fbc:	08002f61 	.word	0x08002f61
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08002f61 	.word	0x08002f61
 8002fc8:	08002f61 	.word	0x08002f61
 8002fcc:	080030dd 	.word	0x080030dd
 8002fd0:	680b      	ldr	r3, [r1, #0]
 8002fd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fd6:	1d1a      	adds	r2, r3, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	600a      	str	r2, [r1, #0]
 8002fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0a4      	b.n	800312e <_printf_i+0x1f6>
 8002fe4:	6825      	ldr	r5, [r4, #0]
 8002fe6:	6808      	ldr	r0, [r1, #0]
 8002fe8:	062e      	lsls	r6, r5, #24
 8002fea:	f100 0304 	add.w	r3, r0, #4
 8002fee:	d50a      	bpl.n	8003006 <_printf_i+0xce>
 8002ff0:	6805      	ldr	r5, [r0, #0]
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	2d00      	cmp	r5, #0
 8002ff6:	da03      	bge.n	8003000 <_printf_i+0xc8>
 8002ff8:	232d      	movs	r3, #45	; 0x2d
 8002ffa:	426d      	negs	r5, r5
 8002ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003000:	230a      	movs	r3, #10
 8003002:	485e      	ldr	r0, [pc, #376]	; (800317c <_printf_i+0x244>)
 8003004:	e019      	b.n	800303a <_printf_i+0x102>
 8003006:	f015 0f40 	tst.w	r5, #64	; 0x40
 800300a:	6805      	ldr	r5, [r0, #0]
 800300c:	600b      	str	r3, [r1, #0]
 800300e:	bf18      	it	ne
 8003010:	b22d      	sxthne	r5, r5
 8003012:	e7ef      	b.n	8002ff4 <_printf_i+0xbc>
 8003014:	680b      	ldr	r3, [r1, #0]
 8003016:	6825      	ldr	r5, [r4, #0]
 8003018:	1d18      	adds	r0, r3, #4
 800301a:	6008      	str	r0, [r1, #0]
 800301c:	0628      	lsls	r0, r5, #24
 800301e:	d501      	bpl.n	8003024 <_printf_i+0xec>
 8003020:	681d      	ldr	r5, [r3, #0]
 8003022:	e002      	b.n	800302a <_printf_i+0xf2>
 8003024:	0669      	lsls	r1, r5, #25
 8003026:	d5fb      	bpl.n	8003020 <_printf_i+0xe8>
 8003028:	881d      	ldrh	r5, [r3, #0]
 800302a:	2f6f      	cmp	r7, #111	; 0x6f
 800302c:	bf0c      	ite	eq
 800302e:	2308      	moveq	r3, #8
 8003030:	230a      	movne	r3, #10
 8003032:	4852      	ldr	r0, [pc, #328]	; (800317c <_printf_i+0x244>)
 8003034:	2100      	movs	r1, #0
 8003036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800303a:	6866      	ldr	r6, [r4, #4]
 800303c:	2e00      	cmp	r6, #0
 800303e:	bfa8      	it	ge
 8003040:	6821      	ldrge	r1, [r4, #0]
 8003042:	60a6      	str	r6, [r4, #8]
 8003044:	bfa4      	itt	ge
 8003046:	f021 0104 	bicge.w	r1, r1, #4
 800304a:	6021      	strge	r1, [r4, #0]
 800304c:	b90d      	cbnz	r5, 8003052 <_printf_i+0x11a>
 800304e:	2e00      	cmp	r6, #0
 8003050:	d04d      	beq.n	80030ee <_printf_i+0x1b6>
 8003052:	4616      	mov	r6, r2
 8003054:	fbb5 f1f3 	udiv	r1, r5, r3
 8003058:	fb03 5711 	mls	r7, r3, r1, r5
 800305c:	5dc7      	ldrb	r7, [r0, r7]
 800305e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003062:	462f      	mov	r7, r5
 8003064:	42bb      	cmp	r3, r7
 8003066:	460d      	mov	r5, r1
 8003068:	d9f4      	bls.n	8003054 <_printf_i+0x11c>
 800306a:	2b08      	cmp	r3, #8
 800306c:	d10b      	bne.n	8003086 <_printf_i+0x14e>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	07df      	lsls	r7, r3, #31
 8003072:	d508      	bpl.n	8003086 <_printf_i+0x14e>
 8003074:	6923      	ldr	r3, [r4, #16]
 8003076:	6861      	ldr	r1, [r4, #4]
 8003078:	4299      	cmp	r1, r3
 800307a:	bfde      	ittt	le
 800307c:	2330      	movle	r3, #48	; 0x30
 800307e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003082:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003086:	1b92      	subs	r2, r2, r6
 8003088:	6122      	str	r2, [r4, #16]
 800308a:	464b      	mov	r3, r9
 800308c:	4621      	mov	r1, r4
 800308e:	4640      	mov	r0, r8
 8003090:	f8cd a000 	str.w	sl, [sp]
 8003094:	aa03      	add	r2, sp, #12
 8003096:	f7ff fedf 	bl	8002e58 <_printf_common>
 800309a:	3001      	adds	r0, #1
 800309c:	d14c      	bne.n	8003138 <_printf_i+0x200>
 800309e:	f04f 30ff 	mov.w	r0, #4294967295
 80030a2:	b004      	add	sp, #16
 80030a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a8:	4834      	ldr	r0, [pc, #208]	; (800317c <_printf_i+0x244>)
 80030aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030ae:	680e      	ldr	r6, [r1, #0]
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80030b6:	061f      	lsls	r7, r3, #24
 80030b8:	600e      	str	r6, [r1, #0]
 80030ba:	d514      	bpl.n	80030e6 <_printf_i+0x1ae>
 80030bc:	07d9      	lsls	r1, r3, #31
 80030be:	bf44      	itt	mi
 80030c0:	f043 0320 	orrmi.w	r3, r3, #32
 80030c4:	6023      	strmi	r3, [r4, #0]
 80030c6:	b91d      	cbnz	r5, 80030d0 <_printf_i+0x198>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f023 0320 	bic.w	r3, r3, #32
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	2310      	movs	r3, #16
 80030d2:	e7af      	b.n	8003034 <_printf_i+0xfc>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	2378      	movs	r3, #120	; 0x78
 80030de:	4828      	ldr	r0, [pc, #160]	; (8003180 <_printf_i+0x248>)
 80030e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030e4:	e7e3      	b.n	80030ae <_printf_i+0x176>
 80030e6:	065e      	lsls	r6, r3, #25
 80030e8:	bf48      	it	mi
 80030ea:	b2ad      	uxthmi	r5, r5
 80030ec:	e7e6      	b.n	80030bc <_printf_i+0x184>
 80030ee:	4616      	mov	r6, r2
 80030f0:	e7bb      	b.n	800306a <_printf_i+0x132>
 80030f2:	680b      	ldr	r3, [r1, #0]
 80030f4:	6826      	ldr	r6, [r4, #0]
 80030f6:	1d1d      	adds	r5, r3, #4
 80030f8:	6960      	ldr	r0, [r4, #20]
 80030fa:	600d      	str	r5, [r1, #0]
 80030fc:	0635      	lsls	r5, r6, #24
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	d501      	bpl.n	8003106 <_printf_i+0x1ce>
 8003102:	6018      	str	r0, [r3, #0]
 8003104:	e002      	b.n	800310c <_printf_i+0x1d4>
 8003106:	0671      	lsls	r1, r6, #25
 8003108:	d5fb      	bpl.n	8003102 <_printf_i+0x1ca>
 800310a:	8018      	strh	r0, [r3, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	4616      	mov	r6, r2
 8003110:	6123      	str	r3, [r4, #16]
 8003112:	e7ba      	b.n	800308a <_printf_i+0x152>
 8003114:	680b      	ldr	r3, [r1, #0]
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	600a      	str	r2, [r1, #0]
 800311a:	681e      	ldr	r6, [r3, #0]
 800311c:	2100      	movs	r1, #0
 800311e:	4630      	mov	r0, r6
 8003120:	6862      	ldr	r2, [r4, #4]
 8003122:	f000 fa9d 	bl	8003660 <memchr>
 8003126:	b108      	cbz	r0, 800312c <_printf_i+0x1f4>
 8003128:	1b80      	subs	r0, r0, r6
 800312a:	6060      	str	r0, [r4, #4]
 800312c:	6863      	ldr	r3, [r4, #4]
 800312e:	6123      	str	r3, [r4, #16]
 8003130:	2300      	movs	r3, #0
 8003132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003136:	e7a8      	b.n	800308a <_printf_i+0x152>
 8003138:	4632      	mov	r2, r6
 800313a:	4649      	mov	r1, r9
 800313c:	4640      	mov	r0, r8
 800313e:	6923      	ldr	r3, [r4, #16]
 8003140:	47d0      	blx	sl
 8003142:	3001      	adds	r0, #1
 8003144:	d0ab      	beq.n	800309e <_printf_i+0x166>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	079b      	lsls	r3, r3, #30
 800314a:	d413      	bmi.n	8003174 <_printf_i+0x23c>
 800314c:	68e0      	ldr	r0, [r4, #12]
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	4298      	cmp	r0, r3
 8003152:	bfb8      	it	lt
 8003154:	4618      	movlt	r0, r3
 8003156:	e7a4      	b.n	80030a2 <_printf_i+0x16a>
 8003158:	2301      	movs	r3, #1
 800315a:	4632      	mov	r2, r6
 800315c:	4649      	mov	r1, r9
 800315e:	4640      	mov	r0, r8
 8003160:	47d0      	blx	sl
 8003162:	3001      	adds	r0, #1
 8003164:	d09b      	beq.n	800309e <_printf_i+0x166>
 8003166:	3501      	adds	r5, #1
 8003168:	68e3      	ldr	r3, [r4, #12]
 800316a:	9903      	ldr	r1, [sp, #12]
 800316c:	1a5b      	subs	r3, r3, r1
 800316e:	42ab      	cmp	r3, r5
 8003170:	dcf2      	bgt.n	8003158 <_printf_i+0x220>
 8003172:	e7eb      	b.n	800314c <_printf_i+0x214>
 8003174:	2500      	movs	r5, #0
 8003176:	f104 0619 	add.w	r6, r4, #25
 800317a:	e7f5      	b.n	8003168 <_printf_i+0x230>
 800317c:	080038c1 	.word	0x080038c1
 8003180:	080038d2 	.word	0x080038d2

08003184 <_sbrk_r>:
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	2300      	movs	r3, #0
 8003188:	4d05      	ldr	r5, [pc, #20]	; (80031a0 <_sbrk_r+0x1c>)
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	f7fd fd66 	bl	8000c60 <_sbrk>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_sbrk_r+0x1a>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_sbrk_r+0x1a>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	200004bc 	.word	0x200004bc

080031a4 <__sread>:
 80031a4:	b510      	push	{r4, lr}
 80031a6:	460c      	mov	r4, r1
 80031a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ac:	f000 fabe 	bl	800372c <_read_r>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	bfab      	itete	ge
 80031b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031b6:	89a3      	ldrhlt	r3, [r4, #12]
 80031b8:	181b      	addge	r3, r3, r0
 80031ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031be:	bfac      	ite	ge
 80031c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80031c2:	81a3      	strhlt	r3, [r4, #12]
 80031c4:	bd10      	pop	{r4, pc}

080031c6 <__swrite>:
 80031c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ca:	461f      	mov	r7, r3
 80031cc:	898b      	ldrh	r3, [r1, #12]
 80031ce:	4605      	mov	r5, r0
 80031d0:	05db      	lsls	r3, r3, #23
 80031d2:	460c      	mov	r4, r1
 80031d4:	4616      	mov	r6, r2
 80031d6:	d505      	bpl.n	80031e4 <__swrite+0x1e>
 80031d8:	2302      	movs	r3, #2
 80031da:	2200      	movs	r2, #0
 80031dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e0:	f000 f9c8 	bl	8003574 <_lseek_r>
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	4632      	mov	r2, r6
 80031e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	4628      	mov	r0, r5
 80031f0:	463b      	mov	r3, r7
 80031f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031fa:	f000 b869 	b.w	80032d0 <_write_r>

080031fe <__sseek>:
 80031fe:	b510      	push	{r4, lr}
 8003200:	460c      	mov	r4, r1
 8003202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003206:	f000 f9b5 	bl	8003574 <_lseek_r>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	bf15      	itete	ne
 8003210:	6560      	strne	r0, [r4, #84]	; 0x54
 8003212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800321a:	81a3      	strheq	r3, [r4, #12]
 800321c:	bf18      	it	ne
 800321e:	81a3      	strhne	r3, [r4, #12]
 8003220:	bd10      	pop	{r4, pc}

08003222 <__sclose>:
 8003222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003226:	f000 b8d3 	b.w	80033d0 <_close_r>
	...

0800322c <__swbuf_r>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	460e      	mov	r6, r1
 8003230:	4614      	mov	r4, r2
 8003232:	4605      	mov	r5, r0
 8003234:	b118      	cbz	r0, 800323e <__swbuf_r+0x12>
 8003236:	6983      	ldr	r3, [r0, #24]
 8003238:	b90b      	cbnz	r3, 800323e <__swbuf_r+0x12>
 800323a:	f7ff fbbb 	bl	80029b4 <__sinit>
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <__swbuf_r+0x98>)
 8003240:	429c      	cmp	r4, r3
 8003242:	d12b      	bne.n	800329c <__swbuf_r+0x70>
 8003244:	686c      	ldr	r4, [r5, #4]
 8003246:	69a3      	ldr	r3, [r4, #24]
 8003248:	60a3      	str	r3, [r4, #8]
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	071a      	lsls	r2, r3, #28
 800324e:	d52f      	bpl.n	80032b0 <__swbuf_r+0x84>
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	b36b      	cbz	r3, 80032b0 <__swbuf_r+0x84>
 8003254:	6923      	ldr	r3, [r4, #16]
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	b2f6      	uxtb	r6, r6
 800325a:	1ac0      	subs	r0, r0, r3
 800325c:	6963      	ldr	r3, [r4, #20]
 800325e:	4637      	mov	r7, r6
 8003260:	4283      	cmp	r3, r0
 8003262:	dc04      	bgt.n	800326e <__swbuf_r+0x42>
 8003264:	4621      	mov	r1, r4
 8003266:	4628      	mov	r0, r5
 8003268:	f000 f948 	bl	80034fc <_fflush_r>
 800326c:	bb30      	cbnz	r0, 80032bc <__swbuf_r+0x90>
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	3001      	adds	r0, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	60a3      	str	r3, [r4, #8]
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	6022      	str	r2, [r4, #0]
 800327c:	701e      	strb	r6, [r3, #0]
 800327e:	6963      	ldr	r3, [r4, #20]
 8003280:	4283      	cmp	r3, r0
 8003282:	d004      	beq.n	800328e <__swbuf_r+0x62>
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	07db      	lsls	r3, r3, #31
 8003288:	d506      	bpl.n	8003298 <__swbuf_r+0x6c>
 800328a:	2e0a      	cmp	r6, #10
 800328c:	d104      	bne.n	8003298 <__swbuf_r+0x6c>
 800328e:	4621      	mov	r1, r4
 8003290:	4628      	mov	r0, r5
 8003292:	f000 f933 	bl	80034fc <_fflush_r>
 8003296:	b988      	cbnz	r0, 80032bc <__swbuf_r+0x90>
 8003298:	4638      	mov	r0, r7
 800329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <__swbuf_r+0x9c>)
 800329e:	429c      	cmp	r4, r3
 80032a0:	d101      	bne.n	80032a6 <__swbuf_r+0x7a>
 80032a2:	68ac      	ldr	r4, [r5, #8]
 80032a4:	e7cf      	b.n	8003246 <__swbuf_r+0x1a>
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <__swbuf_r+0xa0>)
 80032a8:	429c      	cmp	r4, r3
 80032aa:	bf08      	it	eq
 80032ac:	68ec      	ldreq	r4, [r5, #12]
 80032ae:	e7ca      	b.n	8003246 <__swbuf_r+0x1a>
 80032b0:	4621      	mov	r1, r4
 80032b2:	4628      	mov	r0, r5
 80032b4:	f000 f81e 	bl	80032f4 <__swsetup_r>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d0cb      	beq.n	8003254 <__swbuf_r+0x28>
 80032bc:	f04f 37ff 	mov.w	r7, #4294967295
 80032c0:	e7ea      	b.n	8003298 <__swbuf_r+0x6c>
 80032c2:	bf00      	nop
 80032c4:	08003870 	.word	0x08003870
 80032c8:	08003890 	.word	0x08003890
 80032cc:	08003850 	.word	0x08003850

080032d0 <_write_r>:
 80032d0:	b538      	push	{r3, r4, r5, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	2200      	movs	r2, #0
 80032da:	4d05      	ldr	r5, [pc, #20]	; (80032f0 <_write_r+0x20>)
 80032dc:	602a      	str	r2, [r5, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f7fd fd5e 	bl	8000da0 <_write>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_write_r+0x1e>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_write_r+0x1e>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	200004bc 	.word	0x200004bc

080032f4 <__swsetup_r>:
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <__swsetup_r+0xcc>)
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	681d      	ldr	r5, [r3, #0]
 80032fa:	4606      	mov	r6, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	b125      	cbz	r5, 800330a <__swsetup_r+0x16>
 8003300:	69ab      	ldr	r3, [r5, #24]
 8003302:	b913      	cbnz	r3, 800330a <__swsetup_r+0x16>
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff fb55 	bl	80029b4 <__sinit>
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <__swsetup_r+0xd0>)
 800330c:	429c      	cmp	r4, r3
 800330e:	d10f      	bne.n	8003330 <__swsetup_r+0x3c>
 8003310:	686c      	ldr	r4, [r5, #4]
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003318:	0719      	lsls	r1, r3, #28
 800331a:	d42c      	bmi.n	8003376 <__swsetup_r+0x82>
 800331c:	06dd      	lsls	r5, r3, #27
 800331e:	d411      	bmi.n	8003344 <__swsetup_r+0x50>
 8003320:	2309      	movs	r3, #9
 8003322:	6033      	str	r3, [r6, #0]
 8003324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	81a3      	strh	r3, [r4, #12]
 800332e:	e03e      	b.n	80033ae <__swsetup_r+0xba>
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <__swsetup_r+0xd4>)
 8003332:	429c      	cmp	r4, r3
 8003334:	d101      	bne.n	800333a <__swsetup_r+0x46>
 8003336:	68ac      	ldr	r4, [r5, #8]
 8003338:	e7eb      	b.n	8003312 <__swsetup_r+0x1e>
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <__swsetup_r+0xd8>)
 800333c:	429c      	cmp	r4, r3
 800333e:	bf08      	it	eq
 8003340:	68ec      	ldreq	r4, [r5, #12]
 8003342:	e7e6      	b.n	8003312 <__swsetup_r+0x1e>
 8003344:	0758      	lsls	r0, r3, #29
 8003346:	d512      	bpl.n	800336e <__swsetup_r+0x7a>
 8003348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334a:	b141      	cbz	r1, 800335e <__swsetup_r+0x6a>
 800334c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <__swsetup_r+0x66>
 8003354:	4630      	mov	r0, r6
 8003356:	f000 f99d 	bl	8003694 <_free_r>
 800335a:	2300      	movs	r3, #0
 800335c:	6363      	str	r3, [r4, #52]	; 0x34
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	2300      	movs	r3, #0
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6923      	ldr	r3, [r4, #16]
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	81a3      	strh	r3, [r4, #12]
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	b94b      	cbnz	r3, 800338e <__swsetup_r+0x9a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d003      	beq.n	800338e <__swsetup_r+0x9a>
 8003386:	4621      	mov	r1, r4
 8003388:	4630      	mov	r0, r6
 800338a:	f000 f929 	bl	80035e0 <__smakebuf_r>
 800338e:	89a0      	ldrh	r0, [r4, #12]
 8003390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003394:	f010 0301 	ands.w	r3, r0, #1
 8003398:	d00a      	beq.n	80033b0 <__swsetup_r+0xbc>
 800339a:	2300      	movs	r3, #0
 800339c:	60a3      	str	r3, [r4, #8]
 800339e:	6963      	ldr	r3, [r4, #20]
 80033a0:	425b      	negs	r3, r3
 80033a2:	61a3      	str	r3, [r4, #24]
 80033a4:	6923      	ldr	r3, [r4, #16]
 80033a6:	b943      	cbnz	r3, 80033ba <__swsetup_r+0xc6>
 80033a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033ac:	d1ba      	bne.n	8003324 <__swsetup_r+0x30>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	0781      	lsls	r1, r0, #30
 80033b2:	bf58      	it	pl
 80033b4:	6963      	ldrpl	r3, [r4, #20]
 80033b6:	60a3      	str	r3, [r4, #8]
 80033b8:	e7f4      	b.n	80033a4 <__swsetup_r+0xb0>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e7f7      	b.n	80033ae <__swsetup_r+0xba>
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	08003870 	.word	0x08003870
 80033c8:	08003890 	.word	0x08003890
 80033cc:	08003850 	.word	0x08003850

080033d0 <_close_r>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	2300      	movs	r3, #0
 80033d4:	4d05      	ldr	r5, [pc, #20]	; (80033ec <_close_r+0x1c>)
 80033d6:	4604      	mov	r4, r0
 80033d8:	4608      	mov	r0, r1
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	f7fd fc0f 	bl	8000bfe <_close>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d102      	bne.n	80033ea <_close_r+0x1a>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	b103      	cbz	r3, 80033ea <_close_r+0x1a>
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	200004bc 	.word	0x200004bc

080033f0 <__sflush_r>:
 80033f0:	898a      	ldrh	r2, [r1, #12]
 80033f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f6:	4605      	mov	r5, r0
 80033f8:	0710      	lsls	r0, r2, #28
 80033fa:	460c      	mov	r4, r1
 80033fc:	d458      	bmi.n	80034b0 <__sflush_r+0xc0>
 80033fe:	684b      	ldr	r3, [r1, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	dc05      	bgt.n	8003410 <__sflush_r+0x20>
 8003404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	dc02      	bgt.n	8003410 <__sflush_r+0x20>
 800340a:	2000      	movs	r0, #0
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003412:	2e00      	cmp	r6, #0
 8003414:	d0f9      	beq.n	800340a <__sflush_r+0x1a>
 8003416:	2300      	movs	r3, #0
 8003418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800341c:	682f      	ldr	r7, [r5, #0]
 800341e:	602b      	str	r3, [r5, #0]
 8003420:	d032      	beq.n	8003488 <__sflush_r+0x98>
 8003422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	075a      	lsls	r2, r3, #29
 8003428:	d505      	bpl.n	8003436 <__sflush_r+0x46>
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	1ac0      	subs	r0, r0, r3
 800342e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003430:	b10b      	cbz	r3, 8003436 <__sflush_r+0x46>
 8003432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003434:	1ac0      	subs	r0, r0, r3
 8003436:	2300      	movs	r3, #0
 8003438:	4602      	mov	r2, r0
 800343a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800343c:	4628      	mov	r0, r5
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	47b0      	blx	r6
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	d106      	bne.n	8003456 <__sflush_r+0x66>
 8003448:	6829      	ldr	r1, [r5, #0]
 800344a:	291d      	cmp	r1, #29
 800344c:	d82c      	bhi.n	80034a8 <__sflush_r+0xb8>
 800344e:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <__sflush_r+0x108>)
 8003450:	40ca      	lsrs	r2, r1
 8003452:	07d6      	lsls	r6, r2, #31
 8003454:	d528      	bpl.n	80034a8 <__sflush_r+0xb8>
 8003456:	2200      	movs	r2, #0
 8003458:	6062      	str	r2, [r4, #4]
 800345a:	6922      	ldr	r2, [r4, #16]
 800345c:	04d9      	lsls	r1, r3, #19
 800345e:	6022      	str	r2, [r4, #0]
 8003460:	d504      	bpl.n	800346c <__sflush_r+0x7c>
 8003462:	1c42      	adds	r2, r0, #1
 8003464:	d101      	bne.n	800346a <__sflush_r+0x7a>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	b903      	cbnz	r3, 800346c <__sflush_r+0x7c>
 800346a:	6560      	str	r0, [r4, #84]	; 0x54
 800346c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800346e:	602f      	str	r7, [r5, #0]
 8003470:	2900      	cmp	r1, #0
 8003472:	d0ca      	beq.n	800340a <__sflush_r+0x1a>
 8003474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003478:	4299      	cmp	r1, r3
 800347a:	d002      	beq.n	8003482 <__sflush_r+0x92>
 800347c:	4628      	mov	r0, r5
 800347e:	f000 f909 	bl	8003694 <_free_r>
 8003482:	2000      	movs	r0, #0
 8003484:	6360      	str	r0, [r4, #52]	; 0x34
 8003486:	e7c1      	b.n	800340c <__sflush_r+0x1c>
 8003488:	6a21      	ldr	r1, [r4, #32]
 800348a:	2301      	movs	r3, #1
 800348c:	4628      	mov	r0, r5
 800348e:	47b0      	blx	r6
 8003490:	1c41      	adds	r1, r0, #1
 8003492:	d1c7      	bne.n	8003424 <__sflush_r+0x34>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0c4      	beq.n	8003424 <__sflush_r+0x34>
 800349a:	2b1d      	cmp	r3, #29
 800349c:	d001      	beq.n	80034a2 <__sflush_r+0xb2>
 800349e:	2b16      	cmp	r3, #22
 80034a0:	d101      	bne.n	80034a6 <__sflush_r+0xb6>
 80034a2:	602f      	str	r7, [r5, #0]
 80034a4:	e7b1      	b.n	800340a <__sflush_r+0x1a>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ac:	81a3      	strh	r3, [r4, #12]
 80034ae:	e7ad      	b.n	800340c <__sflush_r+0x1c>
 80034b0:	690f      	ldr	r7, [r1, #16]
 80034b2:	2f00      	cmp	r7, #0
 80034b4:	d0a9      	beq.n	800340a <__sflush_r+0x1a>
 80034b6:	0793      	lsls	r3, r2, #30
 80034b8:	bf18      	it	ne
 80034ba:	2300      	movne	r3, #0
 80034bc:	680e      	ldr	r6, [r1, #0]
 80034be:	bf08      	it	eq
 80034c0:	694b      	ldreq	r3, [r1, #20]
 80034c2:	eba6 0807 	sub.w	r8, r6, r7
 80034c6:	600f      	str	r7, [r1, #0]
 80034c8:	608b      	str	r3, [r1, #8]
 80034ca:	f1b8 0f00 	cmp.w	r8, #0
 80034ce:	dd9c      	ble.n	800340a <__sflush_r+0x1a>
 80034d0:	4643      	mov	r3, r8
 80034d2:	463a      	mov	r2, r7
 80034d4:	4628      	mov	r0, r5
 80034d6:	6a21      	ldr	r1, [r4, #32]
 80034d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034da:	47b0      	blx	r6
 80034dc:	2800      	cmp	r0, #0
 80034de:	dc06      	bgt.n	80034ee <__sflush_r+0xfe>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	f04f 30ff 	mov.w	r0, #4294967295
 80034e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ea:	81a3      	strh	r3, [r4, #12]
 80034ec:	e78e      	b.n	800340c <__sflush_r+0x1c>
 80034ee:	4407      	add	r7, r0
 80034f0:	eba8 0800 	sub.w	r8, r8, r0
 80034f4:	e7e9      	b.n	80034ca <__sflush_r+0xda>
 80034f6:	bf00      	nop
 80034f8:	20400001 	.word	0x20400001

080034fc <_fflush_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4605      	mov	r5, r0
 8003502:	460c      	mov	r4, r1
 8003504:	b913      	cbnz	r3, 800350c <_fflush_r+0x10>
 8003506:	2500      	movs	r5, #0
 8003508:	4628      	mov	r0, r5
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	b118      	cbz	r0, 8003516 <_fflush_r+0x1a>
 800350e:	6983      	ldr	r3, [r0, #24]
 8003510:	b90b      	cbnz	r3, 8003516 <_fflush_r+0x1a>
 8003512:	f7ff fa4f 	bl	80029b4 <__sinit>
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <_fflush_r+0x6c>)
 8003518:	429c      	cmp	r4, r3
 800351a:	d11b      	bne.n	8003554 <_fflush_r+0x58>
 800351c:	686c      	ldr	r4, [r5, #4]
 800351e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ef      	beq.n	8003506 <_fflush_r+0xa>
 8003526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003528:	07d0      	lsls	r0, r2, #31
 800352a:	d404      	bmi.n	8003536 <_fflush_r+0x3a>
 800352c:	0599      	lsls	r1, r3, #22
 800352e:	d402      	bmi.n	8003536 <_fflush_r+0x3a>
 8003530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003532:	f7ff fadd 	bl	8002af0 <__retarget_lock_acquire_recursive>
 8003536:	4628      	mov	r0, r5
 8003538:	4621      	mov	r1, r4
 800353a:	f7ff ff59 	bl	80033f0 <__sflush_r>
 800353e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003540:	4605      	mov	r5, r0
 8003542:	07da      	lsls	r2, r3, #31
 8003544:	d4e0      	bmi.n	8003508 <_fflush_r+0xc>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	059b      	lsls	r3, r3, #22
 800354a:	d4dd      	bmi.n	8003508 <_fflush_r+0xc>
 800354c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354e:	f7ff fad0 	bl	8002af2 <__retarget_lock_release_recursive>
 8003552:	e7d9      	b.n	8003508 <_fflush_r+0xc>
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <_fflush_r+0x70>)
 8003556:	429c      	cmp	r4, r3
 8003558:	d101      	bne.n	800355e <_fflush_r+0x62>
 800355a:	68ac      	ldr	r4, [r5, #8]
 800355c:	e7df      	b.n	800351e <_fflush_r+0x22>
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <_fflush_r+0x74>)
 8003560:	429c      	cmp	r4, r3
 8003562:	bf08      	it	eq
 8003564:	68ec      	ldreq	r4, [r5, #12]
 8003566:	e7da      	b.n	800351e <_fflush_r+0x22>
 8003568:	08003870 	.word	0x08003870
 800356c:	08003890 	.word	0x08003890
 8003570:	08003850 	.word	0x08003850

08003574 <_lseek_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	4604      	mov	r4, r0
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	2200      	movs	r2, #0
 800357e:	4d05      	ldr	r5, [pc, #20]	; (8003594 <_lseek_r+0x20>)
 8003580:	602a      	str	r2, [r5, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	f7fd fb5f 	bl	8000c46 <_lseek>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d102      	bne.n	8003592 <_lseek_r+0x1e>
 800358c:	682b      	ldr	r3, [r5, #0]
 800358e:	b103      	cbz	r3, 8003592 <_lseek_r+0x1e>
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	200004bc 	.word	0x200004bc

08003598 <__swhatbuf_r>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	460e      	mov	r6, r1
 800359c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a0:	4614      	mov	r4, r2
 80035a2:	2900      	cmp	r1, #0
 80035a4:	461d      	mov	r5, r3
 80035a6:	b096      	sub	sp, #88	; 0x58
 80035a8:	da07      	bge.n	80035ba <__swhatbuf_r+0x22>
 80035aa:	2300      	movs	r3, #0
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	89b3      	ldrh	r3, [r6, #12]
 80035b0:	061a      	lsls	r2, r3, #24
 80035b2:	d410      	bmi.n	80035d6 <__swhatbuf_r+0x3e>
 80035b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b8:	e00e      	b.n	80035d8 <__swhatbuf_r+0x40>
 80035ba:	466a      	mov	r2, sp
 80035bc:	f000 f8c8 	bl	8003750 <_fstat_r>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	dbf2      	blt.n	80035aa <__swhatbuf_r+0x12>
 80035c4:	9a01      	ldr	r2, [sp, #4]
 80035c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035ce:	425a      	negs	r2, r3
 80035d0:	415a      	adcs	r2, r3
 80035d2:	602a      	str	r2, [r5, #0]
 80035d4:	e7ee      	b.n	80035b4 <__swhatbuf_r+0x1c>
 80035d6:	2340      	movs	r3, #64	; 0x40
 80035d8:	2000      	movs	r0, #0
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	b016      	add	sp, #88	; 0x58
 80035de:	bd70      	pop	{r4, r5, r6, pc}

080035e0 <__smakebuf_r>:
 80035e0:	898b      	ldrh	r3, [r1, #12]
 80035e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035e4:	079d      	lsls	r5, r3, #30
 80035e6:	4606      	mov	r6, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	d507      	bpl.n	80035fc <__smakebuf_r+0x1c>
 80035ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	6123      	str	r3, [r4, #16]
 80035f4:	2301      	movs	r3, #1
 80035f6:	6163      	str	r3, [r4, #20]
 80035f8:	b002      	add	sp, #8
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	466a      	mov	r2, sp
 80035fe:	ab01      	add	r3, sp, #4
 8003600:	f7ff ffca 	bl	8003598 <__swhatbuf_r>
 8003604:	9900      	ldr	r1, [sp, #0]
 8003606:	4605      	mov	r5, r0
 8003608:	4630      	mov	r0, r6
 800360a:	f7ff fa73 	bl	8002af4 <_malloc_r>
 800360e:	b948      	cbnz	r0, 8003624 <__smakebuf_r+0x44>
 8003610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003614:	059a      	lsls	r2, r3, #22
 8003616:	d4ef      	bmi.n	80035f8 <__smakebuf_r+0x18>
 8003618:	f023 0303 	bic.w	r3, r3, #3
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	81a3      	strh	r3, [r4, #12]
 8003622:	e7e3      	b.n	80035ec <__smakebuf_r+0xc>
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <__smakebuf_r+0x7c>)
 8003626:	62b3      	str	r3, [r6, #40]	; 0x28
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	6020      	str	r0, [r4, #0]
 800362c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	9b00      	ldr	r3, [sp, #0]
 8003634:	6120      	str	r0, [r4, #16]
 8003636:	6163      	str	r3, [r4, #20]
 8003638:	9b01      	ldr	r3, [sp, #4]
 800363a:	b15b      	cbz	r3, 8003654 <__smakebuf_r+0x74>
 800363c:	4630      	mov	r0, r6
 800363e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003642:	f000 f897 	bl	8003774 <_isatty_r>
 8003646:	b128      	cbz	r0, 8003654 <__smakebuf_r+0x74>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	81a3      	strh	r3, [r4, #12]
 8003654:	89a0      	ldrh	r0, [r4, #12]
 8003656:	4305      	orrs	r5, r0
 8003658:	81a5      	strh	r5, [r4, #12]
 800365a:	e7cd      	b.n	80035f8 <__smakebuf_r+0x18>
 800365c:	0800294d 	.word	0x0800294d

08003660 <memchr>:
 8003660:	4603      	mov	r3, r0
 8003662:	b510      	push	{r4, lr}
 8003664:	b2c9      	uxtb	r1, r1
 8003666:	4402      	add	r2, r0
 8003668:	4293      	cmp	r3, r2
 800366a:	4618      	mov	r0, r3
 800366c:	d101      	bne.n	8003672 <memchr+0x12>
 800366e:	2000      	movs	r0, #0
 8003670:	e003      	b.n	800367a <memchr+0x1a>
 8003672:	7804      	ldrb	r4, [r0, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	428c      	cmp	r4, r1
 8003678:	d1f6      	bne.n	8003668 <memchr+0x8>
 800367a:	bd10      	pop	{r4, pc}

0800367c <__malloc_lock>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__malloc_lock+0x8>)
 800367e:	f7ff ba37 	b.w	8002af0 <__retarget_lock_acquire_recursive>
 8003682:	bf00      	nop
 8003684:	200004b4 	.word	0x200004b4

08003688 <__malloc_unlock>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__malloc_unlock+0x8>)
 800368a:	f7ff ba32 	b.w	8002af2 <__retarget_lock_release_recursive>
 800368e:	bf00      	nop
 8003690:	200004b4 	.word	0x200004b4

08003694 <_free_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	2900      	cmp	r1, #0
 800369a:	d043      	beq.n	8003724 <_free_r+0x90>
 800369c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a0:	1f0c      	subs	r4, r1, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bfb8      	it	lt
 80036a6:	18e4      	addlt	r4, r4, r3
 80036a8:	f7ff ffe8 	bl	800367c <__malloc_lock>
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <_free_r+0x94>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	4610      	mov	r0, r2
 80036b2:	b933      	cbnz	r3, 80036c2 <_free_r+0x2e>
 80036b4:	6063      	str	r3, [r4, #4]
 80036b6:	6014      	str	r4, [r2, #0]
 80036b8:	4628      	mov	r0, r5
 80036ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036be:	f7ff bfe3 	b.w	8003688 <__malloc_unlock>
 80036c2:	42a3      	cmp	r3, r4
 80036c4:	d90a      	bls.n	80036dc <_free_r+0x48>
 80036c6:	6821      	ldr	r1, [r4, #0]
 80036c8:	1862      	adds	r2, r4, r1
 80036ca:	4293      	cmp	r3, r2
 80036cc:	bf01      	itttt	eq
 80036ce:	681a      	ldreq	r2, [r3, #0]
 80036d0:	685b      	ldreq	r3, [r3, #4]
 80036d2:	1852      	addeq	r2, r2, r1
 80036d4:	6022      	streq	r2, [r4, #0]
 80036d6:	6063      	str	r3, [r4, #4]
 80036d8:	6004      	str	r4, [r0, #0]
 80036da:	e7ed      	b.n	80036b8 <_free_r+0x24>
 80036dc:	461a      	mov	r2, r3
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b10b      	cbz	r3, 80036e6 <_free_r+0x52>
 80036e2:	42a3      	cmp	r3, r4
 80036e4:	d9fa      	bls.n	80036dc <_free_r+0x48>
 80036e6:	6811      	ldr	r1, [r2, #0]
 80036e8:	1850      	adds	r0, r2, r1
 80036ea:	42a0      	cmp	r0, r4
 80036ec:	d10b      	bne.n	8003706 <_free_r+0x72>
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	4401      	add	r1, r0
 80036f2:	1850      	adds	r0, r2, r1
 80036f4:	4283      	cmp	r3, r0
 80036f6:	6011      	str	r1, [r2, #0]
 80036f8:	d1de      	bne.n	80036b8 <_free_r+0x24>
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4401      	add	r1, r0
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	6053      	str	r3, [r2, #4]
 8003704:	e7d8      	b.n	80036b8 <_free_r+0x24>
 8003706:	d902      	bls.n	800370e <_free_r+0x7a>
 8003708:	230c      	movs	r3, #12
 800370a:	602b      	str	r3, [r5, #0]
 800370c:	e7d4      	b.n	80036b8 <_free_r+0x24>
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	1821      	adds	r1, r4, r0
 8003712:	428b      	cmp	r3, r1
 8003714:	bf01      	itttt	eq
 8003716:	6819      	ldreq	r1, [r3, #0]
 8003718:	685b      	ldreq	r3, [r3, #4]
 800371a:	1809      	addeq	r1, r1, r0
 800371c:	6021      	streq	r1, [r4, #0]
 800371e:	6063      	str	r3, [r4, #4]
 8003720:	6054      	str	r4, [r2, #4]
 8003722:	e7c9      	b.n	80036b8 <_free_r+0x24>
 8003724:	bd38      	pop	{r3, r4, r5, pc}
 8003726:	bf00      	nop
 8003728:	200000a4 	.word	0x200000a4

0800372c <_read_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4604      	mov	r4, r0
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	2200      	movs	r2, #0
 8003736:	4d05      	ldr	r5, [pc, #20]	; (800374c <_read_r+0x20>)
 8003738:	602a      	str	r2, [r5, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f7fd fa42 	bl	8000bc4 <_read>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_read_r+0x1e>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	b103      	cbz	r3, 800374a <_read_r+0x1e>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	200004bc 	.word	0x200004bc

08003750 <_fstat_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	2300      	movs	r3, #0
 8003754:	4d06      	ldr	r5, [pc, #24]	; (8003770 <_fstat_r+0x20>)
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	f7fd fa59 	bl	8000c14 <_fstat>
 8003762:	1c43      	adds	r3, r0, #1
 8003764:	d102      	bne.n	800376c <_fstat_r+0x1c>
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	b103      	cbz	r3, 800376c <_fstat_r+0x1c>
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	bf00      	nop
 8003770:	200004bc 	.word	0x200004bc

08003774 <_isatty_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	2300      	movs	r3, #0
 8003778:	4d05      	ldr	r5, [pc, #20]	; (8003790 <_isatty_r+0x1c>)
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	f7fd fa57 	bl	8000c32 <_isatty>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_isatty_r+0x1a>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_isatty_r+0x1a>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	200004bc 	.word	0x200004bc

08003794 <_init>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr

080037a0 <_fini>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr
