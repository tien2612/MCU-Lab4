
mcu_lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  08003a70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08003a70  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee0e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002789  00000000  00000000  0002eea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00031630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001927e  00000000  00000000  00032450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ed07  00000000  00000000  0004b6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a49a  00000000  00000000  0005a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e486f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d00  00000000  00000000  000e48c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004048  00000000  00000000  000e55c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038a8 	.word	0x080038a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038a8 	.word	0x080038a8

0800014c <SCH_Go_To_Sleep>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SCH_Go_To_Sleep() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8000150:	f000 ff06 	bl	8000f60 <HAL_SuspendTick>
	HAL_GPIO_WritePin(LED_SLEEP_GPIO_Port, LED_SLEEP_Pin, 0); // Just to indicate sleep mode is active
 8000154:	2200      	movs	r2, #0
 8000156:	2102      	movs	r1, #2
 8000158:	4805      	ldr	r0, [pc, #20]	; (8000170 <SCH_Go_To_Sleep+0x24>)
 800015a:	f001 f9a5 	bl	80014a8 <HAL_GPIO_WritePin>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800015e:	2101      	movs	r1, #1
 8000160:	2000      	movs	r0, #0
 8000162:	f001 fa3d 	bl	80015e0 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000166:	f000 ff09 	bl	8000f7c <HAL_ResumeTick>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010800 	.word	0x40010800

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fe90 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f84e 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f968 	bl	8000454 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000184:	f000 f93c 	bl	8000400 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000188:	f000 f886 	bl	8000298 <MX_IWDG_Init>
  MX_TIM2_Init();
 800018c:	f000 f89e 	bl	80002cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000190:	f000 f8e8 	bl	8000364 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000194:	4819      	ldr	r0, [pc, #100]	; (80001fc <main+0x88>)
 8000196:	f001 fea9 	bl	8001eec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800019a:	4819      	ldr	r0, [pc, #100]	; (8000200 <main+0x8c>)
 800019c:	f001 fea6 	bl	8001eec <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80001a0:	f000 f9e0 	bl	8000564 <SCH_Init>
  SCH_Add_Task(&task0, 0, 50);
 80001a4:	2232      	movs	r2, #50	; 0x32
 80001a6:	2100      	movs	r1, #0
 80001a8:	4816      	ldr	r0, [pc, #88]	; (8000204 <main+0x90>)
 80001aa:	f000 fa5b 	bl	8000664 <SCH_Add_Task>
  SCH_Add_Task(&task1, 3, 100);
 80001ae:	2264      	movs	r2, #100	; 0x64
 80001b0:	2103      	movs	r1, #3
 80001b2:	4815      	ldr	r0, [pc, #84]	; (8000208 <main+0x94>)
 80001b4:	f000 fa56 	bl	8000664 <SCH_Add_Task>
  SCH_Add_Task(&task2, 5, 150);
 80001b8:	2296      	movs	r2, #150	; 0x96
 80001ba:	2105      	movs	r1, #5
 80001bc:	4813      	ldr	r0, [pc, #76]	; (800020c <main+0x98>)
 80001be:	f000 fa51 	bl	8000664 <SCH_Add_Task>
  SCH_Add_Task(&task3, 7, 200);
 80001c2:	22c8      	movs	r2, #200	; 0xc8
 80001c4:	2107      	movs	r1, #7
 80001c6:	4812      	ldr	r0, [pc, #72]	; (8000210 <main+0x9c>)
 80001c8:	f000 fa4c 	bl	8000664 <SCH_Add_Task>
  SCH_Add_Task(&task4, 9, 250);
 80001cc:	22fa      	movs	r2, #250	; 0xfa
 80001ce:	2109      	movs	r1, #9
 80001d0:	4810      	ldr	r0, [pc, #64]	; (8000214 <main+0xa0>)
 80001d2:	f000 fa47 	bl	8000664 <SCH_Add_Task>
  find_new_min_task();
 80001d6:	f000 fbdd 	bl	8000994 <find_new_min_task>

  while (1)
  {
	  // turn on LED for indicate when not in sleep mode
	  HAL_GPIO_WritePin(LED_SLEEP_GPIO_Port, LED_SLEEP_Pin, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	2102      	movs	r1, #2
 80001de:	480e      	ldr	r0, [pc, #56]	; (8000218 <main+0xa4>)
 80001e0:	f001 f962 	bl	80014a8 <HAL_GPIO_WritePin>
	  Watchdog_Refresh();
 80001e4:	f000 fe2a 	bl	8000e3c <Watchdog_Refresh>
	  SCH_Dispatch_Tasks();
 80001e8:	f000 fa98 	bl	800071c <SCH_Dispatch_Tasks>
	  // SCH go to sleep, wait for any interrupt.
	  SCH_Go_To_Sleep();
 80001ec:	f7ff ffae 	bl	800014c <SCH_Go_To_Sleep>
	  // turn of LED for indicate while MCU is sleeping.
	  HAL_GPIO_WritePin(LED_SLEEP_GPIO_Port, LED_SLEEP_Pin, 1);
 80001f0:	2201      	movs	r2, #1
 80001f2:	2102      	movs	r1, #2
 80001f4:	4808      	ldr	r0, [pc, #32]	; (8000218 <main+0xa4>)
 80001f6:	f001 f957 	bl	80014a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_SLEEP_GPIO_Port, LED_SLEEP_Pin, 0);
 80001fa:	e7ee      	b.n	80001da <main+0x66>
 80001fc:	20000144 	.word	0x20000144
 8000200:	200000b8 	.word	0x200000b8
 8000204:	08000d49 	.word	0x08000d49
 8000208:	08000d71 	.word	0x08000d71
 800020c:	08000d99 	.word	0x08000d99
 8000210:	08000dc1 	.word	0x08000dc1
 8000214:	08000de9 	.word	0x08000de9
 8000218:	40010800 	.word	0x40010800

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b090      	sub	sp, #64	; 0x40
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fbd4 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800023e:	230a      	movs	r3, #10
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	2310      	movs	r3, #16
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f9de 	bl	8001618 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000262:	f000 f979 	bl	8000558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fc4a 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800028a:	f000 f965 	bl	8000558 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_IWDG_Init+0x2c>)
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <MX_IWDG_Init+0x30>)
 80002a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MX_IWDG_Init+0x2c>)
 80002a4:	2203      	movs	r2, #3
 80002a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_IWDG_Init+0x2c>)
 80002aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80002ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_IWDG_Init+0x2c>)
 80002b2:	f001 f943 	bl	800153c <HAL_IWDG_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80002bc:	f000 f94c 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000ac 	.word	0x200000ac
 80002c8:	40003000 	.word	0x40003000

080002cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <MX_TIM2_Init+0x94>)
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_TIM2_Init+0x94>)
 80002f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MX_TIM2_Init+0x94>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_TIM2_Init+0x94>)
 8000300:	2209      	movs	r2, #9
 8000302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_TIM2_Init+0x94>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_TIM2_Init+0x94>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_TIM2_Init+0x94>)
 8000312:	f001 fd9b 	bl	8001e4c <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800031c:	f000 f91c 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	4619      	mov	r1, r3
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_TIM2_Init+0x94>)
 800032e:	f001 ff31 	bl	8002194 <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000338:	f000 f90e 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_TIM2_Init+0x94>)
 800034a:	f002 f8f9 	bl	8002540 <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000354:	f000 f900 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000144 	.word	0x20000144

08000364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000378:	463b      	mov	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <MX_TIM3_Init+0x94>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <MX_TIM3_Init+0x98>)
 8000384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <MX_TIM3_Init+0x94>)
 8000388:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800038c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MX_TIM3_Init+0x94>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_TIM3_Init+0x94>)
 8000396:	224f      	movs	r2, #79	; 0x4f
 8000398:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_TIM3_Init+0x94>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_TIM3_Init+0x94>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003a6:	4814      	ldr	r0, [pc, #80]	; (80003f8 <MX_TIM3_Init+0x94>)
 80003a8:	f001 fd50 	bl	8001e4c <HAL_TIM_Base_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80003b2:	f000 f8d1 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	4619      	mov	r1, r3
 80003c2:	480d      	ldr	r0, [pc, #52]	; (80003f8 <MX_TIM3_Init+0x94>)
 80003c4:	f001 fee6 	bl	8002194 <HAL_TIM_ConfigClockSource>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80003ce:	f000 f8c3 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d2:	2300      	movs	r3, #0
 80003d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003da:	463b      	mov	r3, r7
 80003dc:	4619      	mov	r1, r3
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <MX_TIM3_Init+0x94>)
 80003e0:	f002 f8ae 	bl	8002540 <HAL_TIMEx_MasterConfigSynchronization>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003ea:	f000 f8b5 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200000b8 	.word	0x200000b8
 80003fc:	40000400 	.word	0x40000400

08000400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <MX_USART1_UART_Init+0x50>)
 8000408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_USART1_UART_Init+0x4c>)
 800040c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART1_UART_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000438:	f002 f8ec 	bl	8002614 <HAL_UART_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000442:	f000 f889 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000100 	.word	0x20000100
 8000450:	40013800 	.word	0x40013800

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <MX_GPIO_Init+0xb4>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a26      	ldr	r2, [pc, #152]	; (8000508 <MX_GPIO_Init+0xb4>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <MX_GPIO_Init+0xb4>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <MX_GPIO_Init+0xb4>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a20      	ldr	r2, [pc, #128]	; (8000508 <MX_GPIO_Init+0xb4>)
 8000486:	f043 0308 	orr.w	r3, r3, #8
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_GPIO_Init+0xb4>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0308 	and.w	r3, r3, #8
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SLEEP_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000498:	2200      	movs	r2, #0
 800049a:	21fa      	movs	r1, #250	; 0xfa
 800049c:	481b      	ldr	r0, [pc, #108]	; (800050c <MX_GPIO_Init+0xb8>)
 800049e:	f001 f803 	bl	80014a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a2:	2301      	movs	r3, #1
 80004a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_GPIO_Init+0xbc>)
 80004a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	4619      	mov	r1, r3
 80004b4:	4815      	ldr	r0, [pc, #84]	; (800050c <MX_GPIO_Init+0xb8>)
 80004b6:	f000 fe7d 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SLEEP_Pin PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = LED_SLEEP_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80004ba:	23fa      	movs	r3, #250	; 0xfa
 80004bc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	4619      	mov	r1, r3
 80004d0:	480e      	ldr	r0, [pc, #56]	; (800050c <MX_GPIO_Init+0xb8>)
 80004d2:	f000 fe6f 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B0_Pin */
  GPIO_InitStruct.Pin = B0_Pin;
 80004d6:	2301      	movs	r3, #1
 80004d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004de:	2301      	movs	r3, #1
 80004e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(B0_GPIO_Port, &GPIO_InitStruct);
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	4619      	mov	r1, r3
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <MX_GPIO_Init+0xc0>)
 80004ea:	f000 fe63 	bl	80011b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2006      	movs	r0, #6
 80004f4:	f000 fe27 	bl	8001146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004f8:	2006      	movs	r0, #6
 80004fa:	f000 fe40 	bl	800117e <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800
 8000510:	10210000 	.word	0x10210000
 8000514:	40010c00 	.word	0x40010c00

08000518 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000528:	d106      	bne.n	8000538 <HAL_TIM_PeriodElapsedCallback+0x20>
		timestamp++; // increase timestamp by 10ms
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3301      	adds	r3, #1
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000532:	6013      	str	r3, [r2, #0]
		SCH_Update();
 8000534:	f000 f93e 	bl	80007b4 <SCH_Update>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000008c 	.word	0x2000008c

08000544 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]

}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
int current_index_task = 0;
int Error_code_G = 0;

void SCH_Init() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
	for (int i = 0; i < SCH_MAX_TASKS; i++) {
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e007      	b.n	8000580 <SCH_Init+0x1c>
		SCH_Delete_Task(i);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	b29b      	uxth	r3, r3
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f973 	bl	8000860 <SCH_Delete_Task>
	for (int i = 0; i < SCH_MAX_TASKS; i++) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3301      	adds	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b27      	cmp	r3, #39	; 0x27
 8000584:	ddf4      	ble.n	8000570 <SCH_Init+0xc>
	}
	Error_code_G = 0;
 8000586:	4b03      	ldr	r3, [pc, #12]	; (8000594 <SCH_Init+0x30>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
	//current_index_task = -1;
	//Timer_init();
	//Watchdog_init();
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000009c 	.word	0x2000009c

08000598 <Shift_Task_To_Left>:

void Shift_Task_To_Left(int index_a, int index_b) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	SCH_tasks_G[index_a].pTask = SCH_tasks_G[index_b].pTask;
 80005a2:	492f      	ldr	r1, [pc, #188]	; (8000660 <Shift_Task_To_Left+0xc8>)
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	6819      	ldr	r1, [r3, #0]
 80005b2:	482b      	ldr	r0, [pc, #172]	; (8000660 <Shift_Task_To_Left+0xc8>)
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4613      	mov	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4403      	add	r3, r0
 80005c0:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Delay = SCH_tasks_G[index_b].Delay;
 80005c2:	4927      	ldr	r1, [pc, #156]	; (8000660 <Shift_Task_To_Left+0xc8>)
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	3304      	adds	r3, #4
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <Shift_Task_To_Left+0xc8>)
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4403      	add	r3, r0
 80005e2:	3304      	adds	r3, #4
 80005e4:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].Period =  SCH_tasks_G[index_b].Period;
 80005e6:	491e      	ldr	r1, [pc, #120]	; (8000660 <Shift_Task_To_Left+0xc8>)
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	3308      	adds	r3, #8
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	4819      	ldr	r0, [pc, #100]	; (8000660 <Shift_Task_To_Left+0xc8>)
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4403      	add	r3, r0
 8000606:	3308      	adds	r3, #8
 8000608:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[index_a].RunMe = SCH_tasks_G[index_b].RunMe;
 800060a:	4915      	ldr	r1, [pc, #84]	; (8000660 <Shift_Task_To_Left+0xc8>)
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	330c      	adds	r3, #12
 800061a:	7818      	ldrb	r0, [r3, #0]
 800061c:	4910      	ldr	r1, [pc, #64]	; (8000660 <Shift_Task_To_Left+0xc8>)
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4613      	mov	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	330c      	adds	r3, #12
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]

	SCH_tasks_G[index_a].TaskID = SCH_tasks_G[index_b].TaskID;
 8000630:	490b      	ldr	r1, [pc, #44]	; (8000660 <Shift_Task_To_Left+0xc8>)
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	440b      	add	r3, r1
 800063e:	3310      	adds	r3, #16
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <Shift_Task_To_Left+0xc8>)
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4403      	add	r3, r0
 8000650:	3310      	adds	r3, #16
 8000652:	6019      	str	r1, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000018c 	.word	0x2000018c

08000664 <SCH_Add_Task>:

unsigned char SCH_Add_Task ( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD) {
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	// If user init SCH before, then assign current_index_task to zero (first index)
	unsigned char Return_code;

	if(current_index_task < SCH_MAX_TASKS){
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SCH_Add_Task+0xac>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b27      	cmp	r3, #39	; 0x27
 8000676:	dc3f      	bgt.n	80006f8 <SCH_Add_Task+0x94>

		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SCH_Add_Task+0xac>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4925      	ldr	r1, [pc, #148]	; (8000714 <SCH_Add_Task+0xb0>)
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	440b      	add	r3, r1
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <SCH_Add_Task+0xac>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4920      	ldr	r1, [pc, #128]	; (8000714 <SCH_Add_Task+0xb0>)
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	440b      	add	r3, r1
 800069c:	3304      	adds	r3, #4
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period =  PERIOD;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <SCH_Add_Task+0xac>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	491b      	ldr	r1, [pc, #108]	; (8000714 <SCH_Add_Task+0xb0>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	3308      	adds	r3, #8
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <SCH_Add_Task+0xac>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4915      	ldr	r1, [pc, #84]	; (8000714 <SCH_Add_Task+0xb0>)
 80006be:	4613      	mov	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	330c      	adds	r3, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <SCH_Add_Task+0xac>)
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SCH_Add_Task+0xac>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4608      	mov	r0, r1
 80006d8:	490e      	ldr	r1, [pc, #56]	; (8000714 <SCH_Add_Task+0xb0>)
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	440b      	add	r3, r1
 80006e4:	3310      	adds	r3, #16
 80006e6:	6018      	str	r0, [r3, #0]

		current_index_task++;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <SCH_Add_Task+0xac>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <SCH_Add_Task+0xac>)
 80006f0:	6013      	str	r3, [r2, #0]

		Return_code = RETURN_NORMAL;
 80006f2:	2303      	movs	r3, #3
 80006f4:	75fb      	strb	r3, [r7, #23]
 80006f6:	e004      	b.n	8000702 <SCH_Add_Task+0x9e>

	} else {
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <SCH_Add_Task+0xb4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 80006fe:	2302      	movs	r3, #2
 8000700:	75fb      	strb	r3, [r7, #23]
	}

	return Return_code;
 8000702:	7dfb      	ldrb	r3, [r7, #23]
}
 8000704:	4618      	mov	r0, r3
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000098 	.word	0x20000098
 8000714:	2000018c 	.word	0x2000018c
 8000718:	2000009c 	.word	0x2000009c

0800071c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	int i = min_index;
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SCH_Dispatch_Tasks+0x90>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	607b      	str	r3, [r7, #4]
	// check flag of min_index
	if (SCH_tasks_G[i].RunMe > 0) {
 8000728:	4921      	ldr	r1, [pc, #132]	; (80007b0 <SCH_Dispatch_Tasks+0x94>)
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	440b      	add	r3, r1
 8000736:	330c      	adds	r3, #12
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d02f      	beq.n	800079e <SCH_Dispatch_Tasks+0x82>
		update_other_tasks();
 800073e:	f000 f8f1 	bl	8000924 <update_other_tasks>
		(*SCH_tasks_G[i].pTask)();
 8000742:	491b      	ldr	r1, [pc, #108]	; (80007b0 <SCH_Dispatch_Tasks+0x94>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	440b      	add	r3, r1
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4798      	blx	r3
		SCH_tasks_G[i].RunMe--;
 8000754:	4916      	ldr	r1, [pc, #88]	; (80007b0 <SCH_Dispatch_Tasks+0x94>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	440b      	add	r3, r1
 8000762:	330c      	adds	r3, #12
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	b2d8      	uxtb	r0, r3
 800076a:	4911      	ldr	r1, [pc, #68]	; (80007b0 <SCH_Dispatch_Tasks+0x94>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	440b      	add	r3, r1
 8000778:	330c      	adds	r3, #12
 800077a:	4602      	mov	r2, r0
 800077c:	701a      	strb	r2, [r3, #0]
		// If it's one-shot task, remove it form the array
		if (SCH_tasks_G[i].Period == 0) {
 800077e:	490c      	ldr	r1, [pc, #48]	; (80007b0 <SCH_Dispatch_Tasks+0x94>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	440b      	add	r3, r1
 800078c:	3308      	adds	r3, #8
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d104      	bne.n	800079e <SCH_Dispatch_Tasks+0x82>
			SCH_Delete_Task(i);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	b29b      	uxth	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f861 	bl	8000860 <SCH_Delete_Task>
		}
	}
	// Report system status
	SCH_Report_Status();
 800079e:	f000 f943 	bl	8000a28 <SCH_Report_Status>
	// The scheduler enters idle mode at this point
	//SCH_Go_To_Sleep();
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000090 	.word	0x20000090
 80007b0:	2000018c 	.word	0x2000018c

080007b4 <SCH_Update>:
		}
	}
}*/

/* My new SCH_Update function */
void SCH_Update() {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	// if task is ready to run
	if (SCH_tasks_G[min_index].Delay > 0) SCH_tasks_G[min_index].Delay--;
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <SCH_Update+0xa4>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4927      	ldr	r1, [pc, #156]	; (800085c <SCH_Update+0xa8>)
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	3304      	adds	r3, #4
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <SCH_Update+0x44>
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <SCH_Update+0xa4>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4921      	ldr	r1, [pc, #132]	; (800085c <SCH_Update+0xa8>)
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	440b      	add	r3, r1
 80007e0:	3304      	adds	r3, #4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1e59      	subs	r1, r3, #1
 80007e6:	481d      	ldr	r0, [pc, #116]	; (800085c <SCH_Update+0xa8>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4403      	add	r3, r0
 80007f2:	3304      	adds	r3, #4
 80007f4:	6019      	str	r1, [r3, #0]
	else {
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
		 SCH_tasks_G[min_index].RunMe += 1;
	}
}
 80007f6:	e02a      	b.n	800084e <SCH_Update+0x9a>
		 SCH_tasks_G[min_index].Delay =  SCH_tasks_G[min_index].Period;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <SCH_Update+0xa4>)
 80007fa:	6819      	ldr	r1, [r3, #0]
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <SCH_Update+0xa4>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4816      	ldr	r0, [pc, #88]	; (800085c <SCH_Update+0xa8>)
 8000802:	460b      	mov	r3, r1
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4403      	add	r3, r0
 800080c:	3308      	adds	r3, #8
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <SCH_Update+0xa8>)
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4403      	add	r3, r0
 800081c:	3304      	adds	r3, #4
 800081e:	6019      	str	r1, [r3, #0]
		 SCH_tasks_G[min_index].RunMe += 1;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <SCH_Update+0xa4>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	490d      	ldr	r1, [pc, #52]	; (800085c <SCH_Update+0xa8>)
 8000826:	4613      	mov	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	440b      	add	r3, r1
 8000830:	330c      	adds	r3, #12
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <SCH_Update+0xa4>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <SCH_Update+0xa8>)
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	440b      	add	r3, r1
 8000848:	330c      	adds	r3, #12
 800084a:	4602      	mov	r2, r0
 800084c:	701a      	strb	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000090 	.word	0x20000090
 800085c:	2000018c 	.word	0x2000018c

08000860 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(uint16_t TASK_INDEX) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
	unsigned char Return_code;
	if (current_index_task < 0 || current_index_task >= SCH_MAX_TASKS) {
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <SCH_Delete_Task+0xb8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db03      	blt.n	800087a <SCH_Delete_Task+0x1a>
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <SCH_Delete_Task+0xb8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b27      	cmp	r3, #39	; 0x27
 8000878:	dd06      	ble.n	8000888 <SCH_Delete_Task+0x28>
		// No task at this location...
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <SCH_Delete_Task+0xbc>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8000880:	2302      	movs	r3, #2
 8000882:	72fb      	strb	r3, [r7, #11]
		return Return_code;
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	e043      	b.n	8000910 <SCH_Delete_Task+0xb0>
	} else {
		Return_code = RETURN_NORMAL;
 8000888:	2303      	movs	r3, #3
 800088a:	72fb      	strb	r3, [r7, #11]
	}
	// Shift task from TASK_INDEX + 1 to the left
	for (int i = TASK_INDEX; i < current_index_task; i++) {
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e008      	b.n	80008a4 <SCH_Delete_Task+0x44>
		Shift_Task_To_Left(i, i + 1);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	4619      	mov	r1, r3
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff fe7d 	bl	8000598 <Shift_Task_To_Left>
	for (int i = TASK_INDEX; i < current_index_task; i++) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <SCH_Delete_Task+0xb8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf1      	blt.n	8000892 <SCH_Delete_Task+0x32>
	}
	// Remove last index task
	SCH_tasks_G[current_index_task].pTask = 0x0000 ;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <SCH_Delete_Task+0xb8>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	491b      	ldr	r1, [pc, #108]	; (8000920 <SCH_Delete_Task+0xc0>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = 0;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <SCH_Delete_Task+0xb8>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4916      	ldr	r1, [pc, #88]	; (8000920 <SCH_Delete_Task+0xc0>)
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	3304      	adds	r3, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = 0;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <SCH_Delete_Task+0xb8>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4910      	ldr	r1, [pc, #64]	; (8000920 <SCH_Delete_Task+0xc0>)
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	3308      	adds	r3, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <SCH_Delete_Task+0xb8>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	490b      	ldr	r1, [pc, #44]	; (8000920 <SCH_Delete_Task+0xc0>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	330c      	adds	r3, #12
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SCH_Delete_Task+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	4a03      	ldr	r2, [pc, #12]	; (8000918 <SCH_Delete_Task+0xb8>)
 800090c:	6013      	str	r3, [r2, #0]

	return Return_code;
 800090e:	7afb      	ldrb	r3, [r7, #11]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000098 	.word	0x20000098
 800091c:	2000009c 	.word	0x2000009c
 8000920:	2000018c 	.word	0x2000018c

08000924 <update_other_tasks>:

void update_other_tasks() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	e01e      	b.n	800096e <update_other_tasks+0x4a>
		if (i == min_index) {
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <update_other_tasks+0x60>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d015      	beq.n	8000966 <update_other_tasks+0x42>
			continue;
		}

		SCH_tasks_G[i].Delay -= min_delay;
 800093a:	4913      	ldr	r1, [pc, #76]	; (8000988 <update_other_tasks+0x64>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	3304      	adds	r3, #4
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <update_other_tasks+0x68>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	1a99      	subs	r1, r3, r2
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <update_other_tasks+0x64>)
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4403      	add	r3, r0
 8000960:	3304      	adds	r3, #4
 8000962:	6019      	str	r1, [r3, #0]
 8000964:	e000      	b.n	8000968 <update_other_tasks+0x44>
			continue;
 8000966:	bf00      	nop
	for (int i = 0; i < current_index_task; i++) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3301      	adds	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <update_other_tasks+0x6c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbdb      	blt.n	8000930 <update_other_tasks+0xc>
	}

	find_new_min_task();
 8000978:	f000 f80c 	bl	8000994 <find_new_min_task>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000090 	.word	0x20000090
 8000988:	2000018c 	.word	0x2000018c
 800098c:	20000094 	.word	0x20000094
 8000990:	20000098 	.word	0x20000098

08000994 <find_new_min_task>:

void find_new_min_task() {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
	// find new min index of schedule array
	min_index = 0;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <find_new_min_task+0x84>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
	min_delay = SCH_tasks_G[min_index].Delay;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <find_new_min_task+0x84>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	491d      	ldr	r1, [pc, #116]	; (8000a1c <find_new_min_task+0x88>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	3304      	adds	r3, #4
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <find_new_min_task+0x8c>)
 80009b8:	601a      	str	r2, [r3, #0]

	for (int i = min_index + 1; i < current_index_task; i++) {
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <find_new_min_task+0x84>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	e01e      	b.n	8000a02 <find_new_min_task+0x6e>
		if (SCH_tasks_G[i].Delay < min_delay) {
 80009c4:	4915      	ldr	r1, [pc, #84]	; (8000a1c <find_new_min_task+0x88>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3304      	adds	r3, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <find_new_min_task+0x8c>)
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	4293      	cmp	r3, r2
 80009dc:	d20e      	bcs.n	80009fc <find_new_min_task+0x68>
			min_index = i;
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <find_new_min_task+0x84>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6013      	str	r3, [r2, #0]
			min_delay = SCH_tasks_G[i].Delay;
 80009e4:	490d      	ldr	r1, [pc, #52]	; (8000a1c <find_new_min_task+0x88>)
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	3304      	adds	r3, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <find_new_min_task+0x8c>)
 80009fa:	601a      	str	r2, [r3, #0]
	for (int i = min_index + 1; i < current_index_task; i++) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <find_new_min_task+0x90>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbdb      	blt.n	80009c4 <find_new_min_task+0x30>
		}
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000090 	.word	0x20000090
 8000a1c:	2000018c 	.word	0x2000018c
 8000a20:	20000094 	.word	0x20000094
 8000a24:	20000098 	.word	0x20000098

08000a28 <SCH_Report_Status>:
void SCH_Report_Status(void) {
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
				Error_code_G = 0; // Reset error code
			}
		}
	}
#endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x5c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_MspInit+0x60>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_MspInit+0x60>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010000 	.word	0x40010000

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d114      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_TIM_Base_MspInit+0x78>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_TIM_Base_MspInit+0x78>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_TIM_Base_MspInit+0x78>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	201c      	movs	r0, #28
 8000ac8:	f000 fb3d 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000acc:	201c      	movs	r0, #28
 8000ace:	f000 fb56 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ad2:	e018      	b.n	8000b06 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_TIM_Base_MspInit+0x7c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d113      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_TIM_Base_MspInit+0x78>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <HAL_TIM_Base_MspInit+0x78>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_TIM_Base_MspInit+0x78>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	201d      	movs	r0, #29
 8000afc:	f000 fb23 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b00:	201d      	movs	r0, #29
 8000b02:	f000 fb3c 	bl	800117e <HAL_NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40000400 	.word	0x40000400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d131      	bne.n	8000b9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_UART_MspInit+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <HAL_UART_MspInit+0x94>)
 8000b7e:	f000 fb19 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4619      	mov	r1, r3
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_UART_MspInit+0x94>)
 8000b98:	f000 fb0c 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40013800 	.word	0x40013800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f997 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fc82 	bl	800150c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM2_IRQHandler+0x10>)
 8000c12:	f001 f9b7 	bl	8001f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000144 	.word	0x20000144

08000c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM3_IRQHandler+0x10>)
 8000c26:	f001 f9ad 	bl	8001f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000b8 	.word	0x200000b8

08000c34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
	}

return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c94:	605a      	str	r2, [r3, #4]
	return 0;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f001 fe40 	bl	8002984 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20002800 	.word	0x20002800
 8000d30:	00000400 	.word	0x00000400
 8000d34:	200000a0 	.word	0x200000a0
 8000d38:	200004c0 	.word	0x200004c0

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <task0>:
#include "task.h"
#include "uart_msg.h"
#include "global.h"
#include <stdio.h>

void task0() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	printf("Task0 start at: %d ms\r\n", timestamp);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <task0+0x1c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <task0+0x20>)
 8000d54:	f001 fe48 	bl	80029e8 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000d58:	2108      	movs	r1, #8
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <task0+0x24>)
 8000d5c:	f000 fbbc 	bl	80014d8 <HAL_GPIO_TogglePin>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	080038c0 	.word	0x080038c0
 8000d6c:	40010800 	.word	0x40010800

08000d70 <task1>:

void task1() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	printf("Task1 start at: %d ms\r\n", timestamp);
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <task1+0x1c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <task1+0x20>)
 8000d7c:	f001 fe34 	bl	80029e8 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000d80:	2110      	movs	r1, #16
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <task1+0x24>)
 8000d84:	f000 fba8 	bl	80014d8 <HAL_GPIO_TogglePin>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000008c 	.word	0x2000008c
 8000d90:	080038d8 	.word	0x080038d8
 8000d94:	40010800 	.word	0x40010800

08000d98 <task2>:

void task2() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	printf("Task2 start at: %d ms\r\n", timestamp);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <task2+0x1c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <task2+0x20>)
 8000da4:	f001 fe20 	bl	80029e8 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000da8:	2120      	movs	r1, #32
 8000daa:	4804      	ldr	r0, [pc, #16]	; (8000dbc <task2+0x24>)
 8000dac:	f000 fb94 	bl	80014d8 <HAL_GPIO_TogglePin>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	080038f0 	.word	0x080038f0
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <task3>:

void task3() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	printf("Task3 start at: %d ms\r\n", timestamp);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <task3+0x1c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <task3+0x20>)
 8000dcc:	f001 fe0c 	bl	80029e8 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <task3+0x24>)
 8000dd4:	f000 fb80 	bl	80014d8 <HAL_GPIO_TogglePin>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000008c 	.word	0x2000008c
 8000de0:	08003908 	.word	0x08003908
 8000de4:	40010800 	.word	0x40010800

08000de8 <task4>:

void task4() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	printf("Task4 start at: %d ms\r\n", timestamp);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <task4+0x1c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <task4+0x20>)
 8000df4:	f001 fdf8 	bl	80029e8 <iprintf>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <task4+0x24>)
 8000dfc:	f000 fb6c 	bl	80014d8 <HAL_GPIO_TogglePin>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000008c 	.word	0x2000008c
 8000e08:	08003920 	.word	0x08003920
 8000e0c:	40010800 	.word	0x40010800

08000e10 <_write>:
#include "uart_msg.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <_write+0x28>)
 8000e28:	f001 fc41 	bl	80026ae <HAL_UART_Transmit>
	return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000100 	.word	0x20000100

08000e3c <Watchdog_Refresh>:
#include "watchdog.h"

IWDG_HandleTypeDef hiwdg;
static uint32_t counter_for_watchdog = 0;

void Watchdog_Refresh(void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <Watchdog_Refresh+0x10>)
 8000e42:	f000 fbbd 	bl	80015c0 <HAL_IWDG_Refresh>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000ac 	.word	0x200000ac

08000e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e76:	f7ff ff61 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f001 fd89 	bl	8002990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7e:	f7ff f979 	bl	8000174 <main>
  bx lr
 8000e82:	4770      	bx	lr
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e8c:	08003a00 	.word	0x08003a00
  ldr r2, =_sbss
 8000e90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e94:	200004c0 	.word	0x200004c0

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x28>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x28>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f93f 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fdbc 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f957 	bl	800119a <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f91f 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200004ac 	.word	0x200004ac

08000f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	200004ac 	.word	0x200004ac

08000f60 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_SuspendTick+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_SuspendTick+0x18>)
 8000f6a:	f023 0302 	bic.w	r3, r3, #2
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_ResumeTick+0x18>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_ResumeTick+0x18>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4906      	ldr	r1, [pc, #24]	; (8001030 <__NVIC_EnableIRQ+0x34>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff90 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff2d 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff42 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff35 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e148      	b.n	800145a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c8:	2201      	movs	r2, #1
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8137 	bne.w	8001454 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4aa3      	ldr	r2, [pc, #652]	; (8001478 <HAL_GPIO_Init+0x2c4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d05e      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 80011f0:	4aa1      	ldr	r2, [pc, #644]	; (8001478 <HAL_GPIO_Init+0x2c4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d875      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 80011f6:	4aa1      	ldr	r2, [pc, #644]	; (800147c <HAL_GPIO_Init+0x2c8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d058      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 80011fc:	4a9f      	ldr	r2, [pc, #636]	; (800147c <HAL_GPIO_Init+0x2c8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d86f      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 8001202:	4a9f      	ldr	r2, [pc, #636]	; (8001480 <HAL_GPIO_Init+0x2cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d052      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001208:	4a9d      	ldr	r2, [pc, #628]	; (8001480 <HAL_GPIO_Init+0x2cc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d869      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800120e:	4a9d      	ldr	r2, [pc, #628]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d04c      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001214:	4a9b      	ldr	r2, [pc, #620]	; (8001484 <HAL_GPIO_Init+0x2d0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d863      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800121a:	4a9b      	ldr	r2, [pc, #620]	; (8001488 <HAL_GPIO_Init+0x2d4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d046      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001220:	4a99      	ldr	r2, [pc, #612]	; (8001488 <HAL_GPIO_Init+0x2d4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d85d      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d82a      	bhi.n	8001280 <HAL_GPIO_Init+0xcc>
 800122a:	2b12      	cmp	r3, #18
 800122c:	d859      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <HAL_GPIO_Init+0x80>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	080012af 	.word	0x080012af
 8001238:	08001289 	.word	0x08001289
 800123c:	0800129b 	.word	0x0800129b
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012e3 	.word	0x080012e3
 8001248:	080012e3 	.word	0x080012e3
 800124c:	080012e3 	.word	0x080012e3
 8001250:	080012e3 	.word	0x080012e3
 8001254:	080012e3 	.word	0x080012e3
 8001258:	080012e3 	.word	0x080012e3
 800125c:	080012e3 	.word	0x080012e3
 8001260:	080012e3 	.word	0x080012e3
 8001264:	080012e3 	.word	0x080012e3
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012e3 	.word	0x080012e3
 8001270:	080012e3 	.word	0x080012e3
 8001274:	080012e3 	.word	0x080012e3
 8001278:	08001291 	.word	0x08001291
 800127c:	080012a5 	.word	0x080012a5
 8001280:	4a82      	ldr	r2, [pc, #520]	; (800148c <HAL_GPIO_Init+0x2d8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001286:	e02c      	b.n	80012e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e029      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	3304      	adds	r3, #4
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e024      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	3308      	adds	r3, #8
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e01f      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	330c      	adds	r3, #12
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e01a      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b6:	2304      	movs	r3, #4
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e013      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	611a      	str	r2, [r3, #16]
          break;
 80012ce:	e009      	b.n	80012e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	615a      	str	r2, [r3, #20]
          break;
 80012da:	e003      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          break;
 80012e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2bff      	cmp	r3, #255	; 0xff
 80012e8:	d801      	bhi.n	80012ee <HAL_GPIO_Init+0x13a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	e001      	b.n	80012f2 <HAL_GPIO_Init+0x13e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2bff      	cmp	r3, #255	; 0xff
 80012f8:	d802      	bhi.n	8001300 <HAL_GPIO_Init+0x14c>
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x152>
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	3b08      	subs	r3, #8
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	210f      	movs	r1, #15
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	6a39      	ldr	r1, [r7, #32]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	431a      	orrs	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8090 	beq.w	8001454 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001334:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_GPIO_Init+0x2dc>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a55      	ldr	r2, [pc, #340]	; (8001490 <HAL_GPIO_Init+0x2dc>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_GPIO_Init+0x2dc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800134c:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_GPIO_Init+0x2e0>)
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a49      	ldr	r2, [pc, #292]	; (8001498 <HAL_GPIO_Init+0x2e4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00d      	beq.n	8001394 <HAL_GPIO_Init+0x1e0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a48      	ldr	r2, [pc, #288]	; (800149c <HAL_GPIO_Init+0x2e8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x1dc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a47      	ldr	r2, [pc, #284]	; (80014a0 <HAL_GPIO_Init+0x2ec>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_GPIO_Init+0x1d8>
 8001388:	2302      	movs	r3, #2
 800138a:	e004      	b.n	8001396 <HAL_GPIO_Init+0x1e2>
 800138c:	2303      	movs	r3, #3
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x1e2>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_GPIO_Init+0x1e2>
 8001394:	2300      	movs	r3, #0
 8001396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a6:	493b      	ldr	r1, [pc, #236]	; (8001494 <HAL_GPIO_Init+0x2e0>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4937      	ldr	r1, [pc, #220]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ce:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4933      	ldr	r1, [pc, #204]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	492d      	ldr	r1, [pc, #180]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4929      	ldr	r1, [pc, #164]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001400:	4013      	ands	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	4923      	ldr	r1, [pc, #140]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	491f      	ldr	r1, [pc, #124]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001428:	4013      	ands	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4919      	ldr	r1, [pc, #100]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4915      	ldr	r1, [pc, #84]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001450:	4013      	ands	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3301      	adds	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f aeaf 	bne.w	80011c8 <HAL_GPIO_Init+0x14>
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	372c      	adds	r7, #44	; 0x2c
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40010400 	.word	0x40010400

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	611a      	str	r2, [r3, #16]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	041a      	lsls	r2, r3, #16
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43d9      	mvns	r1, r3
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	400b      	ands	r3, r1
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
	...

0800150c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f80a 	bl	8000544 <HAL_GPIO_EXTI_Callback>
  }
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e034      	b.n	80015b8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001556:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001560:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6852      	ldr	r2, [r2, #4]
 800156a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6892      	ldr	r2, [r2, #8]
 8001574:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001576:	f7ff fce9 	bl	8000f4c <HAL_GetTick>
 800157a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800157c:	e00f      	b.n	800159e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800157e:	f7ff fce5 	bl	8000f4c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b27      	cmp	r3, #39	; 0x27
 800158a:	d908      	bls.n	800159e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e00c      	b.n	80015b8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e8      	bne.n	800157e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80015d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_PWR_EnterSLEEPMode+0x34>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_PWR_EnterSLEEPMode+0x34>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80015fe:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001600:	e002      	b.n	8001608 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001602:	bf40      	sev
    __WFE();
 8001604:	bf20      	wfe
    __WFE();
 8001606:	bf20      	wfe
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e26c      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8087 	beq.w	8001746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b04      	cmp	r3, #4
 8001642:	d00c      	beq.n	800165e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001644:	4b8f      	ldr	r3, [pc, #572]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d112      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
 8001650:	4b8c      	ldr	r3, [pc, #560]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d10b      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	4b89      	ldr	r3, [pc, #548]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d06c      	beq.n	8001744 <HAL_RCC_OscConfig+0x12c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d168      	bne.n	8001744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e246      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x76>
 8001680:	4b80      	ldr	r3, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a7f      	ldr	r2, [pc, #508]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e02e      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7a      	ldr	r2, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b78      	ldr	r3, [pc, #480]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a77      	ldr	r2, [pc, #476]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e01d      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0xbc>
 80016ba:	4b72      	ldr	r3, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a71      	ldr	r2, [pc, #452]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 80016d4:	4b6b      	ldr	r3, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a67      	ldr	r2, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d013      	beq.n	800171c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc2a 	bl	8000f4c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fc26 	bl	8000f4c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1fa      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0xe4>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fc16 	bl	8000f4c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fc12 	bl	8000f4c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1e6      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x10c>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d063      	beq.n	800181a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175e:	4b49      	ldr	r3, [pc, #292]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b08      	cmp	r3, #8
 8001768:	d11c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x18c>
 800176a:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x176>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1ba      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4939      	ldr	r1, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	e03a      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fbcb 	bl	8000f4c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fbc7 	bl	8000f4c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e19b      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4927      	ldr	r1, [pc, #156]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e015      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fbaa 	bl	8000f4c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fba6 	bl	8000f4c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e17a      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03a      	beq.n	800189c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d019      	beq.n	8001862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_RCC_OscConfig+0x274>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fb8a 	bl	8000f4c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fb86 	bl	8000f4c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e15a      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fad8 	bl	8001e10 <RCC_Delay>
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_OscConfig+0x274>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff fb70 	bl	8000f4c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186e:	e00f      	b.n	8001890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fb6c 	bl	8000f4c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d908      	bls.n	8001890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e140      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	42420000 	.word	0x42420000
 800188c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b9e      	ldr	r3, [pc, #632]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e9      	bne.n	8001870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a6 	beq.w	80019f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b97      	ldr	r3, [pc, #604]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10d      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b94      	ldr	r3, [pc, #592]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a93      	ldr	r2, [pc, #588]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b8e      	ldr	r3, [pc, #568]	; (8001b10 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a8a      	ldr	r2, [pc, #552]	; (8001b10 <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fb2d 	bl	8000f4c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff fb29 	bl	8000f4c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0fd      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x4f8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x312>
 800191c:	4b7b      	ldr	r3, [pc, #492]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a7a      	ldr	r2, [pc, #488]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	e02d      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x334>
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a75      	ldr	r2, [pc, #468]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a72      	ldr	r2, [pc, #456]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	e01c      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x356>
 8001954:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a6c      	ldr	r2, [pc, #432]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a69      	ldr	r2, [pc, #420]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e00b      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a66      	ldr	r2, [pc, #408]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6213      	str	r3, [r2, #32]
 800197a:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d015      	beq.n	80019ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff fadd 	bl	8000f4c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff fad9 	bl	8000f4c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0ab      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ee      	beq.n	8001996 <HAL_RCC_OscConfig+0x37e>
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fac7 	bl	8000f4c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fac3 	bl	8000f4c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e095      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a47      	ldr	r2, [pc, #284]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8081 	beq.w	8001b02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d061      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d146      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_OscConfig+0x4fc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa97 	bl	8000f4c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fa93 	bl	8000f4c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e067      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d108      	bne.n	8001a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	492d      	ldr	r1, [pc, #180]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a19      	ldr	r1, [r3, #32]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	4927      	ldr	r1, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x4fc>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fa67 	bl	8000f4c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff fa63 	bl	8000f4c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e037      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x46a>
 8001aa0:	e02f      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_RCC_OscConfig+0x4fc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa50 	bl	8000f4c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff fa4c 	bl	8000f4c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e020      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x498>
 8001ace:	e018      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e013      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40007000 	.word	0x40007000
 8001b14:	42420060 	.word	0x42420060

08001b18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0d0      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4965      	ldr	r1, [pc, #404]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0b8      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b74:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	494d      	ldr	r1, [pc, #308]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d040      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d115      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e07f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e073      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e06b      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4936      	ldr	r1, [pc, #216]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f9a0 	bl	8000f4c <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f99c 	bl	8000f4c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e053      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d210      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	4922      	ldr	r1, [pc, #136]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e032      	b.n	8001cce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4916      	ldr	r1, [pc, #88]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	490e      	ldr	r1, [pc, #56]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca6:	f000 f821 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	490a      	ldr	r1, [pc, #40]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1cc>)
 8001cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x1d0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f8fe 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08003948 	.word	0x08003948
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	b490      	push	{r4, r7}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cf4:	1d3c      	adds	r4, r7, #4
 8001cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cfc:	f240 2301 	movw	r3, #513	; 0x201
 8001d00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x40>
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x46>
 8001d2a:	e02d      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2e:	623b      	str	r3, [r7, #32]
      break;
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d3e:	4413      	add	r3, r2
 8001d40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	0c5b      	lsrs	r3, r3, #17
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d5e:	4413      	add	r3, r2
 8001d60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6a:	fb02 f203 	mul.w	r2, r2, r3
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	e004      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	623b      	str	r3, [r7, #32]
      break;
 8001d86:	e002      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc90      	pop	{r4, r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	08003938 	.word	0x08003938
 8001da0:	40021000 	.word	0x40021000
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	003d0900 	.word	0x003d0900

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc4:	f7ff fff2 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08003958 	.word	0x08003958

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dec:	f7ff ffde 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08003958 	.word	0x08003958

08001e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <RCC_Delay+0x34>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <RCC_Delay+0x38>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e2c:	bf00      	nop
  }
  while (Delay --);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e5a      	subs	r2, r3, #1
 8001e32:	60fa      	str	r2, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f9      	bne.n	8001e2c <RCC_Delay+0x1c>
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000000 	.word	0x20000000
 8001e48:	10624dd3 	.word	0x10624dd3

08001e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e041      	b.n	8001ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fe10 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 fa6a 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e035      	b.n	8001f70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <HAL_TIM_Base_Start_IT+0x90>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d009      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x4e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d004      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x4e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_TIM_Base_Start_IT+0x94>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d111      	bne.n	8001f5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d010      	beq.n	8001f6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	e007      	b.n	8001f6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40000400 	.word	0x40000400

08001f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0202 	mvn.w	r2, #2
 8001fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9b1 	bl	800232e <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f9a4 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f9b3 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0204 	mvn.w	r2, #4
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f987 	bl	800232e <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f97a 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f989 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b08      	cmp	r3, #8
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b08      	cmp	r3, #8
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0208 	mvn.w	r2, #8
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f95d 	bl	800232e <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f950 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f95f 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b10      	cmp	r3, #16
 8002094:	d122      	bne.n	80020dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d11b      	bne.n	80020dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0210 	mvn.w	r2, #16
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2208      	movs	r2, #8
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f933 	bl	800232e <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f926 	bl	800231c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f935 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0201 	mvn.w	r2, #1
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fa08 	bl	8000518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	2b80      	cmp	r3, #128	; 0x80
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa67 	bl	8002602 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8f9 	bl	8002352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b20      	cmp	r3, #32
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b20      	cmp	r3, #32
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0220 	mvn.w	r2, #32
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa32 	bl	80025f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_ConfigClockSource+0x18>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0b3      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x180>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e4:	d03e      	beq.n	8002264 <HAL_TIM_ConfigClockSource+0xd0>
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	f200 8087 	bhi.w	80022fc <HAL_TIM_ConfigClockSource+0x168>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	f000 8085 	beq.w	8002300 <HAL_TIM_ConfigClockSource+0x16c>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	d87f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d01a      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0xa2>
 8002200:	2b70      	cmp	r3, #112	; 0x70
 8002202:	d87b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d050      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x116>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d877      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 800220c:	2b50      	cmp	r3, #80	; 0x50
 800220e:	d03c      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xf6>
 8002210:	2b50      	cmp	r3, #80	; 0x50
 8002212:	d873      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d058      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x136>
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d86f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 800221c:	2b30      	cmp	r3, #48	; 0x30
 800221e:	d064      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x156>
 8002220:	2b30      	cmp	r3, #48	; 0x30
 8002222:	d86b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d060      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x156>
 8002228:	2b20      	cmp	r3, #32
 800222a:	d867      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05c      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x156>
 8002230:	2b10      	cmp	r3, #16
 8002232:	d05a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002234:	e062      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f000 f95c 	bl	8002502 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002258:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	609a      	str	r2, [r3, #8]
      break;
 8002262:	e04e      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f000 f945 	bl	8002502 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002286:	609a      	str	r2, [r3, #8]
      break;
 8002288:	e03b      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f000 f8bc 	bl	8002414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2150      	movs	r1, #80	; 0x50
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f913 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022a8:	e02b      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 f8da 	bl	8002470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2160      	movs	r1, #96	; 0x60
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f903 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022c8:	e01b      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 f89c 	bl	8002414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f8f3 	bl	80024ce <TIM_ITRx_SetConfig>
      break;
 80022e8:	e00b      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 f8ea 	bl	80024ce <TIM_ITRx_SetConfig>
        break;
 80022fa:	e002      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a25      	ldr	r2, [pc, #148]	; (800240c <TIM_Base_SetConfig+0xa8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <TIM_Base_SetConfig+0x28>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x28>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a22      	ldr	r2, [pc, #136]	; (8002410 <TIM_Base_SetConfig+0xac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <TIM_Base_SetConfig+0xa8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <TIM_Base_SetConfig+0x52>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d003      	beq.n	80023b6 <TIM_Base_SetConfig+0x52>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a17      	ldr	r2, [pc, #92]	; (8002410 <TIM_Base_SetConfig+0xac>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d108      	bne.n	80023c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <TIM_Base_SetConfig+0xa8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d103      	bne.n	80023fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	615a      	str	r2, [r3, #20]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400

08002414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f023 030a 	bic.w	r3, r3, #10
 8002450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	621a      	str	r2, [r3, #32]
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f023 0210 	bic.w	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800249a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	031b      	lsls	r3, r3, #12
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	621a      	str	r2, [r3, #32]
}
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f043 0307 	orr.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	021a      	lsls	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	431a      	orrs	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002554:	2302      	movs	r3, #2
 8002556:	e041      	b.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d004      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400

080025f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e03f      	b.n	80026a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fa6c 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f905 	bl	8002868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800267c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800268c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b08a      	sub	sp, #40	; 0x28
 80026b2:	af02      	add	r7, sp, #8
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d17c      	bne.n	80027c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_UART_Transmit+0x2c>
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e075      	b.n	80027ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_UART_Transmit+0x3e>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e06e      	b.n	80027ca <HAL_UART_Transmit+0x11c>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2221      	movs	r2, #33	; 0x21
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002702:	f7fe fc23 	bl	8000f4c <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271c:	d108      	bne.n	8002730 <HAL_UART_Transmit+0x82>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e003      	b.n	8002738 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002740:	e02a      	b.n	8002798 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f840 	bl	80027d2 <UART_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e036      	b.n	80027ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	3302      	adds	r3, #2
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e007      	b.n	800278a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	781a      	ldrb	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3301      	adds	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1cf      	bne.n	8002742 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f810 	bl	80027d2 <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e006      	b.n	80027ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e2:	e02c      	b.n	800283e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d028      	beq.n	800283e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0x30>
 80027f2:	f7fe fbab 	bl	8000f4c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d21d      	bcs.n	800283e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002810:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e00f      	b.n	800285e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	429a      	cmp	r2, r3
 800285a:	d0c3      	beq.n	80027e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028a2:	f023 030c 	bic.w	r3, r3, #12
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2c      	ldr	r2, [pc, #176]	; (800297c <UART_SetConfig+0x114>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028d0:	f7ff fa8a 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	e002      	b.n	80028de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028d8:	f7ff fa72 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 80028dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <UART_SetConfig+0x118>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	0119      	lsls	r1, r3, #4
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f2f3 	udiv	r2, r2, r3
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <UART_SetConfig+0x118>)
 8002916:	fba3 0302 	umull	r0, r3, r3, r2
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2064      	movs	r0, #100	; 0x64
 800291e:	fb00 f303 	mul.w	r3, r0, r3
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	3332      	adds	r3, #50	; 0x32
 8002928:	4a15      	ldr	r2, [pc, #84]	; (8002980 <UART_SetConfig+0x118>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002934:	4419      	add	r1, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009a      	lsls	r2, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fbb2 f2f3 	udiv	r2, r2, r3
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <UART_SetConfig+0x118>)
 800294e:	fba3 0302 	umull	r0, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2064      	movs	r0, #100	; 0x64
 8002956:	fb00 f303 	mul.w	r3, r0, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	3332      	adds	r3, #50	; 0x32
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <UART_SetConfig+0x118>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	440a      	add	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40013800 	.word	0x40013800
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <__errno>:
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <__errno+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c

08002990 <__libc_init_array>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	2600      	movs	r6, #0
 8002994:	4d0c      	ldr	r5, [pc, #48]	; (80029c8 <__libc_init_array+0x38>)
 8002996:	4c0d      	ldr	r4, [pc, #52]	; (80029cc <__libc_init_array+0x3c>)
 8002998:	1b64      	subs	r4, r4, r5
 800299a:	10a4      	asrs	r4, r4, #2
 800299c:	42a6      	cmp	r6, r4
 800299e:	d109      	bne.n	80029b4 <__libc_init_array+0x24>
 80029a0:	f000 ff82 	bl	80038a8 <_init>
 80029a4:	2600      	movs	r6, #0
 80029a6:	4d0a      	ldr	r5, [pc, #40]	; (80029d0 <__libc_init_array+0x40>)
 80029a8:	4c0a      	ldr	r4, [pc, #40]	; (80029d4 <__libc_init_array+0x44>)
 80029aa:	1b64      	subs	r4, r4, r5
 80029ac:	10a4      	asrs	r4, r4, #2
 80029ae:	42a6      	cmp	r6, r4
 80029b0:	d105      	bne.n	80029be <__libc_init_array+0x2e>
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b8:	4798      	blx	r3
 80029ba:	3601      	adds	r6, #1
 80029bc:	e7ee      	b.n	800299c <__libc_init_array+0xc>
 80029be:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c2:	4798      	blx	r3
 80029c4:	3601      	adds	r6, #1
 80029c6:	e7f2      	b.n	80029ae <__libc_init_array+0x1e>
 80029c8:	080039f8 	.word	0x080039f8
 80029cc:	080039f8 	.word	0x080039f8
 80029d0:	080039f8 	.word	0x080039f8
 80029d4:	080039fc 	.word	0x080039fc

080029d8 <memset>:
 80029d8:	4603      	mov	r3, r0
 80029da:	4402      	add	r2, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <iprintf>:
 80029e8:	b40f      	push	{r0, r1, r2, r3}
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <iprintf+0x2c>)
 80029ec:	b513      	push	{r0, r1, r4, lr}
 80029ee:	681c      	ldr	r4, [r3, #0]
 80029f0:	b124      	cbz	r4, 80029fc <iprintf+0x14>
 80029f2:	69a3      	ldr	r3, [r4, #24]
 80029f4:	b913      	cbnz	r3, 80029fc <iprintf+0x14>
 80029f6:	4620      	mov	r0, r4
 80029f8:	f000 f866 	bl	8002ac8 <__sinit>
 80029fc:	ab05      	add	r3, sp, #20
 80029fe:	4620      	mov	r0, r4
 8002a00:	9a04      	ldr	r2, [sp, #16]
 8002a02:	68a1      	ldr	r1, [r4, #8]
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	f000 f981 	bl	8002d0c <_vfiprintf_r>
 8002a0a:	b002      	add	sp, #8
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a10:	b004      	add	sp, #16
 8002a12:	4770      	bx	lr
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <std>:
 8002a18:	2300      	movs	r3, #0
 8002a1a:	b510      	push	{r4, lr}
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a26:	6083      	str	r3, [r0, #8]
 8002a28:	8181      	strh	r1, [r0, #12]
 8002a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a2c:	81c2      	strh	r2, [r0, #14]
 8002a2e:	6183      	str	r3, [r0, #24]
 8002a30:	4619      	mov	r1, r3
 8002a32:	2208      	movs	r2, #8
 8002a34:	305c      	adds	r0, #92	; 0x5c
 8002a36:	f7ff ffcf 	bl	80029d8 <memset>
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <std+0x38>)
 8002a3c:	6224      	str	r4, [r4, #32]
 8002a3e:	6263      	str	r3, [r4, #36]	; 0x24
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <std+0x3c>)
 8002a42:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <std+0x40>)
 8002a46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <std+0x44>)
 8002a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	080032b9 	.word	0x080032b9
 8002a54:	080032db 	.word	0x080032db
 8002a58:	08003313 	.word	0x08003313
 8002a5c:	08003337 	.word	0x08003337

08002a60 <_cleanup_r>:
 8002a60:	4901      	ldr	r1, [pc, #4]	; (8002a68 <_cleanup_r+0x8>)
 8002a62:	f000 b8af 	b.w	8002bc4 <_fwalk_reent>
 8002a66:	bf00      	nop
 8002a68:	08003611 	.word	0x08003611

08002a6c <__sfmoreglue>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	2568      	movs	r5, #104	; 0x68
 8002a70:	1e4a      	subs	r2, r1, #1
 8002a72:	4355      	muls	r5, r2
 8002a74:	460e      	mov	r6, r1
 8002a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a7a:	f000 f8c5 	bl	8002c08 <_malloc_r>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	b140      	cbz	r0, 8002a94 <__sfmoreglue+0x28>
 8002a82:	2100      	movs	r1, #0
 8002a84:	e9c0 1600 	strd	r1, r6, [r0]
 8002a88:	300c      	adds	r0, #12
 8002a8a:	60a0      	str	r0, [r4, #8]
 8002a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a90:	f7ff ffa2 	bl	80029d8 <memset>
 8002a94:	4620      	mov	r0, r4
 8002a96:	bd70      	pop	{r4, r5, r6, pc}

08002a98 <__sfp_lock_acquire>:
 8002a98:	4801      	ldr	r0, [pc, #4]	; (8002aa0 <__sfp_lock_acquire+0x8>)
 8002a9a:	f000 b8b3 	b.w	8002c04 <__retarget_lock_acquire_recursive>
 8002a9e:	bf00      	nop
 8002aa0:	200004b8 	.word	0x200004b8

08002aa4 <__sfp_lock_release>:
 8002aa4:	4801      	ldr	r0, [pc, #4]	; (8002aac <__sfp_lock_release+0x8>)
 8002aa6:	f000 b8ae 	b.w	8002c06 <__retarget_lock_release_recursive>
 8002aaa:	bf00      	nop
 8002aac:	200004b8 	.word	0x200004b8

08002ab0 <__sinit_lock_acquire>:
 8002ab0:	4801      	ldr	r0, [pc, #4]	; (8002ab8 <__sinit_lock_acquire+0x8>)
 8002ab2:	f000 b8a7 	b.w	8002c04 <__retarget_lock_acquire_recursive>
 8002ab6:	bf00      	nop
 8002ab8:	200004b3 	.word	0x200004b3

08002abc <__sinit_lock_release>:
 8002abc:	4801      	ldr	r0, [pc, #4]	; (8002ac4 <__sinit_lock_release+0x8>)
 8002abe:	f000 b8a2 	b.w	8002c06 <__retarget_lock_release_recursive>
 8002ac2:	bf00      	nop
 8002ac4:	200004b3 	.word	0x200004b3

08002ac8 <__sinit>:
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4604      	mov	r4, r0
 8002acc:	f7ff fff0 	bl	8002ab0 <__sinit_lock_acquire>
 8002ad0:	69a3      	ldr	r3, [r4, #24]
 8002ad2:	b11b      	cbz	r3, 8002adc <__sinit+0x14>
 8002ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ad8:	f7ff bff0 	b.w	8002abc <__sinit_lock_release>
 8002adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <__sinit+0x68>)
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <__sinit+0x6c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	bf08      	it	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	4620      	mov	r0, r4
 8002af2:	bf08      	it	eq
 8002af4:	61a3      	streq	r3, [r4, #24]
 8002af6:	f000 f81f 	bl	8002b38 <__sfp>
 8002afa:	6060      	str	r0, [r4, #4]
 8002afc:	4620      	mov	r0, r4
 8002afe:	f000 f81b 	bl	8002b38 <__sfp>
 8002b02:	60a0      	str	r0, [r4, #8]
 8002b04:	4620      	mov	r0, r4
 8002b06:	f000 f817 	bl	8002b38 <__sfp>
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	60e0      	str	r0, [r4, #12]
 8002b10:	6860      	ldr	r0, [r4, #4]
 8002b12:	f7ff ff81 	bl	8002a18 <std>
 8002b16:	2201      	movs	r2, #1
 8002b18:	2109      	movs	r1, #9
 8002b1a:	68a0      	ldr	r0, [r4, #8]
 8002b1c:	f7ff ff7c 	bl	8002a18 <std>
 8002b20:	2202      	movs	r2, #2
 8002b22:	2112      	movs	r1, #18
 8002b24:	68e0      	ldr	r0, [r4, #12]
 8002b26:	f7ff ff77 	bl	8002a18 <std>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61a3      	str	r3, [r4, #24]
 8002b2e:	e7d1      	b.n	8002ad4 <__sinit+0xc>
 8002b30:	08003960 	.word	0x08003960
 8002b34:	08002a61 	.word	0x08002a61

08002b38 <__sfp>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	4607      	mov	r7, r0
 8002b3c:	f7ff ffac 	bl	8002a98 <__sfp_lock_acquire>
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <__sfp+0x84>)
 8002b42:	681e      	ldr	r6, [r3, #0]
 8002b44:	69b3      	ldr	r3, [r6, #24]
 8002b46:	b913      	cbnz	r3, 8002b4e <__sfp+0x16>
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f7ff ffbd 	bl	8002ac8 <__sinit>
 8002b4e:	3648      	adds	r6, #72	; 0x48
 8002b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	d503      	bpl.n	8002b60 <__sfp+0x28>
 8002b58:	6833      	ldr	r3, [r6, #0]
 8002b5a:	b30b      	cbz	r3, 8002ba0 <__sfp+0x68>
 8002b5c:	6836      	ldr	r6, [r6, #0]
 8002b5e:	e7f7      	b.n	8002b50 <__sfp+0x18>
 8002b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b64:	b9d5      	cbnz	r5, 8002b9c <__sfp+0x64>
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <__sfp+0x88>)
 8002b68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b6c:	60e3      	str	r3, [r4, #12]
 8002b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8002b70:	f000 f847 	bl	8002c02 <__retarget_lock_init_recursive>
 8002b74:	f7ff ff96 	bl	8002aa4 <__sfp_lock_release>
 8002b78:	2208      	movs	r2, #8
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b84:	6025      	str	r5, [r4, #0]
 8002b86:	61a5      	str	r5, [r4, #24]
 8002b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b8c:	f7ff ff24 	bl	80029d8 <memset>
 8002b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b98:	4620      	mov	r0, r4
 8002b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b9c:	3468      	adds	r4, #104	; 0x68
 8002b9e:	e7d9      	b.n	8002b54 <__sfp+0x1c>
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	f7ff ff62 	bl	8002a6c <__sfmoreglue>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	6030      	str	r0, [r6, #0]
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d1d5      	bne.n	8002b5c <__sfp+0x24>
 8002bb0:	f7ff ff78 	bl	8002aa4 <__sfp_lock_release>
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	e7ee      	b.n	8002b98 <__sfp+0x60>
 8002bba:	bf00      	nop
 8002bbc:	08003960 	.word	0x08003960
 8002bc0:	ffff0001 	.word	0xffff0001

08002bc4 <_fwalk_reent>:
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	4606      	mov	r6, r0
 8002bca:	4688      	mov	r8, r1
 8002bcc:	2700      	movs	r7, #0
 8002bce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8002bda:	d505      	bpl.n	8002be8 <_fwalk_reent+0x24>
 8002bdc:	6824      	ldr	r4, [r4, #0]
 8002bde:	2c00      	cmp	r4, #0
 8002be0:	d1f7      	bne.n	8002bd2 <_fwalk_reent+0xe>
 8002be2:	4638      	mov	r0, r7
 8002be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002be8:	89ab      	ldrh	r3, [r5, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d907      	bls.n	8002bfe <_fwalk_reent+0x3a>
 8002bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	d003      	beq.n	8002bfe <_fwalk_reent+0x3a>
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	47c0      	blx	r8
 8002bfc:	4307      	orrs	r7, r0
 8002bfe:	3568      	adds	r5, #104	; 0x68
 8002c00:	e7e9      	b.n	8002bd6 <_fwalk_reent+0x12>

08002c02 <__retarget_lock_init_recursive>:
 8002c02:	4770      	bx	lr

08002c04 <__retarget_lock_acquire_recursive>:
 8002c04:	4770      	bx	lr

08002c06 <__retarget_lock_release_recursive>:
 8002c06:	4770      	bx	lr

08002c08 <_malloc_r>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	1ccd      	adds	r5, r1, #3
 8002c0c:	f025 0503 	bic.w	r5, r5, #3
 8002c10:	3508      	adds	r5, #8
 8002c12:	2d0c      	cmp	r5, #12
 8002c14:	bf38      	it	cc
 8002c16:	250c      	movcc	r5, #12
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	db01      	blt.n	8002c22 <_malloc_r+0x1a>
 8002c1e:	42a9      	cmp	r1, r5
 8002c20:	d903      	bls.n	8002c2a <_malloc_r+0x22>
 8002c22:	230c      	movs	r3, #12
 8002c24:	6033      	str	r3, [r6, #0]
 8002c26:	2000      	movs	r0, #0
 8002c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2a:	f000 fdb1 	bl	8003790 <__malloc_lock>
 8002c2e:	4921      	ldr	r1, [pc, #132]	; (8002cb4 <_malloc_r+0xac>)
 8002c30:	680a      	ldr	r2, [r1, #0]
 8002c32:	4614      	mov	r4, r2
 8002c34:	b99c      	cbnz	r4, 8002c5e <_malloc_r+0x56>
 8002c36:	4f20      	ldr	r7, [pc, #128]	; (8002cb8 <_malloc_r+0xb0>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b923      	cbnz	r3, 8002c46 <_malloc_r+0x3e>
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f000 fb2a 	bl	8003298 <_sbrk_r>
 8002c44:	6038      	str	r0, [r7, #0]
 8002c46:	4629      	mov	r1, r5
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f000 fb25 	bl	8003298 <_sbrk_r>
 8002c4e:	1c43      	adds	r3, r0, #1
 8002c50:	d123      	bne.n	8002c9a <_malloc_r+0x92>
 8002c52:	230c      	movs	r3, #12
 8002c54:	4630      	mov	r0, r6
 8002c56:	6033      	str	r3, [r6, #0]
 8002c58:	f000 fda0 	bl	800379c <__malloc_unlock>
 8002c5c:	e7e3      	b.n	8002c26 <_malloc_r+0x1e>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	1b5b      	subs	r3, r3, r5
 8002c62:	d417      	bmi.n	8002c94 <_malloc_r+0x8c>
 8002c64:	2b0b      	cmp	r3, #11
 8002c66:	d903      	bls.n	8002c70 <_malloc_r+0x68>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	441c      	add	r4, r3
 8002c6c:	6025      	str	r5, [r4, #0]
 8002c6e:	e004      	b.n	8002c7a <_malloc_r+0x72>
 8002c70:	6863      	ldr	r3, [r4, #4]
 8002c72:	42a2      	cmp	r2, r4
 8002c74:	bf0c      	ite	eq
 8002c76:	600b      	streq	r3, [r1, #0]
 8002c78:	6053      	strne	r3, [r2, #4]
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f000 fd8e 	bl	800379c <__malloc_unlock>
 8002c80:	f104 000b 	add.w	r0, r4, #11
 8002c84:	1d23      	adds	r3, r4, #4
 8002c86:	f020 0007 	bic.w	r0, r0, #7
 8002c8a:	1ac2      	subs	r2, r0, r3
 8002c8c:	d0cc      	beq.n	8002c28 <_malloc_r+0x20>
 8002c8e:	1a1b      	subs	r3, r3, r0
 8002c90:	50a3      	str	r3, [r4, r2]
 8002c92:	e7c9      	b.n	8002c28 <_malloc_r+0x20>
 8002c94:	4622      	mov	r2, r4
 8002c96:	6864      	ldr	r4, [r4, #4]
 8002c98:	e7cc      	b.n	8002c34 <_malloc_r+0x2c>
 8002c9a:	1cc4      	adds	r4, r0, #3
 8002c9c:	f024 0403 	bic.w	r4, r4, #3
 8002ca0:	42a0      	cmp	r0, r4
 8002ca2:	d0e3      	beq.n	8002c6c <_malloc_r+0x64>
 8002ca4:	1a21      	subs	r1, r4, r0
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f000 faf6 	bl	8003298 <_sbrk_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	d1dd      	bne.n	8002c6c <_malloc_r+0x64>
 8002cb0:	e7cf      	b.n	8002c52 <_malloc_r+0x4a>
 8002cb2:	bf00      	nop
 8002cb4:	200000a4 	.word	0x200000a4
 8002cb8:	200000a8 	.word	0x200000a8

08002cbc <__sfputc_r>:
 8002cbc:	6893      	ldr	r3, [r2, #8]
 8002cbe:	b410      	push	{r4}
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	6093      	str	r3, [r2, #8]
 8002cc6:	da07      	bge.n	8002cd8 <__sfputc_r+0x1c>
 8002cc8:	6994      	ldr	r4, [r2, #24]
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	db01      	blt.n	8002cd2 <__sfputc_r+0x16>
 8002cce:	290a      	cmp	r1, #10
 8002cd0:	d102      	bne.n	8002cd8 <__sfputc_r+0x1c>
 8002cd2:	bc10      	pop	{r4}
 8002cd4:	f000 bb34 	b.w	8003340 <__swbuf_r>
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	1c58      	adds	r0, r3, #1
 8002cdc:	6010      	str	r0, [r2, #0]
 8002cde:	7019      	strb	r1, [r3, #0]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	bc10      	pop	{r4}
 8002ce4:	4770      	bx	lr

08002ce6 <__sfputs_r>:
 8002ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce8:	4606      	mov	r6, r0
 8002cea:	460f      	mov	r7, r1
 8002cec:	4614      	mov	r4, r2
 8002cee:	18d5      	adds	r5, r2, r3
 8002cf0:	42ac      	cmp	r4, r5
 8002cf2:	d101      	bne.n	8002cf8 <__sfputs_r+0x12>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e007      	b.n	8002d08 <__sfputs_r+0x22>
 8002cf8:	463a      	mov	r2, r7
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d00:	f7ff ffdc 	bl	8002cbc <__sfputc_r>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d1f3      	bne.n	8002cf0 <__sfputs_r+0xa>
 8002d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d0c <_vfiprintf_r>:
 8002d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d10:	460d      	mov	r5, r1
 8002d12:	4614      	mov	r4, r2
 8002d14:	4698      	mov	r8, r3
 8002d16:	4606      	mov	r6, r0
 8002d18:	b09d      	sub	sp, #116	; 0x74
 8002d1a:	b118      	cbz	r0, 8002d24 <_vfiprintf_r+0x18>
 8002d1c:	6983      	ldr	r3, [r0, #24]
 8002d1e:	b90b      	cbnz	r3, 8002d24 <_vfiprintf_r+0x18>
 8002d20:	f7ff fed2 	bl	8002ac8 <__sinit>
 8002d24:	4b89      	ldr	r3, [pc, #548]	; (8002f4c <_vfiprintf_r+0x240>)
 8002d26:	429d      	cmp	r5, r3
 8002d28:	d11b      	bne.n	8002d62 <_vfiprintf_r+0x56>
 8002d2a:	6875      	ldr	r5, [r6, #4]
 8002d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d2e:	07d9      	lsls	r1, r3, #31
 8002d30:	d405      	bmi.n	8002d3e <_vfiprintf_r+0x32>
 8002d32:	89ab      	ldrh	r3, [r5, #12]
 8002d34:	059a      	lsls	r2, r3, #22
 8002d36:	d402      	bmi.n	8002d3e <_vfiprintf_r+0x32>
 8002d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d3a:	f7ff ff63 	bl	8002c04 <__retarget_lock_acquire_recursive>
 8002d3e:	89ab      	ldrh	r3, [r5, #12]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	d501      	bpl.n	8002d48 <_vfiprintf_r+0x3c>
 8002d44:	692b      	ldr	r3, [r5, #16]
 8002d46:	b9eb      	cbnz	r3, 8002d84 <_vfiprintf_r+0x78>
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f000 fb5c 	bl	8003408 <__swsetup_r>
 8002d50:	b1c0      	cbz	r0, 8002d84 <_vfiprintf_r+0x78>
 8002d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d54:	07dc      	lsls	r4, r3, #31
 8002d56:	d50e      	bpl.n	8002d76 <_vfiprintf_r+0x6a>
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	b01d      	add	sp, #116	; 0x74
 8002d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d62:	4b7b      	ldr	r3, [pc, #492]	; (8002f50 <_vfiprintf_r+0x244>)
 8002d64:	429d      	cmp	r5, r3
 8002d66:	d101      	bne.n	8002d6c <_vfiprintf_r+0x60>
 8002d68:	68b5      	ldr	r5, [r6, #8]
 8002d6a:	e7df      	b.n	8002d2c <_vfiprintf_r+0x20>
 8002d6c:	4b79      	ldr	r3, [pc, #484]	; (8002f54 <_vfiprintf_r+0x248>)
 8002d6e:	429d      	cmp	r5, r3
 8002d70:	bf08      	it	eq
 8002d72:	68f5      	ldreq	r5, [r6, #12]
 8002d74:	e7da      	b.n	8002d2c <_vfiprintf_r+0x20>
 8002d76:	89ab      	ldrh	r3, [r5, #12]
 8002d78:	0598      	lsls	r0, r3, #22
 8002d7a:	d4ed      	bmi.n	8002d58 <_vfiprintf_r+0x4c>
 8002d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d7e:	f7ff ff42 	bl	8002c06 <__retarget_lock_release_recursive>
 8002d82:	e7e9      	b.n	8002d58 <_vfiprintf_r+0x4c>
 8002d84:	2300      	movs	r3, #0
 8002d86:	9309      	str	r3, [sp, #36]	; 0x24
 8002d88:	2320      	movs	r3, #32
 8002d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d8e:	2330      	movs	r3, #48	; 0x30
 8002d90:	f04f 0901 	mov.w	r9, #1
 8002d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f58 <_vfiprintf_r+0x24c>
 8002d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002da0:	4623      	mov	r3, r4
 8002da2:	469a      	mov	sl, r3
 8002da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002da8:	b10a      	cbz	r2, 8002dae <_vfiprintf_r+0xa2>
 8002daa:	2a25      	cmp	r2, #37	; 0x25
 8002dac:	d1f9      	bne.n	8002da2 <_vfiprintf_r+0x96>
 8002dae:	ebba 0b04 	subs.w	fp, sl, r4
 8002db2:	d00b      	beq.n	8002dcc <_vfiprintf_r+0xc0>
 8002db4:	465b      	mov	r3, fp
 8002db6:	4622      	mov	r2, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f7ff ff93 	bl	8002ce6 <__sfputs_r>
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	f000 80aa 	beq.w	8002f1a <_vfiprintf_r+0x20e>
 8002dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dc8:	445a      	add	r2, fp
 8002dca:	9209      	str	r2, [sp, #36]	; 0x24
 8002dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a2 	beq.w	8002f1a <_vfiprintf_r+0x20e>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de0:	f10a 0a01 	add.w	sl, sl, #1
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	9307      	str	r3, [sp, #28]
 8002de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dec:	931a      	str	r3, [sp, #104]	; 0x68
 8002dee:	4654      	mov	r4, sl
 8002df0:	2205      	movs	r2, #5
 8002df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df6:	4858      	ldr	r0, [pc, #352]	; (8002f58 <_vfiprintf_r+0x24c>)
 8002df8:	f000 fcbc 	bl	8003774 <memchr>
 8002dfc:	9a04      	ldr	r2, [sp, #16]
 8002dfe:	b9d8      	cbnz	r0, 8002e38 <_vfiprintf_r+0x12c>
 8002e00:	06d1      	lsls	r1, r2, #27
 8002e02:	bf44      	itt	mi
 8002e04:	2320      	movmi	r3, #32
 8002e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e0a:	0713      	lsls	r3, r2, #28
 8002e0c:	bf44      	itt	mi
 8002e0e:	232b      	movmi	r3, #43	; 0x2b
 8002e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e14:	f89a 3000 	ldrb.w	r3, [sl]
 8002e18:	2b2a      	cmp	r3, #42	; 0x2a
 8002e1a:	d015      	beq.n	8002e48 <_vfiprintf_r+0x13c>
 8002e1c:	4654      	mov	r4, sl
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f04f 0c0a 	mov.w	ip, #10
 8002e24:	9a07      	ldr	r2, [sp, #28]
 8002e26:	4621      	mov	r1, r4
 8002e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e2c:	3b30      	subs	r3, #48	; 0x30
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	d94e      	bls.n	8002ed0 <_vfiprintf_r+0x1c4>
 8002e32:	b1b0      	cbz	r0, 8002e62 <_vfiprintf_r+0x156>
 8002e34:	9207      	str	r2, [sp, #28]
 8002e36:	e014      	b.n	8002e62 <_vfiprintf_r+0x156>
 8002e38:	eba0 0308 	sub.w	r3, r0, r8
 8002e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8002e40:	4313      	orrs	r3, r2
 8002e42:	46a2      	mov	sl, r4
 8002e44:	9304      	str	r3, [sp, #16]
 8002e46:	e7d2      	b.n	8002dee <_vfiprintf_r+0xe2>
 8002e48:	9b03      	ldr	r3, [sp, #12]
 8002e4a:	1d19      	adds	r1, r3, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	9103      	str	r1, [sp, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bfbb      	ittet	lt
 8002e54:	425b      	neglt	r3, r3
 8002e56:	f042 0202 	orrlt.w	r2, r2, #2
 8002e5a:	9307      	strge	r3, [sp, #28]
 8002e5c:	9307      	strlt	r3, [sp, #28]
 8002e5e:	bfb8      	it	lt
 8002e60:	9204      	strlt	r2, [sp, #16]
 8002e62:	7823      	ldrb	r3, [r4, #0]
 8002e64:	2b2e      	cmp	r3, #46	; 0x2e
 8002e66:	d10c      	bne.n	8002e82 <_vfiprintf_r+0x176>
 8002e68:	7863      	ldrb	r3, [r4, #1]
 8002e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6c:	d135      	bne.n	8002eda <_vfiprintf_r+0x1ce>
 8002e6e:	9b03      	ldr	r3, [sp, #12]
 8002e70:	3402      	adds	r4, #2
 8002e72:	1d1a      	adds	r2, r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	9203      	str	r2, [sp, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bfb8      	it	lt
 8002e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e80:	9305      	str	r3, [sp, #20]
 8002e82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002f68 <_vfiprintf_r+0x25c>
 8002e86:	2203      	movs	r2, #3
 8002e88:	4650      	mov	r0, sl
 8002e8a:	7821      	ldrb	r1, [r4, #0]
 8002e8c:	f000 fc72 	bl	8003774 <memchr>
 8002e90:	b140      	cbz	r0, 8002ea4 <_vfiprintf_r+0x198>
 8002e92:	2340      	movs	r3, #64	; 0x40
 8002e94:	eba0 000a 	sub.w	r0, r0, sl
 8002e98:	fa03 f000 	lsl.w	r0, r3, r0
 8002e9c:	9b04      	ldr	r3, [sp, #16]
 8002e9e:	3401      	adds	r4, #1
 8002ea0:	4303      	orrs	r3, r0
 8002ea2:	9304      	str	r3, [sp, #16]
 8002ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	482c      	ldr	r0, [pc, #176]	; (8002f5c <_vfiprintf_r+0x250>)
 8002eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eb0:	f000 fc60 	bl	8003774 <memchr>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d03f      	beq.n	8002f38 <_vfiprintf_r+0x22c>
 8002eb8:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <_vfiprintf_r+0x254>)
 8002eba:	bb1b      	cbnz	r3, 8002f04 <_vfiprintf_r+0x1f8>
 8002ebc:	9b03      	ldr	r3, [sp, #12]
 8002ebe:	3307      	adds	r3, #7
 8002ec0:	f023 0307 	bic.w	r3, r3, #7
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	9303      	str	r3, [sp, #12]
 8002ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eca:	443b      	add	r3, r7
 8002ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ece:	e767      	b.n	8002da0 <_vfiprintf_r+0x94>
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ed8:	e7a5      	b.n	8002e26 <_vfiprintf_r+0x11a>
 8002eda:	2300      	movs	r3, #0
 8002edc:	f04f 0c0a 	mov.w	ip, #10
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	3401      	adds	r4, #1
 8002ee4:	9305      	str	r3, [sp, #20]
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eec:	3a30      	subs	r2, #48	; 0x30
 8002eee:	2a09      	cmp	r2, #9
 8002ef0:	d903      	bls.n	8002efa <_vfiprintf_r+0x1ee>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0c5      	beq.n	8002e82 <_vfiprintf_r+0x176>
 8002ef6:	9105      	str	r1, [sp, #20]
 8002ef8:	e7c3      	b.n	8002e82 <_vfiprintf_r+0x176>
 8002efa:	4604      	mov	r4, r0
 8002efc:	2301      	movs	r3, #1
 8002efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f02:	e7f0      	b.n	8002ee6 <_vfiprintf_r+0x1da>
 8002f04:	ab03      	add	r3, sp, #12
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	462a      	mov	r2, r5
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_vfiprintf_r+0x258>)
 8002f0e:	a904      	add	r1, sp, #16
 8002f10:	f3af 8000 	nop.w
 8002f14:	4607      	mov	r7, r0
 8002f16:	1c78      	adds	r0, r7, #1
 8002f18:	d1d6      	bne.n	8002ec8 <_vfiprintf_r+0x1bc>
 8002f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f1c:	07d9      	lsls	r1, r3, #31
 8002f1e:	d405      	bmi.n	8002f2c <_vfiprintf_r+0x220>
 8002f20:	89ab      	ldrh	r3, [r5, #12]
 8002f22:	059a      	lsls	r2, r3, #22
 8002f24:	d402      	bmi.n	8002f2c <_vfiprintf_r+0x220>
 8002f26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f28:	f7ff fe6d 	bl	8002c06 <__retarget_lock_release_recursive>
 8002f2c:	89ab      	ldrh	r3, [r5, #12]
 8002f2e:	065b      	lsls	r3, r3, #25
 8002f30:	f53f af12 	bmi.w	8002d58 <_vfiprintf_r+0x4c>
 8002f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f36:	e711      	b.n	8002d5c <_vfiprintf_r+0x50>
 8002f38:	ab03      	add	r3, sp, #12
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	462a      	mov	r2, r5
 8002f3e:	4630      	mov	r0, r6
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <_vfiprintf_r+0x258>)
 8002f42:	a904      	add	r1, sp, #16
 8002f44:	f000 f882 	bl	800304c <_printf_i>
 8002f48:	e7e4      	b.n	8002f14 <_vfiprintf_r+0x208>
 8002f4a:	bf00      	nop
 8002f4c:	08003984 	.word	0x08003984
 8002f50:	080039a4 	.word	0x080039a4
 8002f54:	08003964 	.word	0x08003964
 8002f58:	080039c4 	.word	0x080039c4
 8002f5c:	080039ce 	.word	0x080039ce
 8002f60:	00000000 	.word	0x00000000
 8002f64:	08002ce7 	.word	0x08002ce7
 8002f68:	080039ca 	.word	0x080039ca

08002f6c <_printf_common>:
 8002f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	4616      	mov	r6, r2
 8002f72:	4699      	mov	r9, r3
 8002f74:	688a      	ldr	r2, [r1, #8]
 8002f76:	690b      	ldr	r3, [r1, #16]
 8002f78:	4607      	mov	r7, r0
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	bfb8      	it	lt
 8002f7e:	4613      	movlt	r3, r2
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f86:	460c      	mov	r4, r1
 8002f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f8c:	b10a      	cbz	r2, 8002f92 <_printf_common+0x26>
 8002f8e:	3301      	adds	r3, #1
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	0699      	lsls	r1, r3, #26
 8002f96:	bf42      	ittt	mi
 8002f98:	6833      	ldrmi	r3, [r6, #0]
 8002f9a:	3302      	addmi	r3, #2
 8002f9c:	6033      	strmi	r3, [r6, #0]
 8002f9e:	6825      	ldr	r5, [r4, #0]
 8002fa0:	f015 0506 	ands.w	r5, r5, #6
 8002fa4:	d106      	bne.n	8002fb4 <_printf_common+0x48>
 8002fa6:	f104 0a19 	add.w	sl, r4, #25
 8002faa:	68e3      	ldr	r3, [r4, #12]
 8002fac:	6832      	ldr	r2, [r6, #0]
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	42ab      	cmp	r3, r5
 8002fb2:	dc28      	bgt.n	8003006 <_printf_common+0x9a>
 8002fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fb8:	1e13      	subs	r3, r2, #0
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	bf18      	it	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	0692      	lsls	r2, r2, #26
 8002fc2:	d42d      	bmi.n	8003020 <_printf_common+0xb4>
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fcc:	47c0      	blx	r8
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d020      	beq.n	8003014 <_printf_common+0xa8>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	68e5      	ldr	r5, [r4, #12]
 8002fd6:	f003 0306 	and.w	r3, r3, #6
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	bf18      	it	ne
 8002fde:	2500      	movne	r5, #0
 8002fe0:	6832      	ldr	r2, [r6, #0]
 8002fe2:	f04f 0600 	mov.w	r6, #0
 8002fe6:	68a3      	ldr	r3, [r4, #8]
 8002fe8:	bf08      	it	eq
 8002fea:	1aad      	subeq	r5, r5, r2
 8002fec:	6922      	ldr	r2, [r4, #16]
 8002fee:	bf08      	it	eq
 8002ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bfc4      	itt	gt
 8002ff8:	1a9b      	subgt	r3, r3, r2
 8002ffa:	18ed      	addgt	r5, r5, r3
 8002ffc:	341a      	adds	r4, #26
 8002ffe:	42b5      	cmp	r5, r6
 8003000:	d11a      	bne.n	8003038 <_printf_common+0xcc>
 8003002:	2000      	movs	r0, #0
 8003004:	e008      	b.n	8003018 <_printf_common+0xac>
 8003006:	2301      	movs	r3, #1
 8003008:	4652      	mov	r2, sl
 800300a:	4649      	mov	r1, r9
 800300c:	4638      	mov	r0, r7
 800300e:	47c0      	blx	r8
 8003010:	3001      	adds	r0, #1
 8003012:	d103      	bne.n	800301c <_printf_common+0xb0>
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800301c:	3501      	adds	r5, #1
 800301e:	e7c4      	b.n	8002faa <_printf_common+0x3e>
 8003020:	2030      	movs	r0, #48	; 0x30
 8003022:	18e1      	adds	r1, r4, r3
 8003024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800302e:	4422      	add	r2, r4
 8003030:	3302      	adds	r3, #2
 8003032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003036:	e7c5      	b.n	8002fc4 <_printf_common+0x58>
 8003038:	2301      	movs	r3, #1
 800303a:	4622      	mov	r2, r4
 800303c:	4649      	mov	r1, r9
 800303e:	4638      	mov	r0, r7
 8003040:	47c0      	blx	r8
 8003042:	3001      	adds	r0, #1
 8003044:	d0e6      	beq.n	8003014 <_printf_common+0xa8>
 8003046:	3601      	adds	r6, #1
 8003048:	e7d9      	b.n	8002ffe <_printf_common+0x92>
	...

0800304c <_printf_i>:
 800304c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	460c      	mov	r4, r1
 8003052:	7e27      	ldrb	r7, [r4, #24]
 8003054:	4691      	mov	r9, r2
 8003056:	2f78      	cmp	r7, #120	; 0x78
 8003058:	4680      	mov	r8, r0
 800305a:	469a      	mov	sl, r3
 800305c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800305e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003062:	d807      	bhi.n	8003074 <_printf_i+0x28>
 8003064:	2f62      	cmp	r7, #98	; 0x62
 8003066:	d80a      	bhi.n	800307e <_printf_i+0x32>
 8003068:	2f00      	cmp	r7, #0
 800306a:	f000 80d9 	beq.w	8003220 <_printf_i+0x1d4>
 800306e:	2f58      	cmp	r7, #88	; 0x58
 8003070:	f000 80a4 	beq.w	80031bc <_printf_i+0x170>
 8003074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800307c:	e03a      	b.n	80030f4 <_printf_i+0xa8>
 800307e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003082:	2b15      	cmp	r3, #21
 8003084:	d8f6      	bhi.n	8003074 <_printf_i+0x28>
 8003086:	a001      	add	r0, pc, #4	; (adr r0, 800308c <_printf_i+0x40>)
 8003088:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800308c:	080030e5 	.word	0x080030e5
 8003090:	080030f9 	.word	0x080030f9
 8003094:	08003075 	.word	0x08003075
 8003098:	08003075 	.word	0x08003075
 800309c:	08003075 	.word	0x08003075
 80030a0:	08003075 	.word	0x08003075
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	08003075 	.word	0x08003075
 80030ac:	08003075 	.word	0x08003075
 80030b0:	08003075 	.word	0x08003075
 80030b4:	08003075 	.word	0x08003075
 80030b8:	08003207 	.word	0x08003207
 80030bc:	08003129 	.word	0x08003129
 80030c0:	080031e9 	.word	0x080031e9
 80030c4:	08003075 	.word	0x08003075
 80030c8:	08003075 	.word	0x08003075
 80030cc:	08003229 	.word	0x08003229
 80030d0:	08003075 	.word	0x08003075
 80030d4:	08003129 	.word	0x08003129
 80030d8:	08003075 	.word	0x08003075
 80030dc:	08003075 	.word	0x08003075
 80030e0:	080031f1 	.word	0x080031f1
 80030e4:	680b      	ldr	r3, [r1, #0]
 80030e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	600a      	str	r2, [r1, #0]
 80030f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0a4      	b.n	8003242 <_printf_i+0x1f6>
 80030f8:	6825      	ldr	r5, [r4, #0]
 80030fa:	6808      	ldr	r0, [r1, #0]
 80030fc:	062e      	lsls	r6, r5, #24
 80030fe:	f100 0304 	add.w	r3, r0, #4
 8003102:	d50a      	bpl.n	800311a <_printf_i+0xce>
 8003104:	6805      	ldr	r5, [r0, #0]
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	2d00      	cmp	r5, #0
 800310a:	da03      	bge.n	8003114 <_printf_i+0xc8>
 800310c:	232d      	movs	r3, #45	; 0x2d
 800310e:	426d      	negs	r5, r5
 8003110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003114:	230a      	movs	r3, #10
 8003116:	485e      	ldr	r0, [pc, #376]	; (8003290 <_printf_i+0x244>)
 8003118:	e019      	b.n	800314e <_printf_i+0x102>
 800311a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800311e:	6805      	ldr	r5, [r0, #0]
 8003120:	600b      	str	r3, [r1, #0]
 8003122:	bf18      	it	ne
 8003124:	b22d      	sxthne	r5, r5
 8003126:	e7ef      	b.n	8003108 <_printf_i+0xbc>
 8003128:	680b      	ldr	r3, [r1, #0]
 800312a:	6825      	ldr	r5, [r4, #0]
 800312c:	1d18      	adds	r0, r3, #4
 800312e:	6008      	str	r0, [r1, #0]
 8003130:	0628      	lsls	r0, r5, #24
 8003132:	d501      	bpl.n	8003138 <_printf_i+0xec>
 8003134:	681d      	ldr	r5, [r3, #0]
 8003136:	e002      	b.n	800313e <_printf_i+0xf2>
 8003138:	0669      	lsls	r1, r5, #25
 800313a:	d5fb      	bpl.n	8003134 <_printf_i+0xe8>
 800313c:	881d      	ldrh	r5, [r3, #0]
 800313e:	2f6f      	cmp	r7, #111	; 0x6f
 8003140:	bf0c      	ite	eq
 8003142:	2308      	moveq	r3, #8
 8003144:	230a      	movne	r3, #10
 8003146:	4852      	ldr	r0, [pc, #328]	; (8003290 <_printf_i+0x244>)
 8003148:	2100      	movs	r1, #0
 800314a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800314e:	6866      	ldr	r6, [r4, #4]
 8003150:	2e00      	cmp	r6, #0
 8003152:	bfa8      	it	ge
 8003154:	6821      	ldrge	r1, [r4, #0]
 8003156:	60a6      	str	r6, [r4, #8]
 8003158:	bfa4      	itt	ge
 800315a:	f021 0104 	bicge.w	r1, r1, #4
 800315e:	6021      	strge	r1, [r4, #0]
 8003160:	b90d      	cbnz	r5, 8003166 <_printf_i+0x11a>
 8003162:	2e00      	cmp	r6, #0
 8003164:	d04d      	beq.n	8003202 <_printf_i+0x1b6>
 8003166:	4616      	mov	r6, r2
 8003168:	fbb5 f1f3 	udiv	r1, r5, r3
 800316c:	fb03 5711 	mls	r7, r3, r1, r5
 8003170:	5dc7      	ldrb	r7, [r0, r7]
 8003172:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003176:	462f      	mov	r7, r5
 8003178:	42bb      	cmp	r3, r7
 800317a:	460d      	mov	r5, r1
 800317c:	d9f4      	bls.n	8003168 <_printf_i+0x11c>
 800317e:	2b08      	cmp	r3, #8
 8003180:	d10b      	bne.n	800319a <_printf_i+0x14e>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	07df      	lsls	r7, r3, #31
 8003186:	d508      	bpl.n	800319a <_printf_i+0x14e>
 8003188:	6923      	ldr	r3, [r4, #16]
 800318a:	6861      	ldr	r1, [r4, #4]
 800318c:	4299      	cmp	r1, r3
 800318e:	bfde      	ittt	le
 8003190:	2330      	movle	r3, #48	; 0x30
 8003192:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003196:	f106 36ff 	addle.w	r6, r6, #4294967295
 800319a:	1b92      	subs	r2, r2, r6
 800319c:	6122      	str	r2, [r4, #16]
 800319e:	464b      	mov	r3, r9
 80031a0:	4621      	mov	r1, r4
 80031a2:	4640      	mov	r0, r8
 80031a4:	f8cd a000 	str.w	sl, [sp]
 80031a8:	aa03      	add	r2, sp, #12
 80031aa:	f7ff fedf 	bl	8002f6c <_printf_common>
 80031ae:	3001      	adds	r0, #1
 80031b0:	d14c      	bne.n	800324c <_printf_i+0x200>
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295
 80031b6:	b004      	add	sp, #16
 80031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031bc:	4834      	ldr	r0, [pc, #208]	; (8003290 <_printf_i+0x244>)
 80031be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031c2:	680e      	ldr	r6, [r1, #0]
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80031ca:	061f      	lsls	r7, r3, #24
 80031cc:	600e      	str	r6, [r1, #0]
 80031ce:	d514      	bpl.n	80031fa <_printf_i+0x1ae>
 80031d0:	07d9      	lsls	r1, r3, #31
 80031d2:	bf44      	itt	mi
 80031d4:	f043 0320 	orrmi.w	r3, r3, #32
 80031d8:	6023      	strmi	r3, [r4, #0]
 80031da:	b91d      	cbnz	r5, 80031e4 <_printf_i+0x198>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	f023 0320 	bic.w	r3, r3, #32
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	2310      	movs	r3, #16
 80031e6:	e7af      	b.n	8003148 <_printf_i+0xfc>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	6023      	str	r3, [r4, #0]
 80031f0:	2378      	movs	r3, #120	; 0x78
 80031f2:	4828      	ldr	r0, [pc, #160]	; (8003294 <_printf_i+0x248>)
 80031f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031f8:	e7e3      	b.n	80031c2 <_printf_i+0x176>
 80031fa:	065e      	lsls	r6, r3, #25
 80031fc:	bf48      	it	mi
 80031fe:	b2ad      	uxthmi	r5, r5
 8003200:	e7e6      	b.n	80031d0 <_printf_i+0x184>
 8003202:	4616      	mov	r6, r2
 8003204:	e7bb      	b.n	800317e <_printf_i+0x132>
 8003206:	680b      	ldr	r3, [r1, #0]
 8003208:	6826      	ldr	r6, [r4, #0]
 800320a:	1d1d      	adds	r5, r3, #4
 800320c:	6960      	ldr	r0, [r4, #20]
 800320e:	600d      	str	r5, [r1, #0]
 8003210:	0635      	lsls	r5, r6, #24
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	d501      	bpl.n	800321a <_printf_i+0x1ce>
 8003216:	6018      	str	r0, [r3, #0]
 8003218:	e002      	b.n	8003220 <_printf_i+0x1d4>
 800321a:	0671      	lsls	r1, r6, #25
 800321c:	d5fb      	bpl.n	8003216 <_printf_i+0x1ca>
 800321e:	8018      	strh	r0, [r3, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	4616      	mov	r6, r2
 8003224:	6123      	str	r3, [r4, #16]
 8003226:	e7ba      	b.n	800319e <_printf_i+0x152>
 8003228:	680b      	ldr	r3, [r1, #0]
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	600a      	str	r2, [r1, #0]
 800322e:	681e      	ldr	r6, [r3, #0]
 8003230:	2100      	movs	r1, #0
 8003232:	4630      	mov	r0, r6
 8003234:	6862      	ldr	r2, [r4, #4]
 8003236:	f000 fa9d 	bl	8003774 <memchr>
 800323a:	b108      	cbz	r0, 8003240 <_printf_i+0x1f4>
 800323c:	1b80      	subs	r0, r0, r6
 800323e:	6060      	str	r0, [r4, #4]
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	6123      	str	r3, [r4, #16]
 8003244:	2300      	movs	r3, #0
 8003246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800324a:	e7a8      	b.n	800319e <_printf_i+0x152>
 800324c:	4632      	mov	r2, r6
 800324e:	4649      	mov	r1, r9
 8003250:	4640      	mov	r0, r8
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	47d0      	blx	sl
 8003256:	3001      	adds	r0, #1
 8003258:	d0ab      	beq.n	80031b2 <_printf_i+0x166>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	079b      	lsls	r3, r3, #30
 800325e:	d413      	bmi.n	8003288 <_printf_i+0x23c>
 8003260:	68e0      	ldr	r0, [r4, #12]
 8003262:	9b03      	ldr	r3, [sp, #12]
 8003264:	4298      	cmp	r0, r3
 8003266:	bfb8      	it	lt
 8003268:	4618      	movlt	r0, r3
 800326a:	e7a4      	b.n	80031b6 <_printf_i+0x16a>
 800326c:	2301      	movs	r3, #1
 800326e:	4632      	mov	r2, r6
 8003270:	4649      	mov	r1, r9
 8003272:	4640      	mov	r0, r8
 8003274:	47d0      	blx	sl
 8003276:	3001      	adds	r0, #1
 8003278:	d09b      	beq.n	80031b2 <_printf_i+0x166>
 800327a:	3501      	adds	r5, #1
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	9903      	ldr	r1, [sp, #12]
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	42ab      	cmp	r3, r5
 8003284:	dcf2      	bgt.n	800326c <_printf_i+0x220>
 8003286:	e7eb      	b.n	8003260 <_printf_i+0x214>
 8003288:	2500      	movs	r5, #0
 800328a:	f104 0619 	add.w	r6, r4, #25
 800328e:	e7f5      	b.n	800327c <_printf_i+0x230>
 8003290:	080039d5 	.word	0x080039d5
 8003294:	080039e6 	.word	0x080039e6

08003298 <_sbrk_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	2300      	movs	r3, #0
 800329c:	4d05      	ldr	r5, [pc, #20]	; (80032b4 <_sbrk_r+0x1c>)
 800329e:	4604      	mov	r4, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	602b      	str	r3, [r5, #0]
 80032a4:	f7fd fd14 	bl	8000cd0 <_sbrk>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d102      	bne.n	80032b2 <_sbrk_r+0x1a>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	b103      	cbz	r3, 80032b2 <_sbrk_r+0x1a>
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	200004bc 	.word	0x200004bc

080032b8 <__sread>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	460c      	mov	r4, r1
 80032bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c0:	f000 fabe 	bl	8003840 <_read_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	bfab      	itete	ge
 80032c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032ca:	89a3      	ldrhlt	r3, [r4, #12]
 80032cc:	181b      	addge	r3, r3, r0
 80032ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032d2:	bfac      	ite	ge
 80032d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80032d6:	81a3      	strhlt	r3, [r4, #12]
 80032d8:	bd10      	pop	{r4, pc}

080032da <__swrite>:
 80032da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032de:	461f      	mov	r7, r3
 80032e0:	898b      	ldrh	r3, [r1, #12]
 80032e2:	4605      	mov	r5, r0
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	460c      	mov	r4, r1
 80032e8:	4616      	mov	r6, r2
 80032ea:	d505      	bpl.n	80032f8 <__swrite+0x1e>
 80032ec:	2302      	movs	r3, #2
 80032ee:	2200      	movs	r2, #0
 80032f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f4:	f000 f9c8 	bl	8003688 <_lseek_r>
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	4632      	mov	r2, r6
 80032fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	4628      	mov	r0, r5
 8003304:	463b      	mov	r3, r7
 8003306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800330a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800330e:	f000 b869 	b.w	80033e4 <_write_r>

08003312 <__sseek>:
 8003312:	b510      	push	{r4, lr}
 8003314:	460c      	mov	r4, r1
 8003316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331a:	f000 f9b5 	bl	8003688 <_lseek_r>
 800331e:	1c43      	adds	r3, r0, #1
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	bf15      	itete	ne
 8003324:	6560      	strne	r0, [r4, #84]	; 0x54
 8003326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800332a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800332e:	81a3      	strheq	r3, [r4, #12]
 8003330:	bf18      	it	ne
 8003332:	81a3      	strhne	r3, [r4, #12]
 8003334:	bd10      	pop	{r4, pc}

08003336 <__sclose>:
 8003336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333a:	f000 b8d3 	b.w	80034e4 <_close_r>
	...

08003340 <__swbuf_r>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	460e      	mov	r6, r1
 8003344:	4614      	mov	r4, r2
 8003346:	4605      	mov	r5, r0
 8003348:	b118      	cbz	r0, 8003352 <__swbuf_r+0x12>
 800334a:	6983      	ldr	r3, [r0, #24]
 800334c:	b90b      	cbnz	r3, 8003352 <__swbuf_r+0x12>
 800334e:	f7ff fbbb 	bl	8002ac8 <__sinit>
 8003352:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <__swbuf_r+0x98>)
 8003354:	429c      	cmp	r4, r3
 8003356:	d12b      	bne.n	80033b0 <__swbuf_r+0x70>
 8003358:	686c      	ldr	r4, [r5, #4]
 800335a:	69a3      	ldr	r3, [r4, #24]
 800335c:	60a3      	str	r3, [r4, #8]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	071a      	lsls	r2, r3, #28
 8003362:	d52f      	bpl.n	80033c4 <__swbuf_r+0x84>
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	b36b      	cbz	r3, 80033c4 <__swbuf_r+0x84>
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	b2f6      	uxtb	r6, r6
 800336e:	1ac0      	subs	r0, r0, r3
 8003370:	6963      	ldr	r3, [r4, #20]
 8003372:	4637      	mov	r7, r6
 8003374:	4283      	cmp	r3, r0
 8003376:	dc04      	bgt.n	8003382 <__swbuf_r+0x42>
 8003378:	4621      	mov	r1, r4
 800337a:	4628      	mov	r0, r5
 800337c:	f000 f948 	bl	8003610 <_fflush_r>
 8003380:	bb30      	cbnz	r0, 80033d0 <__swbuf_r+0x90>
 8003382:	68a3      	ldr	r3, [r4, #8]
 8003384:	3001      	adds	r0, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	6022      	str	r2, [r4, #0]
 8003390:	701e      	strb	r6, [r3, #0]
 8003392:	6963      	ldr	r3, [r4, #20]
 8003394:	4283      	cmp	r3, r0
 8003396:	d004      	beq.n	80033a2 <__swbuf_r+0x62>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	07db      	lsls	r3, r3, #31
 800339c:	d506      	bpl.n	80033ac <__swbuf_r+0x6c>
 800339e:	2e0a      	cmp	r6, #10
 80033a0:	d104      	bne.n	80033ac <__swbuf_r+0x6c>
 80033a2:	4621      	mov	r1, r4
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 f933 	bl	8003610 <_fflush_r>
 80033aa:	b988      	cbnz	r0, 80033d0 <__swbuf_r+0x90>
 80033ac:	4638      	mov	r0, r7
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <__swbuf_r+0x9c>)
 80033b2:	429c      	cmp	r4, r3
 80033b4:	d101      	bne.n	80033ba <__swbuf_r+0x7a>
 80033b6:	68ac      	ldr	r4, [r5, #8]
 80033b8:	e7cf      	b.n	800335a <__swbuf_r+0x1a>
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <__swbuf_r+0xa0>)
 80033bc:	429c      	cmp	r4, r3
 80033be:	bf08      	it	eq
 80033c0:	68ec      	ldreq	r4, [r5, #12]
 80033c2:	e7ca      	b.n	800335a <__swbuf_r+0x1a>
 80033c4:	4621      	mov	r1, r4
 80033c6:	4628      	mov	r0, r5
 80033c8:	f000 f81e 	bl	8003408 <__swsetup_r>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d0cb      	beq.n	8003368 <__swbuf_r+0x28>
 80033d0:	f04f 37ff 	mov.w	r7, #4294967295
 80033d4:	e7ea      	b.n	80033ac <__swbuf_r+0x6c>
 80033d6:	bf00      	nop
 80033d8:	08003984 	.word	0x08003984
 80033dc:	080039a4 	.word	0x080039a4
 80033e0:	08003964 	.word	0x08003964

080033e4 <_write_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4604      	mov	r4, r0
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	2200      	movs	r2, #0
 80033ee:	4d05      	ldr	r5, [pc, #20]	; (8003404 <_write_r+0x20>)
 80033f0:	602a      	str	r2, [r5, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7fd fd0c 	bl	8000e10 <_write>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_write_r+0x1e>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_write_r+0x1e>
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	200004bc 	.word	0x200004bc

08003408 <__swsetup_r>:
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <__swsetup_r+0xcc>)
 800340a:	b570      	push	{r4, r5, r6, lr}
 800340c:	681d      	ldr	r5, [r3, #0]
 800340e:	4606      	mov	r6, r0
 8003410:	460c      	mov	r4, r1
 8003412:	b125      	cbz	r5, 800341e <__swsetup_r+0x16>
 8003414:	69ab      	ldr	r3, [r5, #24]
 8003416:	b913      	cbnz	r3, 800341e <__swsetup_r+0x16>
 8003418:	4628      	mov	r0, r5
 800341a:	f7ff fb55 	bl	8002ac8 <__sinit>
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <__swsetup_r+0xd0>)
 8003420:	429c      	cmp	r4, r3
 8003422:	d10f      	bne.n	8003444 <__swsetup_r+0x3c>
 8003424:	686c      	ldr	r4, [r5, #4]
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800342c:	0719      	lsls	r1, r3, #28
 800342e:	d42c      	bmi.n	800348a <__swsetup_r+0x82>
 8003430:	06dd      	lsls	r5, r3, #27
 8003432:	d411      	bmi.n	8003458 <__swsetup_r+0x50>
 8003434:	2309      	movs	r3, #9
 8003436:	6033      	str	r3, [r6, #0]
 8003438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	e03e      	b.n	80034c2 <__swsetup_r+0xba>
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <__swsetup_r+0xd4>)
 8003446:	429c      	cmp	r4, r3
 8003448:	d101      	bne.n	800344e <__swsetup_r+0x46>
 800344a:	68ac      	ldr	r4, [r5, #8]
 800344c:	e7eb      	b.n	8003426 <__swsetup_r+0x1e>
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <__swsetup_r+0xd8>)
 8003450:	429c      	cmp	r4, r3
 8003452:	bf08      	it	eq
 8003454:	68ec      	ldreq	r4, [r5, #12]
 8003456:	e7e6      	b.n	8003426 <__swsetup_r+0x1e>
 8003458:	0758      	lsls	r0, r3, #29
 800345a:	d512      	bpl.n	8003482 <__swsetup_r+0x7a>
 800345c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800345e:	b141      	cbz	r1, 8003472 <__swsetup_r+0x6a>
 8003460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003464:	4299      	cmp	r1, r3
 8003466:	d002      	beq.n	800346e <__swsetup_r+0x66>
 8003468:	4630      	mov	r0, r6
 800346a:	f000 f99d 	bl	80037a8 <_free_r>
 800346e:	2300      	movs	r3, #0
 8003470:	6363      	str	r3, [r4, #52]	; 0x34
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003478:	81a3      	strh	r3, [r4, #12]
 800347a:	2300      	movs	r3, #0
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	6923      	ldr	r3, [r4, #16]
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	81a3      	strh	r3, [r4, #12]
 800348a:	6923      	ldr	r3, [r4, #16]
 800348c:	b94b      	cbnz	r3, 80034a2 <__swsetup_r+0x9a>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d003      	beq.n	80034a2 <__swsetup_r+0x9a>
 800349a:	4621      	mov	r1, r4
 800349c:	4630      	mov	r0, r6
 800349e:	f000 f929 	bl	80036f4 <__smakebuf_r>
 80034a2:	89a0      	ldrh	r0, [r4, #12]
 80034a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a8:	f010 0301 	ands.w	r3, r0, #1
 80034ac:	d00a      	beq.n	80034c4 <__swsetup_r+0xbc>
 80034ae:	2300      	movs	r3, #0
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	6963      	ldr	r3, [r4, #20]
 80034b4:	425b      	negs	r3, r3
 80034b6:	61a3      	str	r3, [r4, #24]
 80034b8:	6923      	ldr	r3, [r4, #16]
 80034ba:	b943      	cbnz	r3, 80034ce <__swsetup_r+0xc6>
 80034bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034c0:	d1ba      	bne.n	8003438 <__swsetup_r+0x30>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	0781      	lsls	r1, r0, #30
 80034c6:	bf58      	it	pl
 80034c8:	6963      	ldrpl	r3, [r4, #20]
 80034ca:	60a3      	str	r3, [r4, #8]
 80034cc:	e7f4      	b.n	80034b8 <__swsetup_r+0xb0>
 80034ce:	2000      	movs	r0, #0
 80034d0:	e7f7      	b.n	80034c2 <__swsetup_r+0xba>
 80034d2:	bf00      	nop
 80034d4:	2000000c 	.word	0x2000000c
 80034d8:	08003984 	.word	0x08003984
 80034dc:	080039a4 	.word	0x080039a4
 80034e0:	08003964 	.word	0x08003964

080034e4 <_close_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	2300      	movs	r3, #0
 80034e8:	4d05      	ldr	r5, [pc, #20]	; (8003500 <_close_r+0x1c>)
 80034ea:	4604      	mov	r4, r0
 80034ec:	4608      	mov	r0, r1
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd fbbd 	bl	8000c6e <_close>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_close_r+0x1a>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_close_r+0x1a>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	200004bc 	.word	0x200004bc

08003504 <__sflush_r>:
 8003504:	898a      	ldrh	r2, [r1, #12]
 8003506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350a:	4605      	mov	r5, r0
 800350c:	0710      	lsls	r0, r2, #28
 800350e:	460c      	mov	r4, r1
 8003510:	d458      	bmi.n	80035c4 <__sflush_r+0xc0>
 8003512:	684b      	ldr	r3, [r1, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	dc05      	bgt.n	8003524 <__sflush_r+0x20>
 8003518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	dc02      	bgt.n	8003524 <__sflush_r+0x20>
 800351e:	2000      	movs	r0, #0
 8003520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003526:	2e00      	cmp	r6, #0
 8003528:	d0f9      	beq.n	800351e <__sflush_r+0x1a>
 800352a:	2300      	movs	r3, #0
 800352c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003530:	682f      	ldr	r7, [r5, #0]
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	d032      	beq.n	800359c <__sflush_r+0x98>
 8003536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	075a      	lsls	r2, r3, #29
 800353c:	d505      	bpl.n	800354a <__sflush_r+0x46>
 800353e:	6863      	ldr	r3, [r4, #4]
 8003540:	1ac0      	subs	r0, r0, r3
 8003542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003544:	b10b      	cbz	r3, 800354a <__sflush_r+0x46>
 8003546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003548:	1ac0      	subs	r0, r0, r3
 800354a:	2300      	movs	r3, #0
 800354c:	4602      	mov	r2, r0
 800354e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003550:	4628      	mov	r0, r5
 8003552:	6a21      	ldr	r1, [r4, #32]
 8003554:	47b0      	blx	r6
 8003556:	1c43      	adds	r3, r0, #1
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	d106      	bne.n	800356a <__sflush_r+0x66>
 800355c:	6829      	ldr	r1, [r5, #0]
 800355e:	291d      	cmp	r1, #29
 8003560:	d82c      	bhi.n	80035bc <__sflush_r+0xb8>
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <__sflush_r+0x108>)
 8003564:	40ca      	lsrs	r2, r1
 8003566:	07d6      	lsls	r6, r2, #31
 8003568:	d528      	bpl.n	80035bc <__sflush_r+0xb8>
 800356a:	2200      	movs	r2, #0
 800356c:	6062      	str	r2, [r4, #4]
 800356e:	6922      	ldr	r2, [r4, #16]
 8003570:	04d9      	lsls	r1, r3, #19
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	d504      	bpl.n	8003580 <__sflush_r+0x7c>
 8003576:	1c42      	adds	r2, r0, #1
 8003578:	d101      	bne.n	800357e <__sflush_r+0x7a>
 800357a:	682b      	ldr	r3, [r5, #0]
 800357c:	b903      	cbnz	r3, 8003580 <__sflush_r+0x7c>
 800357e:	6560      	str	r0, [r4, #84]	; 0x54
 8003580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003582:	602f      	str	r7, [r5, #0]
 8003584:	2900      	cmp	r1, #0
 8003586:	d0ca      	beq.n	800351e <__sflush_r+0x1a>
 8003588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800358c:	4299      	cmp	r1, r3
 800358e:	d002      	beq.n	8003596 <__sflush_r+0x92>
 8003590:	4628      	mov	r0, r5
 8003592:	f000 f909 	bl	80037a8 <_free_r>
 8003596:	2000      	movs	r0, #0
 8003598:	6360      	str	r0, [r4, #52]	; 0x34
 800359a:	e7c1      	b.n	8003520 <__sflush_r+0x1c>
 800359c:	6a21      	ldr	r1, [r4, #32]
 800359e:	2301      	movs	r3, #1
 80035a0:	4628      	mov	r0, r5
 80035a2:	47b0      	blx	r6
 80035a4:	1c41      	adds	r1, r0, #1
 80035a6:	d1c7      	bne.n	8003538 <__sflush_r+0x34>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0c4      	beq.n	8003538 <__sflush_r+0x34>
 80035ae:	2b1d      	cmp	r3, #29
 80035b0:	d001      	beq.n	80035b6 <__sflush_r+0xb2>
 80035b2:	2b16      	cmp	r3, #22
 80035b4:	d101      	bne.n	80035ba <__sflush_r+0xb6>
 80035b6:	602f      	str	r7, [r5, #0]
 80035b8:	e7b1      	b.n	800351e <__sflush_r+0x1a>
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	e7ad      	b.n	8003520 <__sflush_r+0x1c>
 80035c4:	690f      	ldr	r7, [r1, #16]
 80035c6:	2f00      	cmp	r7, #0
 80035c8:	d0a9      	beq.n	800351e <__sflush_r+0x1a>
 80035ca:	0793      	lsls	r3, r2, #30
 80035cc:	bf18      	it	ne
 80035ce:	2300      	movne	r3, #0
 80035d0:	680e      	ldr	r6, [r1, #0]
 80035d2:	bf08      	it	eq
 80035d4:	694b      	ldreq	r3, [r1, #20]
 80035d6:	eba6 0807 	sub.w	r8, r6, r7
 80035da:	600f      	str	r7, [r1, #0]
 80035dc:	608b      	str	r3, [r1, #8]
 80035de:	f1b8 0f00 	cmp.w	r8, #0
 80035e2:	dd9c      	ble.n	800351e <__sflush_r+0x1a>
 80035e4:	4643      	mov	r3, r8
 80035e6:	463a      	mov	r2, r7
 80035e8:	4628      	mov	r0, r5
 80035ea:	6a21      	ldr	r1, [r4, #32]
 80035ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035ee:	47b0      	blx	r6
 80035f0:	2800      	cmp	r0, #0
 80035f2:	dc06      	bgt.n	8003602 <__sflush_r+0xfe>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	e78e      	b.n	8003520 <__sflush_r+0x1c>
 8003602:	4407      	add	r7, r0
 8003604:	eba8 0800 	sub.w	r8, r8, r0
 8003608:	e7e9      	b.n	80035de <__sflush_r+0xda>
 800360a:	bf00      	nop
 800360c:	20400001 	.word	0x20400001

08003610 <_fflush_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	690b      	ldr	r3, [r1, #16]
 8003614:	4605      	mov	r5, r0
 8003616:	460c      	mov	r4, r1
 8003618:	b913      	cbnz	r3, 8003620 <_fflush_r+0x10>
 800361a:	2500      	movs	r5, #0
 800361c:	4628      	mov	r0, r5
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	b118      	cbz	r0, 800362a <_fflush_r+0x1a>
 8003622:	6983      	ldr	r3, [r0, #24]
 8003624:	b90b      	cbnz	r3, 800362a <_fflush_r+0x1a>
 8003626:	f7ff fa4f 	bl	8002ac8 <__sinit>
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <_fflush_r+0x6c>)
 800362c:	429c      	cmp	r4, r3
 800362e:	d11b      	bne.n	8003668 <_fflush_r+0x58>
 8003630:	686c      	ldr	r4, [r5, #4]
 8003632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ef      	beq.n	800361a <_fflush_r+0xa>
 800363a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800363c:	07d0      	lsls	r0, r2, #31
 800363e:	d404      	bmi.n	800364a <_fflush_r+0x3a>
 8003640:	0599      	lsls	r1, r3, #22
 8003642:	d402      	bmi.n	800364a <_fflush_r+0x3a>
 8003644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003646:	f7ff fadd 	bl	8002c04 <__retarget_lock_acquire_recursive>
 800364a:	4628      	mov	r0, r5
 800364c:	4621      	mov	r1, r4
 800364e:	f7ff ff59 	bl	8003504 <__sflush_r>
 8003652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003654:	4605      	mov	r5, r0
 8003656:	07da      	lsls	r2, r3, #31
 8003658:	d4e0      	bmi.n	800361c <_fflush_r+0xc>
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	059b      	lsls	r3, r3, #22
 800365e:	d4dd      	bmi.n	800361c <_fflush_r+0xc>
 8003660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003662:	f7ff fad0 	bl	8002c06 <__retarget_lock_release_recursive>
 8003666:	e7d9      	b.n	800361c <_fflush_r+0xc>
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <_fflush_r+0x70>)
 800366a:	429c      	cmp	r4, r3
 800366c:	d101      	bne.n	8003672 <_fflush_r+0x62>
 800366e:	68ac      	ldr	r4, [r5, #8]
 8003670:	e7df      	b.n	8003632 <_fflush_r+0x22>
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <_fflush_r+0x74>)
 8003674:	429c      	cmp	r4, r3
 8003676:	bf08      	it	eq
 8003678:	68ec      	ldreq	r4, [r5, #12]
 800367a:	e7da      	b.n	8003632 <_fflush_r+0x22>
 800367c:	08003984 	.word	0x08003984
 8003680:	080039a4 	.word	0x080039a4
 8003684:	08003964 	.word	0x08003964

08003688 <_lseek_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	2200      	movs	r2, #0
 8003692:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_lseek_r+0x20>)
 8003694:	602a      	str	r2, [r5, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	f7fd fb0d 	bl	8000cb6 <_lseek>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_lseek_r+0x1e>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_lseek_r+0x1e>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	200004bc 	.word	0x200004bc

080036ac <__swhatbuf_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460e      	mov	r6, r1
 80036b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b4:	4614      	mov	r4, r2
 80036b6:	2900      	cmp	r1, #0
 80036b8:	461d      	mov	r5, r3
 80036ba:	b096      	sub	sp, #88	; 0x58
 80036bc:	da07      	bge.n	80036ce <__swhatbuf_r+0x22>
 80036be:	2300      	movs	r3, #0
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	89b3      	ldrh	r3, [r6, #12]
 80036c4:	061a      	lsls	r2, r3, #24
 80036c6:	d410      	bmi.n	80036ea <__swhatbuf_r+0x3e>
 80036c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036cc:	e00e      	b.n	80036ec <__swhatbuf_r+0x40>
 80036ce:	466a      	mov	r2, sp
 80036d0:	f000 f8c8 	bl	8003864 <_fstat_r>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	dbf2      	blt.n	80036be <__swhatbuf_r+0x12>
 80036d8:	9a01      	ldr	r2, [sp, #4]
 80036da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036e2:	425a      	negs	r2, r3
 80036e4:	415a      	adcs	r2, r3
 80036e6:	602a      	str	r2, [r5, #0]
 80036e8:	e7ee      	b.n	80036c8 <__swhatbuf_r+0x1c>
 80036ea:	2340      	movs	r3, #64	; 0x40
 80036ec:	2000      	movs	r0, #0
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	b016      	add	sp, #88	; 0x58
 80036f2:	bd70      	pop	{r4, r5, r6, pc}

080036f4 <__smakebuf_r>:
 80036f4:	898b      	ldrh	r3, [r1, #12]
 80036f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036f8:	079d      	lsls	r5, r3, #30
 80036fa:	4606      	mov	r6, r0
 80036fc:	460c      	mov	r4, r1
 80036fe:	d507      	bpl.n	8003710 <__smakebuf_r+0x1c>
 8003700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	2301      	movs	r3, #1
 800370a:	6163      	str	r3, [r4, #20]
 800370c:	b002      	add	sp, #8
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	466a      	mov	r2, sp
 8003712:	ab01      	add	r3, sp, #4
 8003714:	f7ff ffca 	bl	80036ac <__swhatbuf_r>
 8003718:	9900      	ldr	r1, [sp, #0]
 800371a:	4605      	mov	r5, r0
 800371c:	4630      	mov	r0, r6
 800371e:	f7ff fa73 	bl	8002c08 <_malloc_r>
 8003722:	b948      	cbnz	r0, 8003738 <__smakebuf_r+0x44>
 8003724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003728:	059a      	lsls	r2, r3, #22
 800372a:	d4ef      	bmi.n	800370c <__smakebuf_r+0x18>
 800372c:	f023 0303 	bic.w	r3, r3, #3
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	e7e3      	b.n	8003700 <__smakebuf_r+0xc>
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <__smakebuf_r+0x7c>)
 800373a:	62b3      	str	r3, [r6, #40]	; 0x28
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	6020      	str	r0, [r4, #0]
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	81a3      	strh	r3, [r4, #12]
 8003746:	9b00      	ldr	r3, [sp, #0]
 8003748:	6120      	str	r0, [r4, #16]
 800374a:	6163      	str	r3, [r4, #20]
 800374c:	9b01      	ldr	r3, [sp, #4]
 800374e:	b15b      	cbz	r3, 8003768 <__smakebuf_r+0x74>
 8003750:	4630      	mov	r0, r6
 8003752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003756:	f000 f897 	bl	8003888 <_isatty_r>
 800375a:	b128      	cbz	r0, 8003768 <__smakebuf_r+0x74>
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	81a3      	strh	r3, [r4, #12]
 8003768:	89a0      	ldrh	r0, [r4, #12]
 800376a:	4305      	orrs	r5, r0
 800376c:	81a5      	strh	r5, [r4, #12]
 800376e:	e7cd      	b.n	800370c <__smakebuf_r+0x18>
 8003770:	08002a61 	.word	0x08002a61

08003774 <memchr>:
 8003774:	4603      	mov	r3, r0
 8003776:	b510      	push	{r4, lr}
 8003778:	b2c9      	uxtb	r1, r1
 800377a:	4402      	add	r2, r0
 800377c:	4293      	cmp	r3, r2
 800377e:	4618      	mov	r0, r3
 8003780:	d101      	bne.n	8003786 <memchr+0x12>
 8003782:	2000      	movs	r0, #0
 8003784:	e003      	b.n	800378e <memchr+0x1a>
 8003786:	7804      	ldrb	r4, [r0, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	428c      	cmp	r4, r1
 800378c:	d1f6      	bne.n	800377c <memchr+0x8>
 800378e:	bd10      	pop	{r4, pc}

08003790 <__malloc_lock>:
 8003790:	4801      	ldr	r0, [pc, #4]	; (8003798 <__malloc_lock+0x8>)
 8003792:	f7ff ba37 	b.w	8002c04 <__retarget_lock_acquire_recursive>
 8003796:	bf00      	nop
 8003798:	200004b4 	.word	0x200004b4

0800379c <__malloc_unlock>:
 800379c:	4801      	ldr	r0, [pc, #4]	; (80037a4 <__malloc_unlock+0x8>)
 800379e:	f7ff ba32 	b.w	8002c06 <__retarget_lock_release_recursive>
 80037a2:	bf00      	nop
 80037a4:	200004b4 	.word	0x200004b4

080037a8 <_free_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4605      	mov	r5, r0
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d043      	beq.n	8003838 <_free_r+0x90>
 80037b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b4:	1f0c      	subs	r4, r1, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bfb8      	it	lt
 80037ba:	18e4      	addlt	r4, r4, r3
 80037bc:	f7ff ffe8 	bl	8003790 <__malloc_lock>
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <_free_r+0x94>)
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	4610      	mov	r0, r2
 80037c6:	b933      	cbnz	r3, 80037d6 <_free_r+0x2e>
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6014      	str	r4, [r2, #0]
 80037cc:	4628      	mov	r0, r5
 80037ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d2:	f7ff bfe3 	b.w	800379c <__malloc_unlock>
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	d90a      	bls.n	80037f0 <_free_r+0x48>
 80037da:	6821      	ldr	r1, [r4, #0]
 80037dc:	1862      	adds	r2, r4, r1
 80037de:	4293      	cmp	r3, r2
 80037e0:	bf01      	itttt	eq
 80037e2:	681a      	ldreq	r2, [r3, #0]
 80037e4:	685b      	ldreq	r3, [r3, #4]
 80037e6:	1852      	addeq	r2, r2, r1
 80037e8:	6022      	streq	r2, [r4, #0]
 80037ea:	6063      	str	r3, [r4, #4]
 80037ec:	6004      	str	r4, [r0, #0]
 80037ee:	e7ed      	b.n	80037cc <_free_r+0x24>
 80037f0:	461a      	mov	r2, r3
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b10b      	cbz	r3, 80037fa <_free_r+0x52>
 80037f6:	42a3      	cmp	r3, r4
 80037f8:	d9fa      	bls.n	80037f0 <_free_r+0x48>
 80037fa:	6811      	ldr	r1, [r2, #0]
 80037fc:	1850      	adds	r0, r2, r1
 80037fe:	42a0      	cmp	r0, r4
 8003800:	d10b      	bne.n	800381a <_free_r+0x72>
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	4401      	add	r1, r0
 8003806:	1850      	adds	r0, r2, r1
 8003808:	4283      	cmp	r3, r0
 800380a:	6011      	str	r1, [r2, #0]
 800380c:	d1de      	bne.n	80037cc <_free_r+0x24>
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4401      	add	r1, r0
 8003814:	6011      	str	r1, [r2, #0]
 8003816:	6053      	str	r3, [r2, #4]
 8003818:	e7d8      	b.n	80037cc <_free_r+0x24>
 800381a:	d902      	bls.n	8003822 <_free_r+0x7a>
 800381c:	230c      	movs	r3, #12
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	e7d4      	b.n	80037cc <_free_r+0x24>
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	1821      	adds	r1, r4, r0
 8003826:	428b      	cmp	r3, r1
 8003828:	bf01      	itttt	eq
 800382a:	6819      	ldreq	r1, [r3, #0]
 800382c:	685b      	ldreq	r3, [r3, #4]
 800382e:	1809      	addeq	r1, r1, r0
 8003830:	6021      	streq	r1, [r4, #0]
 8003832:	6063      	str	r3, [r4, #4]
 8003834:	6054      	str	r4, [r2, #4]
 8003836:	e7c9      	b.n	80037cc <_free_r+0x24>
 8003838:	bd38      	pop	{r3, r4, r5, pc}
 800383a:	bf00      	nop
 800383c:	200000a4 	.word	0x200000a4

08003840 <_read_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	2200      	movs	r2, #0
 800384a:	4d05      	ldr	r5, [pc, #20]	; (8003860 <_read_r+0x20>)
 800384c:	602a      	str	r2, [r5, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	f7fd f9f0 	bl	8000c34 <_read>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_read_r+0x1e>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_read_r+0x1e>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	200004bc 	.word	0x200004bc

08003864 <_fstat_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	2300      	movs	r3, #0
 8003868:	4d06      	ldr	r5, [pc, #24]	; (8003884 <_fstat_r+0x20>)
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	f7fd fa07 	bl	8000c84 <_fstat>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	d102      	bne.n	8003880 <_fstat_r+0x1c>
 800387a:	682b      	ldr	r3, [r5, #0]
 800387c:	b103      	cbz	r3, 8003880 <_fstat_r+0x1c>
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	bd38      	pop	{r3, r4, r5, pc}
 8003882:	bf00      	nop
 8003884:	200004bc 	.word	0x200004bc

08003888 <_isatty_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	2300      	movs	r3, #0
 800388c:	4d05      	ldr	r5, [pc, #20]	; (80038a4 <_isatty_r+0x1c>)
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	f7fd fa05 	bl	8000ca2 <_isatty>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_isatty_r+0x1a>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_isatty_r+0x1a>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	200004bc 	.word	0x200004bc

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
